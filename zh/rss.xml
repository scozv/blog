<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">


<channel>
  <title>Code this.</title>
  <description>Code this. - Scott</description>
  <link>https://scozv.github.io/blog/zh/rss.xml</link>
  <link>https://scozv.github.io/blog/zh</link>
  <lastBuildDate>2019-02-17T22:37:05+08:00</lastBuildDate>
  <pubDate>2019-02-17T22:37:05+08:00</pubDate>
  <ttl>1800</ttl>
  
    
      <item>
        <title>使用自定义Akka Dispatcher和Mapped Diagnostic Contexts为Play中的日志增加Tracking Id</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Yann Simon在2014的文章&lt;sup id=&quot;fnref:_blog_yanns_mdc_play&quot;&gt;&lt;a href=&quot;#fn:_blog_yanns_mdc_play&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;中总结了两种向Mapped Diagnostic Contexts（MDC）
增加全局变量的编程方式，利用MDC的全局变量，可以在日志中记录每一个HTTP Request的Tracking Id。&lt;/p&gt;

  &lt;p&gt;本文首先对Tracking Id和Yann Simon的两种方式做简要介绍，并描述实践过程
中遇到的问题。其中一个主要的问题是，
部分日志没有Tracking Id（同样的问题在Github上也被提到 &lt;sup id=&quot;fnref:_github_rishabh9_issue1&quot;&gt;&lt;a href=&quot;#fn:_github_rishabh9_issue1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;）。
本文通过在日志中输出了线程信息和Dispatcher的名称，发现&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.concurrent.ExecutionContext&lt;/code&gt;
下的所有日志，都没有Tracking Id，最终通过修改配置节点&lt;code class=&quot;highlighter-rouge&quot;&gt;play.akka.actor&lt;/code&gt;至&lt;code class=&quot;highlighter-rouge&quot;&gt;akka.actor&lt;/code&gt;，同时替换该&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionContext&lt;/code&gt;的方式
解决了日志中无Tracking Id的问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#背景介绍&quot; id=&quot;markdown-toc-背景介绍&quot;&gt;背景介绍&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tracking-id的重要性&quot; id=&quot;markdown-toc-tracking-id的重要性&quot;&gt;Tracking Id的重要性&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#tracking-id的方案设计&quot; id=&quot;markdown-toc-tracking-id的方案设计&quot;&gt;Tracking Id的方案设计&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tracking-id的实现&quot; id=&quot;markdown-toc-tracking-id的实现&quot;&gt;Tracking Id的实现&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#golang下的一种实现方式&quot; id=&quot;markdown-toc-golang下的一种实现方式&quot;&gt;Golang下的一种实现方式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#基于httpfilter和dispatcher的实现&quot; id=&quot;markdown-toc-基于httpfilter和dispatcher的实现&quot;&gt;基于HttpFilter和Dispatcher的实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#实践过程中的建议&quot; id=&quot;markdown-toc-实践过程中的建议&quot;&gt;实践过程中的建议&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#解决tracking-id未能添加到日志的问题&quot; id=&quot;markdown-toc-解决tracking-id未能添加到日志的问题&quot;&gt;解决Tracking Id未能添加到日志的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#问题表述&quot; id=&quot;markdown-toc-问题表述&quot;&gt;问题表述&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#解决思路&quot; id=&quot;markdown-toc-解决思路&quot;&gt;解决思路&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#停用scala自带executioncontextglobal&quot; id=&quot;markdown-toc-停用scala自带executioncontextglobal&quot;&gt;停用Scala自带ExecutionContext.global&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tracking-id设计的改进&quot; id=&quot;markdown-toc-tracking-id设计的改进&quot;&gt;Tracking Id设计的改进&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;背景介绍&quot;&gt;背景介绍&lt;/h1&gt;

&lt;p&gt;软件工程中，比争论不同编程语言孰优孰劣更重要的是，在系统层面使用高效
的交付方式，建立完善系统监控机制。如果说Git工作流、测试或者覆盖率等是
可持续交付的基本保障，那么诸如日志、健康检查或者运行时度量（Metric）便是
系统监控的基础。&lt;/p&gt;

&lt;p&gt;软件交付之后，难免会遇上运行时错误，快速地定位并处理问题是保证
系统可靠的一个因素。在定位线上问题的时候，
常见的做法是查看日志，Tracking Id是日志信息中针对不同的HTTP Request
分别生成的唯一编号，用来追踪每一个请求在系统中经历的不同节点。&lt;/p&gt;

&lt;h2 id=&quot;tracking-id的重要性&quot;&gt;Tracking Id的重要性&lt;/h2&gt;

&lt;p&gt;目前的系统，通常需要应对大量的请求、而且系统的部署节点可能分布在不同的物理位置。
简单的&lt;code class=&quot;highlighter-rouge&quot;&gt;tail -f application.log&lt;/code&gt;命令无法跟踪系统的运行状态。&lt;/p&gt;

&lt;p&gt;同时，由于多线程的执行对不同请求而言不是线性的，所以不同请求的日志信息
会随机写入到日志文件中。在日志中使用Tracking Id，能够重组不同的请求
的运行时状态。比较如下两份日志文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:06:55.560Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] user 1 connected
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:06:57.121Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] get token from redis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:03.289Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] start the query with parameter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:03.981Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] user 2 connected
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.192Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;WARN] get result with 1029ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.207Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] get token from redis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.285Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] invalid token&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:06:55.560Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-0001] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] user 1 connected
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:06:57.121Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-0001] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] get token from redis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:03.289Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-0001] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] start the query with parameter &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:03.981Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-1024] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] user 2 connected
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.192Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-0001] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;WARN] get result with 1029ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.207Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-1024] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;DEBUG] get token from redis
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;2017-07-17T19:07:05.285Z] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;tracking-id-1024] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ERROR] invalid token&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以看到，第二份日志清晰地记录了两个请求，而且两个请求在系统中的流转过程可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;
完整地串联起来。&lt;/p&gt;

&lt;h2 id=&quot;tracking-id的方案设计&quot;&gt;Tracking Id的方案设计&lt;/h2&gt;

&lt;p&gt;本文在Play 2.6下实现了服务端&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;的生成和记录：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;服务端接收到请求（HTTP Request）；&lt;/li&gt;
  &lt;li&gt;利用&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;为每一个请求赋予一个唯一&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;尝试将&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;写入相关的日志中；&lt;/li&gt;
  &lt;li&gt;同样在&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;中，将&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;写入最后的HTTP Response中；&lt;/li&gt;
  &lt;li&gt;客户端接收到带有&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;的返回结果。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Yann Simon给出的方案就是为了将&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;写入
Mapped Diagnostic Contexts中，从而可以使用如下的Pattern记录带有
&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;的日志：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${application.home:-.}/logs/application.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%date [%level] [%mdc{trackingId:--}] %message%n%xException&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;tracking-id的实现&quot;&gt;Tracking Id的实现&lt;/h1&gt;

&lt;h2 id=&quot;golang下的一种实现方式&quot;&gt;Golang下的一种实现方式&lt;/h2&gt;

&lt;p&gt;使用Golang下的&lt;code class=&quot;highlighter-rouge&quot;&gt;cihub/seelog&lt;/code&gt;，会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;seelog&lt;/code&gt;中并不支持带有
&lt;code class=&quot;highlighter-rouge&quot;&gt;%mdc&lt;/code&gt;的日志格式（Pattern）&lt;sup id=&quot;fnref:_github_cihub_seelog_format_ref&quot;&gt;&lt;a href=&quot;#fn:_github_cihub_seelog_format_ref&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。
David Budworth指出“Java下MDC所依赖的线程存储（Thread Local Storage），
在Go中并不存在 &lt;sup id=&quot;fnref:_sf_david_bud_mdc_java_go&quot;&gt;&lt;a href=&quot;#fn:_sf_david_bud_mdc_java_go&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;”。&lt;/p&gt;

&lt;p&gt;尽管如此，可以利用&lt;code class=&quot;highlighter-rouge&quot;&gt;Context&lt;/code&gt;传递&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;。
一方面，在&lt;code class=&quot;highlighter-rouge&quot;&gt;gin.Context&lt;/code&gt;的基础上新建一个对象 &lt;sup id=&quot;fnref:_note_where_go_code_from&quot;&gt;&lt;a href=&quot;#fn:_note_where_go_code_from&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrackingId&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TrackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GenGuid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另一方面，在需要记录日志的地方，将&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestContext&lt;/code&gt;对象传递到
日志相关的方法中:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span class=&quot;k&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fooAction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:=&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getRequestContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;// ..., err =&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;

  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Errorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buildLogMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Failed in fooAction: $v&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;x&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;x&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述代码中，&lt;code class=&quot;highlighter-rouge&quot;&gt;getRequestContext&lt;/code&gt;用于获取（&lt;code class=&quot;highlighter-rouge&quot;&gt;val.(*RequestContext)&lt;/code&gt;）
或者新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestContext&lt;/code&gt;（对应&lt;code class=&quot;highlighter-rouge&quot;&gt;newContext&lt;/code&gt;）。日志记录时，通过获取到的
&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestContext&lt;/code&gt;创建带有&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;的消息体，并记录到日志中。&lt;/p&gt;

&lt;p&gt;这样，Golang虽然不能通过MDC的方式（&lt;code class=&quot;highlighter-rouge&quot;&gt;%mdc{trackingId}&lt;/code&gt;）将&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;写入日志，
但在创建日志消息体的时候，可将&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;附在消息体的最后。唯一的限制条件就是，
日志的Pattern需设计成：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;appender&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FILE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ch.qos.logback.core.FileAppender&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;file&amp;gt;&lt;/span&gt;${application.home:-.}/logs/application.log&lt;span class=&quot;nt&quot;&gt;&amp;lt;/file&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;encoder&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;pattern&amp;gt;&lt;/span&gt;%date [%level] %message%n%xException&lt;span class=&quot;nt&quot;&gt;&amp;lt;/pattern&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/encoder&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样，无论是通过Java的MDC还是消息体中直接带上 &lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;。
都能保证最后的日志格式一致：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;// with MDC
%date [%level] [%mdc{trackingId:--}] %message%n%xException

// in Golang
%date [%level] %message%n%xException

func buildLogMessage(ctx *RequestContext, format string, parms ...interface{}) string {
  // [trackingId] msg
  f := fmt.Sprintf(&quot;[%s] &quot;, ctx.TrackingId) + format
  return fmt.Sprintf(f, parms...)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;基于httpfilter和dispatcher的实现&quot;&gt;基于HttpFilter和Dispatcher的实现&lt;/h2&gt;

&lt;p&gt;Yann Simon指出，Play框架会使用不同的线程（Thread）处理同一个HTTP Request。
而Logback中MDC采用的&lt;code class=&quot;highlighter-rouge&quot;&gt;ThreadLocal&lt;/code&gt;变量，只在单线程中有效&lt;sup id=&quot;fnref:_blog_yanns_mdc_play:1&quot;&gt;&lt;a href=&quot;#fn:_blog_yanns_mdc_play&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
因此，为了给每一个HTTP Request赋予唯一的Tracking Id，
并写入不同线程中的日志中，需要完成为Request生成编号、将编号写入日志两个步骤。&lt;/p&gt;

&lt;p&gt;在Play框架下，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;对每一个HTTP Request做一次“过滤”
的操作，自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;一来为请求生成一个编号，二来在后台服务结束之后，将编号
写入HTTP Response的Header中。当客户端收到异常的时候，可以告知服务端Tracking Id，
用于查找相关的日志消息。主要的代码如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TrackingFilter&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecutionContext&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EssentialFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EssentialAction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EssentialAction&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestHeader&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;RequestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Accumulator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ByteString&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackingId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trackingId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requestHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Tracking-Id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;trackingId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;所生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;还需要传递到不同的线程中，并写入各个线程中的MDC里面，
也就是将MDC中的信息从一个线程传递到另外一个线程中。
使用Yann Simon文中总结的两种方法——自定义Akka Dispatcher和ExecutionContext，可以
在非阻塞的Play框架中实现这个功能。&lt;/p&gt;

&lt;p&gt;本文选用了自定义Akka Dispatcher的方式，关键的代码如下所示，
需要注意的是，代码中线程的切换发生在&lt;code class=&quot;highlighter-rouge&quot;&gt;self.execute(() =&amp;gt; {})&lt;/code&gt;里：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldMDCContext&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getCopyOfContextMap&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;setContextMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mdcContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;setContextMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;oldMDCContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;实践过程中的建议&quot;&gt;实践过程中的建议&lt;/h2&gt;

&lt;p&gt;相关实现的代码量并不大，并且自定义Akka Dispatcher的代码量相较第二种
方法，代码量更少。&lt;/p&gt;

&lt;p&gt;使用Play 2.6的话，需要保持代码的可注入特性，&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackingFilter&lt;/code&gt;就是一个依赖
注入的例子。但使用的时候，需要同时配置&lt;code class=&quot;highlighter-rouge&quot;&gt;play.http.filters&lt;/code&gt;参数&lt;sup id=&quot;fnref:_play_http_filters&quot;&gt;&lt;a href=&quot;#fn:_play_http_filters&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;如果自定义了&lt;code class=&quot;highlighter-rouge&quot;&gt;play.http.filters&lt;/code&gt;参数，在Play的启动日志中可以发现，框架默认开启了四个&lt;code class=&quot;highlighter-rouge&quot;&gt;HttpFilter&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] p.a.h.EnabledFilters - Enabled Filters &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see &amp;lt;https://www.playframework.com/documentation/latest/Filters&amp;gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:

    play.filters.csrf.CSRFFilter
    play.filters.headers.SecurityHeadersFilter
    play.filters.hosts.AllowedHostsFilter
    play.filters.cors.CORSFilter

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] play.api.Play - Application started &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果收到了“Host not allowed: server-name”的问题，需要配置
Host的白名单&lt;sup id=&quot;fnref:_play_host_allowed&quot;&gt;&lt;a href=&quot;#fn:_play_host_allowed&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;。另外，一些云IaaS平台提供
的Load Balance还会使用Private IP进行健康检查，日志中也可能出现
“Host not allowed: private-ip”的问题，白名单配置中也需要处理。&lt;/p&gt;

&lt;p&gt;如果白名单失效的话，最快的办法是移除&lt;code class=&quot;highlighter-rouge&quot;&gt;AllowedHostsFilter&lt;/code&gt;的加载：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Filters&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;defaultFilters&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnabledFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;tracking&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;TrackingFilter&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DefaultHttpFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;defaultFilters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AllowedHostsFilter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tracking&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另一个需要注意的是，自定义的Dispatcher需要配置在&lt;code class=&quot;highlighter-rouge&quot;&gt;akka.actor&lt;/code&gt;节点之下，
Yann Simon文中配置节点为&lt;code class=&quot;highlighter-rouge&quot;&gt;play.akka.actor&lt;/code&gt;，在实践过程中，可以通过运行时检验两种
配置的结果。&lt;/p&gt;

&lt;h1 id=&quot;解决tracking-id未能添加到日志的问题&quot;&gt;解决Tracking Id未能添加到日志的问题&lt;/h1&gt;

&lt;h2 id=&quot;问题表述&quot;&gt;问题表述&lt;/h2&gt;

&lt;p&gt;完成代码实现之后，发现大部分的日志没有Tracking Id：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] play.api.Play - Application started &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;warn] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.z.h.HikariConfig - The initializationFailFast propery is deprecated, see initializationFailTimeout
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.l.p.a.v.g.G.w.s.com - list feature enabled: Vector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;security, profile&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.l.p.a.v.g.ActivityApi - start the get last message
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.l.p.n.d.ReactiveMongoManager&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;-  &amp;lt;:&amp;gt; Connecting reactive driver&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackingFilter&lt;/code&gt;中加入日志之后，
进而发现，在生成&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;之后，日志上有编号，但是之后的日志却没有：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] play.api.Play - Application started &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;3734068e-f354-4de4-a9e7-25fc6ed9a1cb] c.l.TrackingFilter -  &amp;lt;:&amp;gt; trackingId generated: 3734068e-f354-4de4-a9e7-25fc6ed9a1cb
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;warn] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.z.h.HikariConfig - The initializationFailFast propery is deprecated, see initializationFailTimeout
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] c.l.p.a.v.g.G.w.s.com - list feature enabled: Vector&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;security, profile&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;进一步地，在自定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;MDCPropagatingDispatcher&lt;/code&gt;里添加日志，可以看到类似如下的结果：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] play.api.Play - Application started &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a5a7cbab-6ee4-4dd8-b54e-64217dc7357e] c.l.TrackingFilter -  &amp;lt;:&amp;gt; trackingId generated: a5a7cbab-6ee4-4dd8-b54e-64217dc7357e
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a5a7cbab-6ee4-4dd8-b54e-64217dc7357e] old context: null
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;a5a7cbab-6ee4-4dd8-b54e-64217dc7357e] new context: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;a5a7cbab-6ee4-4dd8-b54e-64217dc7357e&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# many log skipped  ...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] old context: null
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] new context: null
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] old context: &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] new context: null&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;解决思路&quot;&gt;解决思路&lt;/h2&gt;

&lt;p&gt;上面最后一则日志中可以看出：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自定义的Dispatcher生效了，因为日志中含有Dispather的日志；&lt;/li&gt;
  &lt;li&gt;线程可能在不停地切换，因为出现了多则&lt;code class=&quot;highlighter-rouge&quot;&gt;old / new context&lt;/code&gt;的日志，而且相应的日志内容还不同。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因此，待解决的问题归纳为：为什么多个线程之间，MDC信息没有相互传递。
既然已经意识到了是多线程的问题，不妨在日志中输出线程名称：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# Log format&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;lt;pattern&amp;gt;%coloredLevel [%mdc{trackingId:--}] [%thread] %logger{15} - %message%n%xException{10}&amp;lt;/pattern&amp;gt;&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;info] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;scala-execution-context-global-80] play.api.Play - Application started &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Dev&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;006bc4df-0310-4793-a88d-923dfde227d9] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;play-dev-mode-akka.actor.default-dispatcher-2] c.l.TrackingFilter -  &amp;lt;:&amp;gt; trackingId generated: 006bc4df-0310-4793-a88d-923dfde227d9
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;006bc4df-0310-4793-a88d-923dfde227d9] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;application-akka.actor.default-dispatcher-2] - old context: null
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;006bc4df-0310-4793-a88d-923dfde227d9] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;application-akka.actor.default-dispatcher-2] - new context: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;006bc4df-0310-4793-a88d-923dfde227d9&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;warn] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;scala-execution-context-global-80] - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'fd'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'POST /api/auth'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clientIp'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0:0:0:0:0:0:0:1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;lt;:&amp;gt; Valid token not found&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;留意到最后两条日志，一条带Tracking Id，另一条没有：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;006bc4df-0310-4793-a88d-923dfde227d9] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;application-akka.actor.default-dispatcher-2] - new context: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;trackingId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;006bc4df-0....
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;warn] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;-] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;scala-execution-context-global-80] - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'404'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'POST /api/auth'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clientIp'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0:0:0:0:0:0:0:1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;lt;:&amp;gt; Valid token not found&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;从线程的名称可以看到两条日志使用的线程是不同对象创建的：
前者使用的是&lt;code class=&quot;highlighter-rouge&quot;&gt;akka.actor.default-dispatcher&lt;/code&gt;，后者
从名称（&lt;code class=&quot;highlighter-rouge&quot;&gt;scala-execution-context-global-80&lt;/code&gt;）推断，应该和&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.concurrent.ExecutionContext.global&lt;/code&gt;有关。&lt;/p&gt;

&lt;p&gt;Play 2.6提倡使用依赖注入，所以使用全局&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionContext.global&lt;/code&gt;
不是一种好的实践方式&lt;sup id=&quot;fnref:_play_ec_deprected&quot;&gt;&lt;a href=&quot;#fn:_play_ec_deprected&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;停用scala自带executioncontextglobal&quot;&gt;停用Scala自带ExecutionContext.global&lt;/h2&gt;

&lt;p&gt;通过上面的分析，尝试在代码中查找&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionContext.global&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;implicit&lt;/code&gt;引用，
并使用依赖注入的方式替代&lt;code class=&quot;highlighter-rouge&quot;&gt;ExecutionContext.global&lt;/code&gt;，一种修改方案是：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Security&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Inject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecutionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;membersDao&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;MembersDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;userApiToken&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;UserApiTokenDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;enforceHttpsAction&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;EnforceHttpsAction&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;concurrent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ExecutionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;global&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;修改之后，重新启动服务，可以看到日志信息中已经包含了Tracking Id：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;debug] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;f6ab38a5-1461-44c9-a5f8-ce7764025fad] -  &amp;lt;:&amp;gt; trackingId generated: f6ab38a5-1461-44c9-a5f8-ce7764025fad
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;warn] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;f6ab38a5-1461-44c9-a5f8-ce7764025fad] - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'token'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'404'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'POST /api/auth'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'clientIp'&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;'0:0:0:0:0:0:0:1'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &amp;lt;:&amp;gt; Valid token not found&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;tracking-id设计的改进&quot;&gt;Tracking Id设计的改进&lt;/h1&gt;

&lt;p&gt;Tracking Id的重要性不必多说，本文的实践只是完成了服务端的Tracking Id 处理。&lt;/p&gt;

&lt;p&gt;一个完整的Tracking Id方案最好能形成一个闭环，从客户端的发起、到网络中的
反向代理（Nginx日志），传递到服务端进行后台处理，包括返回的最终结果，每一个节点都能记录
唯一的&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;。在这种方案中，通常由客户端生成&lt;code class=&quot;highlighter-rouge&quot;&gt;trackingId&lt;/code&gt;，传递给系统
的其它节点使用，并最终送回给客户端。因此使用Ngnix的系统
最好在Access Log里面也加入Tracking Id，通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;condition&lt;/code&gt;配置&lt;sup id=&quot;fnref:_ngix_condition_log&quot;&gt;&lt;a href=&quot;#fn:_ngix_condition_log&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;，可以对
HTTP &lt;code class=&quot;highlighter-rouge&quot;&gt;4xx&lt;/code&gt;的Response做相应的记录，从而通过Tracking Id，可以：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Ngnix日志中找到对应的HTTP完整信息；&lt;/li&gt;
  &lt;li&gt;在后端日志中找到相应的步骤日志&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样，系统出现异常时，前端只需要回报Tracking Id，开发人员便可以
方面的了解该异常的背景信息了。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:_blog_yanns_mdc_play&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://yanns.github.io/blog/2014/05/04/slf4j-mapped-diagnostic-context-mdc-with-play-framework/&quot;&gt;SLF4J Mapped Diagnostic Context (MDC) With Play Framework&lt;/a&gt; by Yann Simon, 2014&amp;nbsp;&lt;a href=&quot;#fnref:_blog_yanns_mdc_play&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_blog_yanns_mdc_play:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_github_rishabh9_issue1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/rishabh9/mdc-propagation-dispatcher/issues/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackingId&lt;/code&gt; not printed as description in issue #1 of rishabh9/mdc-propagation-dispatcher&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_github_rishabh9_issue1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_github_cihub_seelog_format_ref&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/cihub/seelog/wiki/Format-reference/7eb0ebc6df74a6386165d9b4687445c6b86bac97&quot;&gt;Format Reference of cihub/seelog&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_github_cihub_seelog_format_ref&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_sf_david_bud_mdc_java_go&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/a/41049394&quot;&gt;&lt;em&gt;“Java MDC relies on thread local storage, Go does not have”&lt;/em&gt; by David Budworth’s reply on Stackoverflow&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_sf_david_bud_mdc_java_go&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_note_where_go_code_from&quot;&gt;
      &lt;p&gt;这段代码中的&lt;code class=&quot;highlighter-rouge&quot;&gt;RequestContext&lt;/code&gt;来自沪江工作期间，原同事的Golang代码，我在其基础上增加了&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackingId&lt;/code&gt;变量，并完成了日志中写入&lt;code class=&quot;highlighter-rouge&quot;&gt;TrackingId&lt;/code&gt;的代码&amp;nbsp;&lt;a href=&quot;#fnref:_note_where_go_code_from&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_play_http_filters&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/ScalaHttpFilters#Using-filters&quot;&gt;Using Filters in Play 2.6&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_play_http_filters&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_play_host_allowed&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.6.x/AllowedHostsFilter#Configuring-allowed-hosts&quot;&gt;Configure Allowed Hosts&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_play_host_allowed&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_play_ec_deprected&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://playframework.com/documentation/2.6.x/Migration26#play.api.libs.concurrent.Execution-is-deprecated&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;play.api.libs.concurrent.Execution&lt;/code&gt; is deprecated&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_play_ec_deprected&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:_ngix_condition_log&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://nginx.org/en/docs/http/ngx_http_log_module.html&quot;&gt;Module ngx_http_log_module&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_ngix_condition_log&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2017/07/18/injection-of-tracking-id-to-logback-message-with-customer-dispatcher-and-mapped-diagnostic-contexts-in-scala</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2017/07/18/injection-of-tracking-id-to-logback-message-with-customer-dispatcher-and-mapped-diagnostic-contexts-in-scala</guid>
        <pubDate>2017-07-18T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>纠结于具体的代码实现，不妨准备更完备的测试用例</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果我们有如下的一个需求：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;在数据库中存储带有通配符的匹配规则，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;*a.com&lt;/code&gt;，&lt;/li&gt;
    &lt;li&gt;该规则可以匹配出，&lt;code class=&quot;highlighter-rouge&quot;&gt;s1.a.com&lt;/code&gt;，但是不应该匹配出&lt;code class=&quot;highlighter-rouge&quot;&gt;a.com&lt;/code&gt;。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;本文将简单介绍两种可行的方法，但是更想强调，在这样的情况下，完备的测试
比具体的实现细节更重要。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#需求描述&quot; id=&quot;markdown-toc-需求描述&quot;&gt;需求描述&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#两种实现方式&quot; id=&quot;markdown-toc-两种实现方式&quot;&gt;两种实现方式&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用internetdomainname查找关键字符串&quot; id=&quot;markdown-toc-使用internetdomainname查找关键字符串&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDomainName&lt;/code&gt;查找关键字符串&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#构造出匹配规则&quot; id=&quot;markdown-toc-构造出匹配规则&quot;&gt;构造出匹配规则&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#使用正则&quot; id=&quot;markdown-toc-使用正则&quot;&gt;使用正则&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#优先考虑测试用例的完善&quot; id=&quot;markdown-toc-优先考虑测试用例的完善&quot;&gt;优先考虑测试用例的完善&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;需求描述&quot;&gt;需求描述&lt;/h1&gt;

&lt;p&gt;假如想支持如下四种通配规则（按照规则的先后执行）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;a.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       -&amp;gt; 1
a-&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;       -&amp;gt; 2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.a.com   -&amp;gt; 3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.a.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;     -&amp;gt; 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;箭头左边的表示通配规则，右边表示，当一个域名（输入参数）匹配的时候，
应该返回什么。&lt;/p&gt;

&lt;p&gt;比如，如下两个匹配的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;z.a.com   -&amp;gt; 3
z.a.io    -&amp;gt; 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;两种实现方式&quot;&gt;两种实现方式&lt;/h1&gt;

&lt;p&gt;因为有通配符的存在，直接使用&lt;code class=&quot;highlighter-rouge&quot;&gt;substring&lt;/code&gt;的方式并不可行。&lt;/p&gt;

&lt;p&gt;我们可以尝试想把输入参数中的关键字符串（比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;）提取出来，
再构造出匹配规则，最后和数据库相匹配。&lt;/p&gt;

&lt;h2 id=&quot;使用internetdomainname查找关键字符串&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDomainName&lt;/code&gt;查找关键字符串&lt;/h2&gt;

&lt;p&gt;因为是域名的匹配，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDomainName&lt;/code&gt; &lt;sup id=&quot;fnref:_guava_int_dn&quot;&gt;&lt;a href=&quot;#fn:_guava_int_dn&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;先
提取出根域名。总之，我们假定，我们能找到一个方法，从一个域名里面提出
根域名。&lt;/p&gt;

&lt;p&gt;定义该方法为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getRootDomain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;domain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;构造出匹配规则&quot;&gt;构造出匹配规则&lt;/h2&gt;

&lt;p&gt;已知四种匹配规则，并且也知道了根域名。我们可以拼接成精确的匹配字符串。&lt;/p&gt;

&lt;p&gt;示例代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;function matchAndGetResult(domain) {
  var rootDomain = getRootDomain(domain)
  // rule 1
  if (db.find(`$rootDomain.*`)) return 1
  if (db.find(`$rootDomain-*`)) return 2
  if (db.find(`*.$rootDomain.com`)) return 3
  if (db.find(`*.$rootDomain.*`)) return 4
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果我们适当地写几个测试用例，就会发现，上面的代码是有问题的，比如
如下的测试用例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;matchAndGetResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'z.a.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;但实际上，返回的值确是&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;所以我们想了想，又匆匆忙忙得改改代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;function matchAndGetResult(domain) {
  var rootDomain = getRootDomain(domain)
  // rule 1
  if (db.find(`$rootDomain.*`) &amp;amp;&amp;amp; domain.startWith(`$rootDomain.`))
    return 1
  // ...
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样的方法是可行的，但是会发现两个不足的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;部分匹配规则需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;startWith&lt;/code&gt;，部分匹配规则需要使用&lt;code class=&quot;highlighter-rouge&quot;&gt;contains()&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果匹配规则多的话，&lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt; 的次数也会增多。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;使用正则&quot;&gt;使用正则&lt;/h2&gt;

&lt;p&gt;对于上面的两个不足，可以总结为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;如何判断，字符串匹配的时候，是发生在“开始”，还是“中间”？&lt;/li&gt;
  &lt;li&gt;如何在还原匹配规则的时候，可以匹配更多的情况，减少&lt;code class=&quot;highlighter-rouge&quot;&gt;if-return&lt;/code&gt;的分支？&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们可以使用正则，因为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正则可以判断字符串匹配的位置；&lt;/li&gt;
  &lt;li&gt;也可以匹配多种情况。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一种实现方式，可以参考如下的示例代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;function matchAndGetResult(domain) {
  var rootDomain = getRootDomain(domain)

  if (var dbResult = db.find(`$rootDomain.*`)) {
    // build the regex
    var regex = dbResult
      .string
      .replace('*', '[\\S]*')
      .replace('.', '\\.')

    if (/^$regex/g).test(domain) {
      return dbResult.value
    }
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;优先考虑测试用例的完善&quot;&gt;优先考虑测试用例的完善&lt;/h1&gt;

&lt;p&gt;除了以上两种实现，应该还有更好的代码实现。&lt;/p&gt;

&lt;p&gt;但本文想要表达的意思是：“有的情况下，完备的测试用例，比代码的具体实现方式（细节）更加的重要”。&lt;/p&gt;

&lt;p&gt;我认为本文属于这样的情况：&lt;/p&gt;

&lt;p&gt;一来，需求有清晰直观的输入输出值。本文的需求拿到之后，已经可以直接写出一系列的输入输出了。
具体的代码实现，反而需要思考不同的情况。&lt;/p&gt;

&lt;p&gt;再者，代码的实现，通常是私有的，内部的方法，而且代码量并不大。不需要过度纠结实现的细节。&lt;/p&gt;

&lt;p&gt;最后，代码的实现方式也有很多种，不同的人，有不同的思路，代码的可读性也不同。
该谁做，就用谁的思路。&lt;/p&gt;

&lt;p&gt;只要保证，满足所有的测试用例就行了。因此，适当的测试驱动开发，是合理的。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;p&gt;上面提到的，代码细节不重要，有一定的限定条件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在某些情况下；&lt;/li&gt;
  &lt;li&gt;“不重要”不代表，完全不遵从社区、或者团队之间的开发规范&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这样的限定下，在开发过程中，还有很多优先级，可以排在“精益求精”的代码细节之前的：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;正确的实现；&lt;/li&gt;
  &lt;li&gt;尽快地实现功能；&lt;/li&gt;
  &lt;li&gt;完备的测试可供检查和重构；&lt;/li&gt;
  &lt;li&gt;等等等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:_guava_int_dn&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/google/guava/wiki/InternetDomainNameExplained&quot;&gt;Explanation of &lt;code class=&quot;highlighter-rouge&quot;&gt;InternetDomainName&lt;/code&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:_guava_int_dn&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/algo/2017/03/23/use-minimum-matched-string-and-extended-regex-for-wildcard-matching</link>
        <guid>https://scozv.github.io/blog/zh/algo/2017/03/23/use-minimum-matched-string-and-extended-regex-for-wildcard-matching</guid>
        <pubDate>2017-03-23T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>Bolero，累积更新说明（2016-09-04）</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文是对&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;代码模板的累积更新的说明和解释。
有关&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的整体介绍，请参考早期的文章&lt;sup id=&quot;fnref:blog_bolero&quot;&gt;&lt;a href=&quot;#fn:blog_bolero&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的源代码参见 &lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;scozv/bolero&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#约定和规范&quot; id=&quot;markdown-toc-约定和规范&quot;&gt;约定和规范&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#统一的http-response&quot; id=&quot;markdown-toc-统一的http-response&quot;&gt;统一的HTTP Response&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#payload和respose的一致性&quot; id=&quot;markdown-toc-payload和respose的一致性&quot;&gt;Payload和Respose的一致性&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#几处重构和增强&quot; id=&quot;markdown-toc-几处重构和增强&quot;&gt;几处重构和增强&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#升级的canconnectdb2&quot; id=&quot;markdown-toc-升级的canconnectdb2&quot;&gt;升级的&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#拆分canbehierarchic&quot; id=&quot;markdown-toc-拆分canbehierarchic&quot;&gt;拆分&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeHierarchic&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#全局的action-not-found处理&quot; id=&quot;markdown-toc-全局的action-not-found处理&quot;&gt;全局的&lt;code class=&quot;highlighter-rouge&quot;&gt;Action Not Found&lt;/code&gt;处理&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#增强了responseok的功能&quot; id=&quot;markdown-toc-增强了responseok的功能&quot;&gt;增强了&lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseOk&lt;/code&gt;的功能&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#清理unused-import&quot; id=&quot;markdown-toc-清理unused-import&quot;&gt;清理&lt;code class=&quot;highlighter-rouge&quot;&gt;unused import&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#未能解决的问题&quot; id=&quot;markdown-toc-未能解决的问题&quot;&gt;未能解决的问题&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#服务启动之后的编译&quot; id=&quot;markdown-toc-服务启动之后的编译&quot;&gt;服务启动之后的编译&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#routes更新之后需要run过才能测试&quot; id=&quot;markdown-toc-routes更新之后需要run过才能测试&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt;更新之后，需要&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;过，才能测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#测试和调式数据库没有分离&quot; id=&quot;markdown-toc-测试和调式数据库没有分离&quot;&gt;测试和调式数据库没有分离&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;约定和规范&quot;&gt;约定和规范&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;中的一些命名规则，并不一定是最佳的实践。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;大部分使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Can&lt;/code&gt;做前缀，表示具备某一中能力；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;interop&lt;/code&gt;文件夹最初用来存放一些用于第三方交互的类，目前这个含义已经有些淡化了；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;表示主键，并使用&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;类型&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;统一的http-response&quot;&gt;统一的HTTP Response&lt;/h2&gt;

&lt;p&gt;所有的HTTP Response都返回如下统一的格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;{
  ok: Boolean,
  data: T,
  error: String
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;payload和respose的一致性&quot;&gt;Payload和Respose的一致性&lt;/h2&gt;

&lt;p&gt;为了便于接口的方便使用，受&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;的启发，Payload的数据格式，
和Response的返回格式，保持一致。&lt;/p&gt;

&lt;p&gt;允许字段不一样，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;在Payload为空，在Response中会被赋予新的编号。&lt;/p&gt;

&lt;h1 id=&quot;几处重构和增强&quot;&gt;几处重构和增强&lt;/h1&gt;

&lt;h2 id=&quot;升级的canconnectdb2&quot;&gt;升级的&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB2&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;使用了一些&lt;code class=&quot;highlighter-rouge&quot;&gt;implicit&lt;/code&gt;，完成更加通用的数据库读写操作。同时
限定了一些泛型方法的返回值。&lt;/p&gt;

&lt;p&gt;具体请参见源代码。&lt;/p&gt;

&lt;h2 id=&quot;拆分canbehierarchic&quot;&gt;拆分&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeHierarchic&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hierarchic&lt;/code&gt;在未来，可以使用并查集维护关联关系。&lt;/p&gt;

&lt;p&gt;目前拆分成两个&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;，分别对应静态属性和实例属性。&lt;/p&gt;

&lt;p&gt;参考：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;https://github.com/scozv/bolero/commit/ea24ab2c443a802145488b81c15e2fa7266492ae&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;全局的action-not-found处理&quot;&gt;全局的&lt;code class=&quot;highlighter-rouge&quot;&gt;Action Not Found&lt;/code&gt;处理&lt;/h2&gt;

&lt;p&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;Action Not Found&lt;/code&gt;的异常，统一交给&lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseError&lt;/code&gt;类处理。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;https://github.com/scozv/bolero/commit/e8991bc146adeabaf5d5f713f253a2a6fa1fe950&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;增强了responseok的功能&quot;&gt;增强了&lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseOk&lt;/code&gt;的功能&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;implicit writes&lt;/code&gt;，避免了参数传入&lt;code class=&quot;highlighter-rouge&quot;&gt;ResponseOk&lt;/code&gt;
之前，还要手动&lt;code class=&quot;highlighter-rouge&quot;&gt;Json.toJson&lt;/code&gt;的问题。&lt;/p&gt;

&lt;h2 id=&quot;清理unused-import&quot;&gt;清理&lt;code class=&quot;highlighter-rouge&quot;&gt;unused import&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;清理了多处&lt;code class=&quot;highlighter-rouge&quot;&gt;unused import&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;未能解决的问题&quot;&gt;未能解决的问题&lt;/h1&gt;

&lt;h2 id=&quot;服务启动之后的编译&quot;&gt;服务启动之后的编译&lt;/h2&gt;

&lt;p&gt;我发现，不管通过&lt;code class=&quot;highlighter-rouge&quot;&gt;activator run&lt;/code&gt;还是IntelliJ IDEA启动&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;，
命令行提示，服务已经在&lt;code class=&quot;highlighter-rouge&quot;&gt;9000&lt;/code&gt;端口开启了。&lt;/p&gt;

&lt;p&gt;但是初次访问接口，依然会触发新的编译。&lt;/p&gt;

&lt;h2 id=&quot;routes更新之后需要run过才能测试&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt;更新之后，需要&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;过，才能测试&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;routes&lt;/code&gt;变更，或者代码变更很多，直接跑测试，可能没有触发最新的编译。
建议，后台常驻启动一个&lt;code class=&quot;highlighter-rouge&quot;&gt;9000&lt;/code&gt;端口的&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;测试和调式数据库没有分离&quot;&gt;测试和调式数据库没有分离&lt;/h2&gt;

&lt;p&gt;目前发现，&lt;code class=&quot;highlighter-rouge&quot;&gt;WithApplication&lt;/code&gt;里面的模拟HTTP Request将使用&lt;code class=&quot;highlighter-rouge&quot;&gt;application.conf&lt;/code&gt;
的配置。导致，没法另外指定测试数据库。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:blog_bolero&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala&quot;&gt;Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:blog_bolero&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/09/05/bolero-cumulative-update-on-sep-04-2016</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/09/05/bolero-cumulative-update-on-sep-04-2016</guid>
        <pubDate>2016-09-05T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>Scala函数编程（二）</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文是《Scala函数编程》系列的第二部分，&lt;a href=&quot;https://scozv.github.io/blog/zh/guide/2016/08/21/scala-quick-tour-part-i&quot;&gt;第一部分&lt;/a&gt;
介绍了函数编程（FP）的基本概念、函数分别可以作为参数和返回值。&lt;/p&gt;

  &lt;p&gt;在第二个部分里面，我们将介绍一个非常重要的设计模式——尾递归（Tail Recursion）。之后
会通过&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;来阐述尾递归在线性集合的应用，包括如下内容：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;迭代和递归的相互转化；&lt;/li&gt;
    &lt;li&gt;递归和尾递归的区别；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的泛型简介；&lt;/li&gt;
    &lt;li&gt;使用递归的方式构造一个&lt;code class=&quot;highlighter-rouge&quot;&gt;List[Int]&lt;/code&gt;；&lt;/li&gt;
    &lt;li&gt;模式匹配简介（未完成）；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt;等方法的尾递归实现（未完成）；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;take&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;reverse&lt;/code&gt;等方法的尾递归实现（未完成）；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;append&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;prepend&lt;/code&gt;等方法的尾递归实现（未完成）；&lt;/li&gt;
    &lt;li&gt;遍历映射（&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;）和&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;的尾递归实现（未完成）;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;源代码分析（未完成）。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。&lt;/p&gt;

  &lt;p&gt;我依然建议去听原版公开课&lt;sup id=&quot;fnref:open_progfun1&quot;&gt;&lt;a href=&quot;#fn:open_progfun1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，并完成所有的Assignment。另外，还要多写代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#迭代和递归&quot; id=&quot;markdown-toc-迭代和递归&quot;&gt;迭代和递归&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#阶乘函数的迭代计算&quot; id=&quot;markdown-toc-阶乘函数的迭代计算&quot;&gt;阶乘函数的迭代计算&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#迭代计算的一般定义&quot; id=&quot;markdown-toc-迭代计算的一般定义&quot;&gt;迭代计算的一般定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#calcacc-item还是calcitem-acc&quot; id=&quot;markdown-toc-calcacc-item还是calcitem-acc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(acc, item)&lt;/code&gt;还是&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(item, acc)&lt;/code&gt;？&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#从迭代到递归&quot; id=&quot;markdown-toc-从迭代到递归&quot;&gt;从迭代，到递归&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#递归的call-stack&quot; id=&quot;markdown-toc-递归的call-stack&quot;&gt;递归的Call Stack&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#尾递归tail-recursion&quot; id=&quot;markdown-toc-尾递归tail-recursion&quot;&gt;尾递归（Tail Recursion）&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#尾递归初览&quot; id=&quot;markdown-toc-尾递归初览&quot;&gt;尾递归初览&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#尾递归的一般形式&quot; id=&quot;markdown-toc-尾递归的一般形式&quot;&gt;尾递归的一般形式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#递归和尾递归的区别&quot; id=&quot;markdown-toc-递归和尾递归的区别&quot;&gt;递归和尾递归的区别&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#尾递归的练习题&quot; id=&quot;markdown-toc-尾递归的练习题&quot;&gt;尾递归的练习题&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#尾递归对数组求和&quot; id=&quot;markdown-toc-尾递归对数组求和&quot;&gt;尾递归对数组求和&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listt&quot; id=&quot;markdown-toc-listt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#泛型简介type-parameterization&quot; id=&quot;markdown-toc-泛型简介type-parameterization&quot;&gt;泛型简介（Type Parameterization）&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#listt的递归定义&quot; id=&quot;markdown-toc-listt的递归定义&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的递归定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#listt的递归实现&quot; id=&quot;markdown-toc-listt的递归实现&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的递归实现&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#实现一个泛型链表&quot; id=&quot;markdown-toc-实现一个泛型链表&quot;&gt;实现一个泛型链表&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#使用右关联操作符&quot; id=&quot;markdown-toc-使用右关联操作符&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;#:&lt;/code&gt;右关联操作符&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#模式匹配&quot; id=&quot;markdown-toc-模式匹配&quot;&gt;模式匹配&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scala中的listt&quot; id=&quot;markdown-toc-scala中的listt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#模式匹配简介&quot; id=&quot;markdown-toc-模式匹配简介&quot;&gt;模式匹配简介&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#使用模式匹配和尾递归实现listint的求和&quot; id=&quot;markdown-toc-使用模式匹配和尾递归实现listint的求和&quot;&gt;使用模式匹配和尾递归，实现&lt;code class=&quot;highlighter-rouge&quot;&gt;List[Int]&lt;/code&gt;的求和&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#map和foreach&quot; id=&quot;markdown-toc-map和foreach&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#其它listt方法的实现&quot; id=&quot;markdown-toc-其它listt方法的实现&quot;&gt;其它&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;方法的实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#map和reduce&quot; id=&quot;markdown-toc-map和reduce&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#map和flatmap&quot; id=&quot;markdown-toc-map和flatmap&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#listt接口文档和源代码分析&quot; id=&quot;markdown-toc-listt接口文档和源代码分析&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;接口文档和源代码分析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#综合练习&quot; id=&quot;markdown-toc-综合练习&quot;&gt;综合练习&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用指定的一系列函数定义完成函数的实现&quot; id=&quot;markdown-toc-使用指定的一系列函数定义完成函数的实现&quot;&gt;使用指定的一系列函数定义，完成函数的实现&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习题参考答案&quot; id=&quot;markdown-toc-练习题参考答案&quot;&gt;练习题参考答案&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#递归一般定义中的函数类型推断&quot; id=&quot;markdown-toc-递归一般定义中的函数类型推断&quot;&gt;递归一般定义中的函数类型推断&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#尾递归的一般形式严格定义&quot; id=&quot;markdown-toc-尾递归的一般形式严格定义&quot;&gt;尾递归的一般形式（严格定义）&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;迭代和递归&quot;&gt;迭代和递归&lt;/h1&gt;

&lt;p&gt;考虑正整数的阶乘（Factorial）函数：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x! = \Pi_{i=1}^{x} i = x \cdot (x-1) \cdot (x-2) \cdot \ldots \cdot 2 \cdot 1&lt;/script&gt;

&lt;p&gt;其中我们约定&lt;script type=&quot;math/tex&quot;&gt;x&lt;/script&gt;为正整数：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;x \in \mathbb{Z}^{+}&lt;/script&gt;

&lt;h2 id=&quot;阶乘函数的迭代计算&quot;&gt;阶乘函数的迭代计算&lt;/h2&gt;

&lt;p&gt;本文中的迭代计算，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;语言，因为，你可以直接在浏览器中（F12进入调试面板）运行这段脚本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// end for-loop&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以上代码，等价于：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;迭代计算的一般定义&quot;&gt;迭代计算的一般定义&lt;/h2&gt;

&lt;p&gt;从上面的阶乘迭代，可以总结出迭代的几个组成要素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;迭代的退出条件，比如，当&lt;code class=&quot;highlighter-rouge&quot;&gt;i &amp;gt; 0&lt;/code&gt;不满足的时候，迭代退出；&lt;/li&gt;
  &lt;li&gt;迭代的累积器（Accumulator），比如上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;变量，未来，我们将使用&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;表示累积器。需要注意的是，
这里“累积”的“积”不是“乘积”的意思（只是碰巧，我们在此使用乘法而已）。Accumulator这个单词，很好地
解释了“累积”的含义；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;的初始值，此处我们是乘法，所以初始值设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;，如果是加法，我们的初始值可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;0&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;每一次迭代，&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;将会和一个元素发生运算，运算结果会重复赋值给&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;迭代进入下一个元素，我们将这些元素成为&lt;code class=&quot;highlighter-rouge&quot;&gt;item&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;注意到，迭代版本中，&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;会被重复赋值，并在循环退出之后，按值返回（&lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt;）。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;根据这几个要素，我们给出迭代的一般定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;calcacc-item还是calcitem-acc&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(acc, item)&lt;/code&gt;还是&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(item, acc)&lt;/code&gt;？&lt;/h2&gt;

&lt;p&gt;使用二叉数，前序和后序遍历来表示两种不同的计算方式。&lt;/p&gt;

&lt;p&gt;可以看出&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(acc, item)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(item, acc)&lt;/code&gt;的区别。
我们也会在&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的部分，更多地提到这两者的区别。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;          calc(acc, item)                      calc(item, acc)
            /       \                             /        \
           /   ...   \                           /   ...    \
          /           item_n               item_1            \
        calc()                                             calc()
        /     \                                            /   \
      calc()   item_3                              item_(n-2)  calc()
      /     \                                                /   \
   calc()  item_2                                   item_(n-1)  calc()
   /     \                                                     /   \
init()  item_1                                            item_n   init()&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;通过上面的两张图示，阐述&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(acc, item)&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;calc(item, acc)&lt;/code&gt;的区别。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;从迭代到递归&quot;&gt;从迭代，到递归&lt;/h2&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请（用伪代码）写出阶乘计算的递归实现。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;写完之后，需要检验如下的Test Case：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下面给出&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的递归实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;迭代那一小节里面，我们给出了迭代的一般定义，这里
我们将迭代的一般定义，转化为递归的一般定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;练习（非常重要）：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据上面的递归一般定义，推断出下列函数的函数类型：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; f: ItemType =&amp;gt; AccumulatorType
 shouldQuit
 calc
 nextItem
 init
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;递归的call-stack&quot;&gt;递归的Call Stack&lt;/h2&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据我们上面定义的阶乘递归函数，Evaluate &lt;script type=&quot;math/tex&quot;&gt;5!&lt;/script&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                   
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;120&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们对上面的Call Stack作如下说明：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;整个调用堆栈最大耗用长度为5；&lt;/li&gt;
  &lt;li&gt;至少需要5个&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;操作，才能实现状态&lt;code class=&quot;highlighter-rouge&quot;&gt;5 * 4 * 3 * 2 * f(1)&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;至少需要另外5个&lt;code class=&quot;highlighter-rouge&quot;&gt;pop&lt;/code&gt;、另外5个&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;操作，才能缩短堆栈的长度，最终完成Evaluation。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以使用递归面临的最大问题就是，Call Stack过长。&lt;/p&gt;

&lt;h1 id=&quot;尾递归tail-recursion&quot;&gt;尾递归（Tail Recursion）&lt;/h1&gt;

&lt;p&gt;下面我们来看尾递归（Tail Recursion），这是一个非常重要的概念。&lt;/p&gt;

&lt;h2 id=&quot;尾递归初览&quot;&gt;尾递归初览&lt;/h2&gt;

&lt;p&gt;我们首先给出尾递归的阶乘实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Tail Recursion
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们对上述尾递归的实现，备注如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当递归终止条件满足时，我们退出递归，返回&lt;code class=&quot;highlighter-rouge&quot;&gt;acc&lt;/code&gt;，此时，计算已经完成；&lt;/li&gt;
  &lt;li&gt;由于退出递归的时候，Evaluation已经完成，所以理论上，我们连Call Stack都不需要维护；&lt;/li&gt;
  &lt;li&gt;实际上，&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;和其它大多数FP一样，会对尾递归作出优化。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;尾递归的一般形式&quot;&gt;尾递归的一般形式&lt;/h2&gt;

&lt;p&gt;回顾一下递归的一般形式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们给出尾递归的一般形式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;练习（非常重要）：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据上面的尾递归一般形式，推断出下列函数的函数类型：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; f: ItemType =&amp;gt; AccumulatorType
 g
 shouldQuit
 calc
 nextItem
 init
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;递归和尾递归的区别&quot;&gt;递归和尾递归的区别&lt;/h2&gt;

&lt;p&gt;请先完成递归和尾递归一般定义的类型推断的练习题。&lt;/p&gt;

&lt;p&gt;在尾递归中，我们通常需要引入一个临时局部函数&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;，实际上，函数&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;才是递归函数。
这样的思想，也非常符合函数编程的思想——函数是Pure，不带状态（Stateless）的。
因为，就递归&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;而言，初始状态&lt;code class=&quot;highlighter-rouge&quot;&gt;init()&lt;/code&gt;不应该带入函数的实现（Implementation）中。&lt;/p&gt;

&lt;h2 id=&quot;尾递归的练习题&quot;&gt;尾递归的练习题&lt;/h2&gt;

&lt;p&gt;习题1：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的REPL中编写尾递归一般形式的严格定义，保证编译通过。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;习题2：&lt;/p&gt;

&lt;h2 id=&quot;尾递归对数组求和&quot;&gt;尾递归对数组求和&lt;/h2&gt;

&lt;p&gt;到此，尾递归的介绍马上就要告一段落了。我们马上要开始
讲解《Scala函数编程》（二）的另一个重要内容——&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在正式进入&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的讲解前，我们先来做一个练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用尾递归，实现数组的求和。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我给出一个伪代码实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;subArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;startIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;需要注意的是，上述&lt;code class=&quot;highlighter-rouge&quot;&gt;subArray&lt;/code&gt;的时间复杂度为&lt;script type=&quot;math/tex&quot;&gt;O_{i\in [1,n]}(i)&lt;/script&gt;，
这将导致整个递归的时间复杂度为&lt;script type=&quot;math/tex&quot;&gt;O(\sum_{i=0}^{n} i) = O(\frac{n(n+1)}{2})=O(n^2)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;实际情况是，我们期望的数组求和的时间复杂度必须为&lt;script type=&quot;math/tex&quot;&gt;O(n)&lt;/script&gt;。&lt;/p&gt;

&lt;h1 id=&quot;listt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;&lt;/h1&gt;

&lt;h2 id=&quot;泛型简介type-parameterization&quot;&gt;泛型简介（Type Parameterization）&lt;/h2&gt;

&lt;p&gt;泛型在某些语言中（比如&lt;code class=&quot;highlighter-rouge&quot;&gt;C#&lt;/code&gt;）称为“Generic Type”，
在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的参考书《Programming in Scala》&lt;sup id=&quot;fnref:scala_progfun_2nd&quot;&gt;&lt;a href=&quot;#fn:scala_progfun_2nd&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;（Chapter 19 Type Parameterization）中，使用的是“Type Parameterization”。&lt;/p&gt;

&lt;p&gt;前者说，泛型是一种“通用”的类型，后者表示泛型是“一种参数化的类型”。&lt;/p&gt;

&lt;p&gt;本文使用中文“泛型”，如果涉及到英文，我将采用 “Type Parameterization”。&lt;/p&gt;

&lt;p&gt;和大多数语言的泛型定义一样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;需要在类或者方法上，声明一个或多个类型参数（Type Parameter）名称，比如&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Traversable[T] {}
def field[T](query: String, fieldName: String): T = ???
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;和普通的参数一样，类型参数的名称可以任取，比如：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class Dictionary[KeyType,ValueType] {}
def insert[IndexType, ItemType]: List[ItemType] = ???
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是，从&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的接口文档&lt;sup id=&quot;fnref:scala_api_doc&quot;&gt;&lt;a href=&quot;#fn:scala_api_doc&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;和源代码&lt;sup id=&quot;fnref:github_scala&quot;&gt;&lt;a href=&quot;#fn:github_scala&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;可以看出，
因为是“泛”型，我们的参数类型名称不应该被限定，所以，
可以使用如下的风格定义参数类型：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class List[A] {}
class Map[A, B]{}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;listt的递归定义&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的递归定义&lt;/h2&gt;

&lt;p&gt;我们按照如下的递归方式，定义一个&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;可以为空，我们称其为&lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;任意一个元素&lt;code class=&quot;highlighter-rouge&quot;&gt;x: T&lt;/code&gt;，可以和任意一个&lt;code class=&quot;highlighter-rouge&quot;&gt;xs: List[T]&lt;/code&gt;，组成一个新的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;，我们称
这个组合动作（function）为&lt;code class=&quot;highlighter-rouge&quot;&gt;cons&lt;/code&gt;——取”construction”的前四个字母。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;listt的递归实现&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的递归实现&lt;/h2&gt;

&lt;p&gt;这一小节，我们使用递归定义，实现&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;。
如果有语法上，不明白的地方，请自行搜索相关资料。&lt;/p&gt;

&lt;p&gt;有关OOP的内容，我会在之后的部分中重新讲。&lt;/p&gt;

&lt;p&gt;建议阅读&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的源代码 &lt;sup id=&quot;fnref:github_scala_list_t&quot;&gt;&lt;a href=&quot;#fn:github_scala_list_t&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;为了不和&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt;冲突，以下的实现
有意更换了名称。&lt;/p&gt;

&lt;h3 id=&quot;实现一个泛型链表&quot;&gt;实现一个泛型链表&lt;/h3&gt;

&lt;h3 id=&quot;使用右关联操作符&quot;&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;#:&lt;/code&gt;右关联操作符&lt;/h3&gt;

&lt;h3 id=&quot;模式匹配&quot;&gt;模式匹配&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;+T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NoSuchElementException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;head of empty list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tail of empty list&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyList&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Nothing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyList&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NonEmptyList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs0&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Apple&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;xs1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;xs1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;以上的实现，使用了“单向链式列表”这一数据结构，
我认为这些基础的数据结构，是程序员的基本修养，请
自行查阅相关资料。&lt;/p&gt;

&lt;p&gt;思考：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;head&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;tail&lt;/code&gt;的声明是&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;而不是&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;？&lt;/li&gt;
    &lt;li&gt;为什么&lt;code class=&quot;highlighter-rouge&quot;&gt;Nil&lt;/code&gt;的继承来自&lt;code class=&quot;highlighter-rouge&quot;&gt;ListLike[Nothing]&lt;/code&gt;，而非&lt;code class=&quot;highlighter-rouge&quot;&gt;ListLike[T]&lt;/code&gt;?&lt;/li&gt;
    &lt;li&gt;如果去掉&lt;code class=&quot;highlighter-rouge&quot;&gt;trait GenericList[+T]&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt;号，是否能够编译通过？&lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;请问如下代码的输出结果为：&lt;/p&gt;

      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; val xs0 = GenericList()
 xs0.size
 xs0.isEmpty
 GenericList(&quot;Apple&quot;)
 GenericList(1.2, 3.5)
 val xs1 = GenericList(1, 2, 3)
 xs1.size
 xs1.isEmpty
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;请问如下代码的输出结果（请仔细思考）：&lt;/p&gt;

      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; val xs2 = GenericList(1, 2, 3, 4)
 xs2.size
 xs2.isEmpty      
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scala中的listt&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&quot;模式匹配简介&quot;&gt;模式匹配简介&lt;/h2&gt;

&lt;h2 id=&quot;使用模式匹配和尾递归实现listint的求和&quot;&gt;使用模式匹配和尾递归，实现&lt;code class=&quot;highlighter-rouge&quot;&gt;List[Int]&lt;/code&gt;的求和&lt;/h2&gt;

&lt;h2 id=&quot;map和foreach&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;foreach&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&quot;其它listt方法的实现&quot;&gt;其它&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;方法的实现&lt;/h2&gt;

&lt;h2 id=&quot;map和reduce&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;&lt;/h2&gt;

&lt;h2 id=&quot;map和flatmap&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;&lt;/h2&gt;

&lt;h1 id=&quot;listt接口文档和源代码分析&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;接口文档和源代码分析&lt;/h1&gt;

&lt;p&gt;实际上&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;的很多实现并没有使用递归，而是使用的迭代。
因为迭代的效率和性能高。&lt;/p&gt;

&lt;h1 id=&quot;综合练习&quot;&gt;综合练习&lt;/h1&gt;

&lt;h2 id=&quot;使用指定的一系列函数定义完成函数的实现&quot;&gt;使用指定的一系列函数定义，完成函数的实现&lt;/h2&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 已知
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 实现
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 参考答案
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;练习题参考答案&quot;&gt;练习题参考答案&lt;/h1&gt;

&lt;h2 id=&quot;递归一般定义中的函数类型推断&quot;&gt;递归一般定义中的函数类型推断&lt;/h2&gt;

&lt;p&gt;重申一下，我认为这道练习题非常重要，建议先独立完成这道练习题。&lt;/p&gt;

&lt;p&gt;给出如下的递归一般定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;根据上面的递归一般定义，推断出下列函数的函数类型：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; f: ItemType =&amp;gt; AccumulatorType
 shouldQuit
 calc
 nextItem
 init
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;参考答案：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的几个函数定义，必须在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的REPL中编译通过。
这里使用了泛型定义，如果不理解，请尝试阅读
《Programming in Scala》&lt;sup id=&quot;fnref:scala_progfun_2nd:1&quot;&gt;&lt;a href=&quot;#fn:scala_progfun_2nd&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;（Chapter 19 Type Parameterization）。&lt;/p&gt;

&lt;h2 id=&quot;尾递归的一般形式严格定义&quot;&gt;尾递归的一般形式（严格定义）&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用匿名函数，代替尾递归一般定义中的临时函数&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ItemType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AccumulatorType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shouldQuit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;calc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nextItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;acc&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:open_progfun1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/progfun1&quot;&gt;Functional Programming Principles in Scala&lt;/a&gt; from École Polytechnique Fédérale de Lausanne&amp;nbsp;&lt;a href=&quot;#fnref:open_progfun1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_progfun_2nd&quot;&gt;
      &lt;p&gt;Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press&amp;nbsp;&lt;a href=&quot;#fnref:scala_progfun_2nd&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_progfun_2nd:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_api_doc&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/api/current/index.html&quot;&gt;Scala API Documentation&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_api_doc&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:github_scala&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scala/scala&quot;&gt;Scala on Github&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:github_scala&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:github_scala_list_t&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scala/scala/blob/v2.11.8/src/library/scala/collection/immutable/List.scala&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;List.scala&lt;/code&gt; Source Code on Github&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:github_scala_list_t&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/08/22/scala-quick-tour-part-ii</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/08/22/scala-quick-tour-part-ii</guid>
        <pubDate>2016-08-22T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>Scala函数编程（一）</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;接下来的一系列《Scala函数编程》，得益于公开课《Functional Programming Principles in Scala》&lt;sup id=&quot;fnref:open_progfun1&quot;&gt;&lt;a href=&quot;#fn:open_progfun1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。
我整理了函数编程中的重要概念，并加入了我两年&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;开发的心得体会 &lt;sup id=&quot;fnref:blog_bolero&quot;&gt;&lt;a href=&quot;#fn:blog_bolero&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

  &lt;p&gt;为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。&lt;/p&gt;

  &lt;p&gt;《Scala函数编程》这一系列，不单纯只是原公开课的笔记整理。
我也加入了自己的理解、一些理论化的表述和一些练习题，供加深理解。
但我依然建议去听原版公开课，并完成所有的Assignment。另外，还要多写代码。&lt;/p&gt;

  &lt;p&gt;这一系列的文章，将按照如下顺序来写：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;一、函数编程的基本概念、函数类型和类型推断&lt;/li&gt;
    &lt;li&gt;二、尾递归（Tail Recursion）和&lt;code class=&quot;highlighter-rouge&quot;&gt;List[T]&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;三、OOP在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的体现&lt;/li&gt;
    &lt;li&gt;四、模式匹配&lt;/li&gt;
    &lt;li&gt;五、其它线性数据结构类型介绍&lt;/li&gt;
    &lt;li&gt;六、延迟执行和Monad、&lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;flatMap&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;七、&lt;code class=&quot;highlighter-rouge&quot;&gt;Future[T]&lt;/code&gt;、For Comprehension&lt;/li&gt;
    &lt;li&gt;八、&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;代码模板 &lt;sup id=&quot;fnref:github_bolero&quot;&gt;&lt;a href=&quot;#fn:github_bolero&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt; 详解&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;本文是第一部分，包括如下内容：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;函数编程初览；&lt;/li&gt;
    &lt;li&gt;Evaluation：CBN和CBV；&lt;/li&gt;
    &lt;li&gt;函数的类型（Type）；&lt;/li&gt;
    &lt;li&gt;类型推断和类型匹配。&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#函数编程初览&quot; id=&quot;markdown-toc-函数编程初览&quot;&gt;函数编程初览&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#常用的术语&quot; id=&quot;markdown-toc-常用的术语&quot;&gt;常用的术语&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#命令式和声明式&quot; id=&quot;markdown-toc-命令式和声明式&quot;&gt;命令式和声明式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#运算法则theroy并没有定义mutable&quot; id=&quot;markdown-toc-运算法则theroy并没有定义mutable&quot;&gt;运算法则（Theroy）并没有定义Mutable&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#历史和定义&quot; id=&quot;markdown-toc-历史和定义&quot;&gt;历史和定义&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#两种evaluation的方式&quot; id=&quot;markdown-toc-两种evaluation的方式&quot;&gt;两种Evaluation的方式&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#repl&quot; id=&quot;markdown-toc-repl&quot;&gt;REPL&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#表达式&quot; id=&quot;markdown-toc-表达式&quot;&gt;表达式&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#call-by-valuecbv&quot; id=&quot;markdown-toc-call-by-valuecbv&quot;&gt;Call By-Value，CBV&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#call-by-namecbn&quot; id=&quot;markdown-toc-call-by-namecbn&quot;&gt;Call By-Name，CBN&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#收敛&quot; id=&quot;markdown-toc-收敛&quot;&gt;收敛&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#函数的基础知识&quot; id=&quot;markdown-toc-函数的基础知识&quot;&gt;函数的基础知识&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#通常的函数定义&quot; id=&quot;markdown-toc-通常的函数定义&quot;&gt;通常的函数定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#函数调用&quot; id=&quot;markdown-toc-函数调用&quot;&gt;函数调用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scope&quot; id=&quot;markdown-toc-scope&quot;&gt;Scope&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#匿名函数&quot; id=&quot;markdown-toc-匿名函数&quot;&gt;匿名函数&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#函数类型&quot; id=&quot;markdown-toc-函数类型&quot;&gt;函数类型&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#函数作为参数&quot; id=&quot;markdown-toc-函数作为参数&quot;&gt;函数作为参数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#函数作为返回值&quot; id=&quot;markdown-toc-函数作为返回值&quot;&gt;函数作为返回值&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#类型推断&quot; id=&quot;markdown-toc-类型推断&quot;&gt;类型推断&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#类型匹配&quot; id=&quot;markdown-toc-类型匹配&quot;&gt;类型匹配&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#函数的返回值不要过度依赖类型推断&quot; id=&quot;markdown-toc-函数的返回值不要过度依赖类型推断&quot;&gt;函数的返回值不要过度依赖类型推断&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scala语言中如何定义call-by-value&quot; id=&quot;markdown-toc-scala语言中如何定义call-by-value&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言中如何定义Call By-Value&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#scala语言中如何定义call-by-name&quot; id=&quot;markdown-toc-scala语言中如何定义call-by-name&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言中如何定义Call By-Name&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#函数参数中的cbv和cbn&quot; id=&quot;markdown-toc-函数参数中的cbv和cbn&quot;&gt;函数参数中的CBV和CBN&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#综合练习&quot; id=&quot;markdown-toc-综合练习&quot;&gt;综合练习&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#根据函数定义写出它们对应的函数类型&quot; id=&quot;markdown-toc-根据函数定义写出它们对应的函数类型&quot;&gt;根据函数定义，写出它们对应的函数类型&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#判断下列的函数定义是否合法&quot; id=&quot;markdown-toc-判断下列的函数定义是否合法&quot;&gt;判断下列的函数定义，是否合法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#判断下列的函数调用是否合法&quot; id=&quot;markdown-toc-判断下列的函数调用是否合法&quot;&gt;判断下列的函数调用，是否合法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#根据函数类型定义一个满足该类型的函数&quot; id=&quot;markdown-toc-根据函数类型定义一个满足该类型的函数&quot;&gt;根据函数类型，定义一个满足该类型的函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#将包含cbn参数的函数改写成类似的普通函数&quot; id=&quot;markdown-toc-将包含cbn参数的函数改写成类似的普通函数&quot;&gt;将包含CBN参数的函数，改写成类似的普通函数&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#设计一个布尔类型&quot; id=&quot;markdown-toc-设计一个布尔类型&quot;&gt;设计一个布尔类型&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#练习题参考答案&quot; id=&quot;markdown-toc-练习题参考答案&quot;&gt;练习题参考答案&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#举出一个反之未必的例子&quot; id=&quot;markdown-toc-举出一个反之未必的例子&quot;&gt;举出一个“反之未必”的例子&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#基于一阶谓词逻辑的命题定义的证明过程&quot; id=&quot;markdown-toc-基于一阶谓词逻辑的命题定义的证明过程&quot;&gt;基于一阶谓词逻辑的命题定义的证明过程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;函数编程初览&quot;&gt;函数编程初览&lt;/h1&gt;

&lt;h2 id=&quot;常用的术语&quot;&gt;常用的术语&lt;/h2&gt;

&lt;p&gt;为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。&lt;/p&gt;

&lt;p&gt;如下先来看一些术语：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immutable，如果一个变量（对象）在构造之后，不能重新赋值，我们称其为不可变。
其对应的反义词mutable（可变）表示一个变量（对象）可以多次被赋值。&lt;/li&gt;
  &lt;li&gt;Type，类型包括：
    &lt;ul&gt;
      &lt;li&gt;基本类型（Primative）：比如整数、数组，布尔等；&lt;/li&gt;
      &lt;li&gt;类或者接口；&lt;/li&gt;
      &lt;li&gt;函数类型，过会儿会详细解释。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;表达式，精确的表达式定义可参考Scala Specification &lt;sup id=&quot;fnref:scala_spec_exp&quot;&gt;&lt;a href=&quot;#fn:scala_spec_exp&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
  &lt;li&gt;Evaluation：将一个表达式的最终值给计算出来，我们称之为Evaluation。&lt;/li&gt;
  &lt;li&gt;FP：Functional Programming，函数式编程（语言），简称FP。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;命令式和声明式&quot;&gt;命令式和声明式&lt;/h2&gt;

&lt;p&gt;我们通常把编程 Paradigm 分成如下两种（参考C#讲座&lt;sup id=&quot;fnref:c9_lang_future&quot;&gt;&lt;a href=&quot;#fn:c9_lang_future&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;，公开课提到了三种）：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;命令式&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;声明式&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;mutable&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;immutable&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;赋值&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;定义之后不能再赋值&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;if-else，循环等&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;模式匹配，递归等&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;命令式的编程，通常关注实现细节——怎么做（How），比如我们常见的自上而下的程序化
编程语言，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for-loop&lt;/code&gt;去控制实现的细节。&lt;/p&gt;

&lt;p&gt;对应地，声明式的编程，通常关注最后的目标——做什么（What），比如我们写如下的&lt;code class=&quot;highlighter-rouge&quot;&gt;SQL&lt;/code&gt;语句：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;person&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;WHERE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;class_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们“声明”了三个指令：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从&lt;code class=&quot;highlighter-rouge&quot;&gt;person&lt;/code&gt;表中；&lt;/li&gt;
  &lt;li&gt;筛选班级编号为&lt;code class=&quot;highlighter-rouge&quot;&gt;3&lt;/code&gt;的人；&lt;/li&gt;
  &lt;li&gt;输出&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;age&lt;/code&gt;三个字段（Property）；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;for-loop&lt;/code&gt;去“命令”数据库，如何去实现筛选的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;class_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// end loop&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;res&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;运算法则theroy并没有定义mutable&quot;&gt;运算法则（Theroy）并没有定义Mutable&lt;/h2&gt;

&lt;p&gt;我们有如下的加法结合律：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;(a + b) + c = a + (b + c)&lt;/script&gt;

&lt;p&gt;我们把这个结合律，分解成如下几个赋值的步骤：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;r1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;r2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;r1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述的赋值，意味着各个变量都是可变的（Mutable）。&lt;/p&gt;

&lt;p&gt;但是，这个结合律里面，实际上，我们只定义了一个加法运算，
如果我们把一个加法运算提炼成一个函数，那么，这个函数
接收两个Number类型的参数，并返回它们的和：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x, y) \triangleq x + y&lt;/script&gt;

&lt;p&gt;上述的结合律，其实对应了如下的函数调用：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(f(a, b), c) == f(a, f(b, c))&lt;/script&gt;

&lt;p&gt;也就是说，加法结合律，这一个运算法则并没有定义任何的Mutable变量。&lt;/p&gt;

&lt;h2 id=&quot;历史和定义&quot;&gt;历史和定义&lt;/h2&gt;

&lt;p&gt;函数编程早期的语言是&lt;code class=&quot;highlighter-rouge&quot;&gt;Lisp&lt;/code&gt;，与其相关的语言是&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt;。
在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scheme&lt;/code&gt;论坛里面，有一本称之为“The Bible”的书叫
《Structure and Interpretation of Computer Programs (SICP)》&lt;sup id=&quot;fnref:sicp&quot;&gt;&lt;a href=&quot;#fn:sicp&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;随后出现的函数式编程语言还有&lt;code class=&quot;highlighter-rouge&quot;&gt;Erlang&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;Haskell&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;运行在&lt;code class=&quot;highlighter-rouge&quot;&gt;.NET&lt;/code&gt;上的FP是&lt;code class=&quot;highlighter-rouge&quot;&gt;F#&lt;/code&gt;，而运行在&lt;code class=&quot;highlighter-rouge&quot;&gt;JVM&lt;/code&gt;上的FP是&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;通常的，我们将函数式编程定义为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Immutable；&lt;/li&gt;
  &lt;li&gt;没有赋值；&lt;/li&gt;
  &lt;li&gt;没有&lt;code class=&quot;highlighter-rouge&quot;&gt;if-else&lt;/code&gt;、循环；&lt;/li&gt;
  &lt;li&gt;函数是Pure的；&lt;/li&gt;
  &lt;li&gt;函数和其它Type处在同一地位：可作参数、可作返回值。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;两种evaluation的方式&quot;&gt;两种Evaluation的方式&lt;/h1&gt;

&lt;h2 id=&quot;repl&quot;&gt;REPL&lt;/h2&gt;

&lt;p&gt;我们可以在REPL下面执行&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语句，REPL全称为：Read-Evaluation-Print-Loop，
表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;读取输入的表达式；&lt;/li&gt;
  &lt;li&gt;求值；&lt;/li&gt;
  &lt;li&gt;输出结果；&lt;/li&gt;
  &lt;li&gt;重复第一步。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其中E就是Evaluation的意思——计算表达式的值。&lt;/p&gt;

&lt;p&gt;可以在命令行中输入&lt;code class=&quot;highlighter-rouge&quot;&gt;scala&lt;/code&gt;，开启&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言的REPL页面：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;scala
Welcome to Scala version 2.11.6 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;OpenJDK 64-Bit Server VM, Java 1.8.0_91&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Type &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;expressions to have them evaluated.
Type :help &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;more information.

scala&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;表达式&quot;&gt;表达式&lt;/h2&gt;

&lt;p&gt;精确的表达式定义可参考Scala Specification &lt;sup id=&quot;fnref:scala_spec_exp:1&quot;&gt;&lt;a href=&quot;#fn:scala_spec_exp&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，规格文档中，
采用了递归定义的方式。&lt;/p&gt;

&lt;p&gt;为了便于理解，什么是递归定义，此处引用一阶谓词逻辑的“命题”的定义 &lt;sup id=&quot;fnref:wiki_formula&quot;&gt;&lt;a href=&quot;#fn:wiki_formula&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;一个简单的句子是一个命题，比如“天是蓝色的”、“我是人”，在这些句子中，“是”是一个一阶谓词；&lt;/li&gt;
  &lt;li&gt;任意的一个命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;，它的否定形式也是一个命题 &lt;script type=&quot;math/tex&quot;&gt;\neg A&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;更一般地，对于任意一个命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;，使用任意一个一元操作符&lt;script type=&quot;math/tex&quot;&gt;\otimes&lt;/script&gt;，也能称之为命题&lt;script type=&quot;math/tex&quot;&gt;\otimes A&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;任意两个命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;，使用任意一个二元操作符 &lt;sup id=&quot;fnref:wiki_connective&quot;&gt;&lt;a href=&quot;#fn:wiki_connective&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;&lt;script type=&quot;math/tex&quot;&gt;\otimes&lt;/script&gt;，也称之为命题&lt;script type=&quot;math/tex&quot;&gt;A \otimes B&lt;/script&gt;。
在谓词逻辑中，常见的二元操作符有“与”、“或”和“蕴含” &lt;sup id=&quot;fnref:fn_if-then&quot;&gt;&lt;a href=&quot;#fn:fn_if-then&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;；&lt;/li&gt;
  &lt;li&gt;任意一个命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;，使用括号之后，依然是一个命题&lt;script type=&quot;math/tex&quot;&gt;(A)&lt;/script&gt;，其真值表和原命题相同，并在表达式中享有计算的最高优先级。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;call-by-valuecbv&quot;&gt;Call By-Value，CBV&lt;/h2&gt;

&lt;p&gt;我们来看第一种Evaluation的方式，定义如下两个函数：&lt;/p&gt;

&lt;p&gt;函数一，求和：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x, y) = x + y&lt;/script&gt;

&lt;p&gt;函数二，计算平方：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(x) = x^2&lt;/script&gt;

&lt;p&gt;对于复合函数平方和计算，我们有：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;h(x, y) = x^2+y^2 = f(x^2, y^2) = f\left[ g(x), g(y) \right]&lt;/script&gt;

&lt;p&gt;下面我们给出&lt;script type=&quot;math/tex&quot;&gt;h(3, f(4,1))&lt;/script&gt;的求值过程：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在上面的Evaluation过程中，我们优先将“值”应用（Apply）到
表达式中的各个参数上，比如第一步里面，我们先计算出第二个参数&lt;script type=&quot;math/tex&quot;&gt;f(4,1)&lt;/script&gt;
的最终值，再代入（Apply）函数&lt;script type=&quot;math/tex&quot;&gt;h(3,5)&lt;/script&gt;中做后续的计算。&lt;/p&gt;

&lt;p&gt;这样的模式，我们称为Application模式。
并将这种模式下面的Evaluation，称为Call By-Value，简写为CBV。&lt;/p&gt;

&lt;h2 id=&quot;call-by-namecbn&quot;&gt;Call By-Name，CBN&lt;/h2&gt;

&lt;p&gt;同样上面的函数定义，我们来看第二种Evaluation的方式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;  &lt;span class=&quot;nx&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;// A&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// B&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;           &lt;span class=&quot;c1&quot;&gt;// C&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;34&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的Evalution过程，我们作如下解释。&lt;/p&gt;

&lt;p&gt;步骤A的解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;要想求得两个数相加的和，必须先Evaluate左边的值；&lt;/li&gt;
  &lt;li&gt;此时，对于二元操作符“加”而言，左边的表达式可以求值了，我们得到&lt;script type=&quot;math/tex&quot;&gt;3*3=9&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;加号右边的表达式是一个复合函数；&lt;/li&gt;
  &lt;li&gt;我们还可以继续将参数&lt;script type=&quot;math/tex&quot;&gt;f(4, 1)&lt;/script&gt;替换（Substitute）进函数&lt;script type=&quot;math/tex&quot;&gt;g(x)=x^2&lt;/script&gt;中；&lt;/li&gt;
  &lt;li&gt;替换（Substitute）得到步骤B的表达式&lt;script type=&quot;math/tex&quot;&gt;g(f(4,1)) = \left[ f(4,1) \right]^2&lt;/script&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤B的解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于表达式&lt;script type=&quot;math/tex&quot;&gt;f(4, 1) * f(4, 1)&lt;/script&gt;这样一个乘法运算；&lt;/li&gt;
  &lt;li&gt;我们首先计算乘号左边的值；&lt;/li&gt;
  &lt;li&gt;替换（Substitute）得到&lt;script type=&quot;math/tex&quot;&gt;(4 + 1) * f(4, 1)&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;计算得到&lt;script type=&quot;math/tex&quot;&gt;5 * f(4, 1)&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;此时，乘号左边的值已经确定，我们“不得不”去Evaluate乘号右边的表达式&lt;script type=&quot;math/tex&quot;&gt;f(4, 1)&lt;/script&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;步骤C的解释：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;既然已经求得第一个&lt;script type=&quot;math/tex&quot;&gt;f(4,1)=5&lt;/script&gt;了，为什么不在同一时刻代入乘号右边的&lt;script type=&quot;math/tex&quot;&gt;f(4,1)&lt;/script&gt;？&lt;/li&gt;
  &lt;li&gt;如果我们先后调用了两次&lt;script type=&quot;math/tex&quot;&gt;f(4,1)&lt;/script&gt;，如何保证两次调用，最终Evaluate的值是一样的？&lt;/li&gt;
  &lt;li&gt;上面两个问题，包含函数编程的两个重要思想：Immutable和Pure，以后再解释。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上面的步骤，我们优先尝试将参数最原始的状态替代（Substitute）进入表达式。
直到，表达式没有参数可以替代了，“不得不”去计算一个原始状态，我们才调用加号、或者乘号求值。&lt;/p&gt;

&lt;p&gt;这样的模式，我们称为Substitution模式。
并将这种模式下面的Evaluation，称为Call By-Name，简写为CBN。&lt;/p&gt;

&lt;h2 id=&quot;收敛&quot;&gt;收敛&lt;/h2&gt;

&lt;p&gt;如果一个Evaluation的过程，在有限的时间内，可以终止（Terminate）计算。
我们称该Evaluation是收敛的。&lt;/p&gt;

&lt;p&gt;我们作如下的定义：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;表达式&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;收敛，表示为&lt;script type=&quot;math/tex&quot;&gt;\Lambda(A)&lt;/script&gt;，意味着：&lt;/p&gt;

  &lt;p&gt;在有限的时间内，存在一个值&lt;script type=&quot;math/tex&quot;&gt;a&lt;/script&gt;，使得&lt;script type=&quot;math/tex&quot;&gt;\Lambda(A) = a&lt;/script&gt;；&lt;/p&gt;

  &lt;p&gt;同时，我们记&lt;script type=&quot;math/tex&quot;&gt;\overline{\Lambda(A)}&lt;/script&gt;，表示为表达式&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;不收敛。&lt;/p&gt;

  &lt;p&gt;我们将CBV下的收敛，简写为&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A)&lt;/script&gt;，
将CBN下的收敛，简写为&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBN}}(A)&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;我们可得如下结论：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;如果&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A)&lt;/script&gt;，则一定有&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBN}}(A)&lt;/script&gt;；&lt;/p&gt;

  &lt;p&gt;反之未必。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;举出一个“反之未必”的例子；&lt;/p&gt;

  &lt;p&gt;基于一阶谓词逻辑的命题定义，证明上述结论：&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A) \rightarrow \Lambda_{\text{CBN}}(A)&lt;/script&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;函数的基础知识&quot;&gt;函数的基础知识&lt;/h1&gt;

&lt;p&gt;本小节不会介绍&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的基本Data Type，这些基础知识，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的官方文档或者
《Programming in Scala》&lt;sup id=&quot;fnref:scala_progfun_2nd&quot;&gt;&lt;a href=&quot;#fn:scala_progfun_2nd&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;（Chapter 5 Basic Types and Operations）中找到。&lt;/p&gt;

&lt;p&gt;本小节，暂时不会涉及到泛型相关的话题。&lt;/p&gt;

&lt;h2 id=&quot;通常的函数定义&quot;&gt;通常的函数定义&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;square&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;完整的函数定义规格文档参考官方文档（引用），如下做简要说明，通常的函数定义从左到右依次为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;关键字，表示开始定义一个函数；&lt;/li&gt;
  &lt;li&gt;函数名称，如上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;sum&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;square&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;函数参数定义列表，由一个括号包围，定义如下：
    &lt;ul&gt;
      &lt;li&gt;函数可以不接受任何参数，此时参数列表为空，括号可以省略；&lt;/li&gt;
      &lt;li&gt;函数只有一个参数定义，包含参数名称、冒号和参数类型（Type）；&lt;/li&gt;
      &lt;li&gt;函数如果有多个参数，则使用逗号分割；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;函数的返回类型定义，由冒号和类型（Type）组成；&lt;/li&gt;
  &lt;li&gt;函数的函数体，由等号和表达式组成。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;函数调用&quot;&gt;函数调用&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中函数调用和大多数语言一样，唯一的不同在于，如果函数接收空参数，那么
调用时，括号可以省略：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nextInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res8&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res9&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此处有备注：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;有关随机函数是否为Pure的讨论，可以参考StackOverflow中的讨论：&lt;/p&gt;

  &lt;p&gt;stackoverflow.com/questions/31818787&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;scope&quot;&gt;Scope&lt;/h2&gt;

&lt;p&gt;使用花括号包围的一个Block，构成了一个局部的Scope。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中，一个Block也是一个表达式，它的值就是这个Block中，最后一个表达式的值。&lt;/p&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请问&lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt;的值是多少？&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;val x = 0
def f(x: Int) = x + 1
val result = {
  val x = f(1)
  x * x
} + x
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;正因为一个Block也是一个表达式，我们也说过，函数体是由等号和表达式构成的，所以
函数的定义也可以包含一个Block：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
         &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res10&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;匿名函数&quot;&gt;匿名函数&lt;/h2&gt;

&lt;p&gt;我们可以定义一个匿名函数：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res20&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述的匿名函数，等价于一个Block：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;函数类型&quot;&gt;函数类型&lt;/h1&gt;

&lt;p&gt;仔细留意&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;的REPL输出值（Print）。
类型
对于具名函数的定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于匿名函数的定义：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res19&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们称，&lt;code class=&quot;highlighter-rouge&quot;&gt;(Int, Int) =&amp;gt; Int&lt;/code&gt;是一个函数类型，它是一个无穷集合，该集合：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;每一个元素都是一个函数；&lt;/li&gt;
  &lt;li&gt;任意一个函数满足：
    &lt;ul&gt;
      &lt;li&gt;接收两个参数；&lt;/li&gt;
      &lt;li&gt;第一个参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;类型；&lt;/li&gt;
      &lt;li&gt;第二个参数是&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;类型；&lt;/li&gt;
      &lt;li&gt;函数返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;类型；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不满足如上条件的函数定义，不能成为该集合的一个元素。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果函数不需要参数，则它对应的函数类型为：&lt;code class=&quot;highlighter-rouge&quot;&gt;() =&amp;gt; ?&lt;/code&gt;，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res24&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;函数作为参数&quot;&gt;函数作为参数&lt;/h2&gt;

&lt;p&gt;函数类型（Type）类似于其它普通类型——比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;——可以作为参数传递：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res27&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sumBy&lt;/code&gt;中的第三个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;by&lt;/code&gt;是一个函数类型，它表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;by&lt;/code&gt;这个参数接收一个函数；
    &lt;ul&gt;
      &lt;li&gt;这个函数接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;作为参数；&lt;/li&gt;
      &lt;li&gt;并返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;；&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;不满足&lt;code class=&quot;highlighter-rouge&quot;&gt;Int =&amp;gt; Int&lt;/code&gt;类型的，都无法传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;by&lt;/code&gt;这个参数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上述&lt;code class=&quot;highlighter-rouge&quot;&gt;sumBy&lt;/code&gt;对应的函数类型为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;函数作为返回值&quot;&gt;函数作为返回值&lt;/h2&gt;

&lt;p&gt;同样地，函数类型（Type）类似于其它普通类型——比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;——可以作为值返回：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;step:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res28&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res29&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上述&lt;code class=&quot;highlighter-rouge&quot;&gt;g&lt;/code&gt;的定义等价于：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对应的函数类型为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在函数类型的表示中，默认从右向左看，所以如下两个定义是等价的：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;参数；&lt;/li&gt;
  &lt;li&gt;可以返回（构造出）一个函数；&lt;/li&gt;
  &lt;li&gt;构造出来的函数接收一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;参数；&lt;/li&gt;
  &lt;li&gt;构造出来的函数最终返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;值。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所以，上述的函数类型，有别于如下的函数类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;(Int =&amp;gt; Int) =&amp;gt; Int&lt;/code&gt;，表示为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首先接收一个函数作为参数；&lt;/li&gt;
  &lt;li&gt;这个函数参数将&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;映射成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;整个函数，最终返回一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;练习：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;定义一个函数，使其函数类型满足&lt;code class=&quot;highlighter-rouge&quot;&gt;(Int =&amp;gt; Int) =&amp;gt; Int&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;类型推断&quot;&gt;类型推断&lt;/h2&gt;

&lt;p&gt;我们可以让&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;编译器，来推断函数的返回值，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;应用在两个&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;上的加法运算，得到的结果也是一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;。
这就是类型推断的结果，帮助我们简化了函数定义。&lt;/p&gt;

&lt;p&gt;类型推断，也可以推出函数类型：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;step:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果编译器的类型推断和函数定义的返回类型一致，则称该函数的定义合法。&lt;/p&gt;

&lt;h2 id=&quot;类型匹配&quot;&gt;类型匹配&lt;/h2&gt;

&lt;p&gt;函数的调用需要进行类型匹配，先来看基本类型的匹配：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res34&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.0&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mismatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;required:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;函数类型（Type）类似于其它普通类型——比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt;——调用包含函数参数的函数，也
需要进行类型匹配：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;y:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;&amp;gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;error:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;mismatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;found&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;kt&quot;&gt;required:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                          &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res37&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;x:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scala&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sumBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;res38&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们将参数列表数量相同，并且类型匹配的函数调用，称为合法的函数调用。&lt;/p&gt;

&lt;h2 id=&quot;函数的返回值不要过度依赖类型推断&quot;&gt;函数的返回值不要过度依赖类型推断&lt;/h2&gt;

&lt;p&gt;不要过度依赖类型推断，在设计复杂类（尤其存在泛型）的时候，显式地定义函数返回类型，
可以保证函数的逻辑正确，如果不显式定义返回类型的话， &lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;中常用的如下的类型，很容易混淆：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;未来的章节&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;会提到这些类型&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;scala语言中如何定义call-by-value&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言中如何定义Call By-Value&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;val&lt;/code&gt;可以定义一个CBV的表达式，在定义的那一刻就完成Evaluation。&lt;/p&gt;

&lt;h2 id=&quot;scala语言中如何定义call-by-name&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言中如何定义Call By-Name&lt;/h2&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;def&lt;/code&gt;可以定义一个CBN的表达式，只有在“不得不”的时候，才会Evaluate。&lt;/p&gt;

&lt;h2 id=&quot;函数参数中的cbv和cbn&quot;&gt;函数参数中的CBV和CBN&lt;/h2&gt;

&lt;p&gt;通常的，所有函数参数都是CBV的，可以按照如下方式，定义一个CBN：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以改写为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;综合练习&quot;&gt;综合练习&lt;/h1&gt;

&lt;h2 id=&quot;根据函数定义写出它们对应的函数类型&quot;&gt;根据函数定义，写出它们对应的函数类型&lt;/h2&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;对应的函数类型为&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;判断下列的函数定义是否合法&quot;&gt;判断下列的函数定义，是否合法&lt;/h2&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 该函数定义合法，因为当x是整数的时候，(x + 1) 也是一个整数；
// 类型推断符合函数返回类型
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 该函数定义不合法，因为(x + 1)是一个整数，但是函数需要一个String作返回值；
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;类型推断不符合函数的返回类型&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.0&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;判断下列的函数调用是否合法&quot;&gt;判断下列的函数调用，是否合法&lt;/h2&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 调用不合法，因为参数列表的数量不匹配
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 调用合法，参数列表的数量、类型都匹配
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;调用合法&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;参数列表的数量相同&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int类型可以隐式转换为Double类型&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;3.0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;根据函数类型定义一个满足该类型的函数&quot;&gt;根据函数类型，定义一个满足该类型的函数&lt;/h2&gt;

&lt;p&gt;尽量使用匿名表达式定义如下函数。&lt;/p&gt;

&lt;p&gt;举例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 对于函数类型：Int =&amp;gt; Double，可定义
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 对应的匿名表达式为
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;将包含cbn参数的函数改写成类似的普通函数&quot;&gt;将包含CBN参数的函数，改写成类似的普通函数&lt;/h2&gt;

&lt;p&gt;举例参考正文中的例子。&lt;/p&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;设计一个布尔类型&quot;&gt;设计一个布尔类型&lt;/h2&gt;

&lt;p&gt;（略）&lt;/p&gt;

&lt;p&gt;注意CBV和CBN的使用。&lt;/p&gt;

&lt;h1 id=&quot;练习题参考答案&quot;&gt;练习题参考答案&lt;/h1&gt;

&lt;h2 id=&quot;举出一个反之未必的例子&quot;&gt;举出一个“反之未必”的例子&lt;/h2&gt;

&lt;p&gt;定义两个函数：&lt;/p&gt;

&lt;p&gt;函数一，永久循环累加：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;f(x) = x + (x+1) + (x+2) + \ldots + \infty = \sum_{t=x}^{\infty} t&lt;/script&gt;

&lt;p&gt;函数二，有条件地返回第一个参数：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(x, y) =  (x &gt; 0) \; ? \;x : y&lt;/script&gt;

&lt;p&gt;则：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBN}}\left( g[1, f(0)]\right) = 1&lt;/script&gt;，但是&lt;script type=&quot;math/tex&quot;&gt;\overline{\Lambda_{\text{CBV}}(g[1, f(0)])}&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;基于一阶谓词逻辑的命题定义的证明过程&quot;&gt;基于一阶谓词逻辑的命题定义的证明过程&lt;/h2&gt;

&lt;p&gt;题目：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;基于一阶谓词逻辑的命题定义，证明：&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A) \rightarrow \Lambda_{\text{CBN}}(A)&lt;/script&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;证明：&lt;/p&gt;

&lt;p&gt;根据一阶谓词逻辑下，对“命题”的递归定义，使用归纳法证明：&lt;/p&gt;

&lt;p&gt;首先考虑命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;是一个简单句，此时&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A)&lt;/script&gt;等同于&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBN}}(A)&lt;/script&gt;。&lt;/p&gt;

&lt;p&gt;于是不难证明，当&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;是一个简单句时：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(1)，&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A) \rightarrow \Lambda_{\text{CBN}}(A)&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;(2)，&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(\neg A) \rightarrow \Lambda_{\text{CBN}}(\neg A)&lt;/script&gt;，该结论使用反证法可得；&lt;/li&gt;
  &lt;li&gt;(3)，&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}[(A)] \rightarrow \Lambda_{\text{CBN}}[(A)]&lt;/script&gt;，该结论使用反证法可得；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面证明，当命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;是一个简单句，对于任意的二元操作符&lt;script type=&quot;math/tex&quot;&gt;\otimes&lt;/script&gt;，同样满足：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Lambda_{\text{CBV}}(A \otimes B) \rightarrow \Lambda_{\text{CBN}}(A \otimes B)&lt;/script&gt;

&lt;p&gt;先看蕴含式的左边，我们可得：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Lambda_{\text{CBV}}(A \otimes B) \rightarrow \Lambda_{\text{CBV}}(A) \wedge \Lambda_{\text{CBV}}(B)&lt;/script&gt;

&lt;p&gt;因为（反证法），在CBV的情况下，若&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;和&lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;中存在任意一个无法Evaluation的情况，二元操作符&lt;script type=&quot;math/tex&quot;&gt;\otimes&lt;/script&gt;都不能执行，最终
导致&lt;script type=&quot;math/tex&quot;&gt;\overline{\Lambda_{\text{CBV}}(A \otimes B)}&lt;/script&gt;，和题目本意矛盾。&lt;/p&gt;

&lt;p&gt;于是，我们证明了，当命题&lt;script type=&quot;math/tex&quot;&gt;A&lt;/script&gt;、&lt;script type=&quot;math/tex&quot;&gt;B&lt;/script&gt;是一个简单句，对于任意的二元操作符&lt;script type=&quot;math/tex&quot;&gt;\otimes&lt;/script&gt;，如果
&lt;script type=&quot;math/tex&quot;&gt;\Lambda_{\text{CBV}}(A \otimes B)&lt;/script&gt;，则在有限的时间内：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;(4)，&lt;script type=&quot;math/tex&quot;&gt;\exists a \rightarrow \Lambda_{\text{CBV}}(A) = a&lt;/script&gt;；&lt;/li&gt;
  &lt;li&gt;(5)，&lt;script type=&quot;math/tex&quot;&gt;\exists b \rightarrow \Lambda_{\text{CBV}}(B) = b&lt;/script&gt;；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;进而，&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\Lambda_{\text{CBN}}(A \otimes B)  \;{\tiny\begin{matrix}\\ \normalsize = \\ ^{\scriptsize (4)}\end{matrix}}\; \Lambda_{\text{CBN}}(a \otimes B)  \;{\tiny\begin{matrix}\\ \normalsize = \\ ^{\scriptsize (5)}\end{matrix}}\; \Lambda_{\text{CBN}}(a \otimes b) = a\otimes b&lt;/script&gt;

&lt;p&gt;之后，使用递归，对复杂命题同理证明。&lt;/p&gt;

&lt;p&gt;（略）&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:open_progfun1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.coursera.org/learn/progfun1&quot;&gt;Functional Programming Principles in Scala&lt;/a&gt; from École Polytechnique Fédérale de Lausanne&amp;nbsp;&lt;a href=&quot;#fnref:open_progfun1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:blog_bolero&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala&quot;&gt;Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:blog_bolero&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:github_bolero&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;Bolero, 源代码&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:github_bolero&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_spec_exp&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html&quot;&gt;Scala Specification, Chapter 6 Expressions&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_spec_exp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_spec_exp:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:c9_lang_future&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://channel9.msdn.com/blogs/adebruyn/techdays-2010-developer-keynote-by-anders-hejlsberg&quot;&gt;TechDays 2010 Keynote by Anders Hejlsberg: Trends and future directions in programming languages&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:c9_lang_future&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:sicp&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://mitpress.mit.edu/sicp/&quot;&gt; Structure and Interpretation of Computer Programs&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:sicp&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wiki_formula&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F&quot;&gt;原子公式&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:wiki_formula&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:wiki_connective&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6&quot;&gt;逻辑运算符&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:wiki_connective&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:fn_if-then&quot;&gt;
      &lt;p&gt;可以通过枚举真值表的方式证明，“蕴含”（&lt;script type=&quot;math/tex&quot;&gt;A \rightarrow B&lt;/script&gt;）等价于复合命题&lt;script type=&quot;math/tex&quot;&gt;\neg A \vee B&lt;/script&gt;。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。&amp;nbsp;&lt;a href=&quot;#fnref:fn_if-then&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_progfun_2nd&quot;&gt;
      &lt;p&gt;Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press&amp;nbsp;&lt;a href=&quot;#fnref:scala_progfun_2nd&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/08/21/scala-quick-tour-part-i</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/08/21/scala-quick-tour-part-i</guid>
        <pubDate>2016-08-21T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文介绍一套&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;的代码模板（代号：&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;）——使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言，基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;库以及&lt;code class=&quot;highlighter-rouge&quot;&gt;ReactiveMongo&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;除了基本的HTTP Request和Response处理、MongoDB的异步读写之外，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;还包含如下功能：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Model&lt;/code&gt;的几个建议；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计的几个建议；&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CORS&lt;/code&gt;跨域配置；&lt;/li&gt;
    &lt;li&gt;基于Token认证的Request处理；&lt;/li&gt;
    &lt;li&gt;全局范围内设计的一套Monad规则：&lt;code class=&quot;highlighter-rouge&quot;&gt;EitherOrError&lt;/code&gt;；&lt;/li&gt;
    &lt;li&gt;接收Webhook；&lt;/li&gt;
    &lt;li&gt;基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Specs2&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;FakeApplication&lt;/code&gt;集成测试；&lt;/li&gt;
    &lt;li&gt;基于&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-native&lt;/code&gt;的发布脚本。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;本文（尤其是阅读源代码）需要有一定的&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;语言基础，需要对Monad有初步的理解。
最好能够（熟练地）使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Future[T]&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;目前主要基于&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;框架（&lt;code class=&quot;highlighter-rouge&quot;&gt;2.4&lt;/code&gt;），但是不包含任何View的部分，所有的Action都返回&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;对象。
我计划用&lt;code class=&quot;highlighter-rouge&quot;&gt;Spary.io&lt;/code&gt;代替&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;。&lt;/p&gt;

  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的源代码参见 &lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;scozv/bolero&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#bolero设计的基本理念&quot; id=&quot;markdown-toc-bolero设计的基本理念&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;设计的基本理念&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#松耦合的架构思想&quot; id=&quot;markdown-toc-松耦合的架构思想&quot;&gt;松耦合的架构思想&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#建模中的一些问题命名多态和序列化&quot; id=&quot;markdown-toc-建模中的一些问题命名多态和序列化&quot;&gt;建模中的一些问题：命名、多态和序列化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#restful-api设计的几个建议&quot; id=&quot;markdown-toc-restful-api设计的几个建议&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计的几个建议&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#restful-api的几个要素&quot; id=&quot;markdown-toc-restful-api的几个要素&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的几个要素&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#一致的payload和response设计&quot; id=&quot;markdown-toc-一致的payload和response设计&quot;&gt;一致的Payload和Response设计&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#限制跨域还是开放跨域&quot; id=&quot;markdown-toc-限制跨域还是开放跨域&quot;&gt;限制跨域还是开放跨域&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#名词单复数以及排序&quot; id=&quot;markdown-toc-名词单复数以及排序&quot;&gt;名词、单复数以及排序&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#开发代码详解&quot; id=&quot;markdown-toc-开发代码详解&quot;&gt;开发代码详解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#models中的几个trait解释&quot; id=&quot;markdown-toc-models中的几个trait解释&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;中的几个&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;解释&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#canbehierarchic层级类&quot; id=&quot;markdown-toc-canbehierarchic层级类&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeHierarchic&lt;/code&gt;，层级类&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#canbejsonfiedreads和writes的通用处理&quot; id=&quot;markdown-toc-canbejsonfiedreads和writes的通用处理&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeJsonfied&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;的通用处理&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#canbemasked敏感字段的掩盖&quot; id=&quot;markdown-toc-canbemasked敏感字段的掩盖&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeMasked&lt;/code&gt;，敏感字段的掩盖&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#orderorerror基于monad设计的全局规则校验&quot; id=&quot;markdown-toc-orderorerror基于monad设计的全局规则校验&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OrderOrError&lt;/code&gt;——基于Monad设计的全局规则校验&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#cancrossorigin处理option以应对跨域&quot; id=&quot;markdown-toc-cancrossorigin处理option以应对跨域&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanCrossOrigin&lt;/code&gt;——处理&lt;code class=&quot;highlighter-rouge&quot;&gt;OPTION&lt;/code&gt;以应对跨域&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#canconnectdb2t统一处理数据的读写&quot; id=&quot;markdown-toc-canconnectdb2t统一处理数据的读写&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB2[T]&lt;/code&gt;——统一处理数据的读写&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#基于token的用户认证&quot; id=&quot;markdown-toc-基于token的用户认证&quot;&gt;基于Token的用户认证&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#测试代码详解&quot; id=&quot;markdown-toc-测试代码详解&quot;&gt;测试代码详解&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#测试文件的结构&quot; id=&quot;markdown-toc-测试文件的结构&quot;&gt;测试文件的结构&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#测试的无状态&quot; id=&quot;markdown-toc-测试的无状态&quot;&gt;测试的无状态&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#canfakehttp不依赖任何客户端的restful测试&quot; id=&quot;markdown-toc-canfakehttp不依赖任何客户端的restful测试&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanFakeHTTP&lt;/code&gt;——不依赖任何客户端的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;测试&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#发布和部署介绍&quot; id=&quot;markdown-toc-发布和部署介绍&quot;&gt;发布和部署介绍&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;bolero设计的基本理念&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;设计的基本理念&lt;/h1&gt;

&lt;p&gt;本文介绍的这一套&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;的代码模板，代号为&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;，以下就将该套模板
称为&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;。&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的源代码参见：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;https://github.com/scozv/bolero&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;先来看&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;设计的一些基本理念。&lt;/p&gt;

&lt;h2 id=&quot;松耦合的架构思想&quot;&gt;松耦合的架构思想&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;基于松耦合 &lt;sup id=&quot;fnref:scozv_blog_archi&quot;&gt;&lt;a href=&quot;#fn:scozv_blog_archi&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 的思想，就前后端分离而言：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;只负责后端，我没有使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;引擎，并且计划使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Spary.io&lt;/code&gt;代替&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;作为后台服务，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;保证所有的HTTP Response都是&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;格式，都使用&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;的方式呈现。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;创建多个服务，不过目前，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;并不是一个Microservices的框架。
关于微服务，可以关注Lightbend推出的&lt;code class=&quot;highlighter-rouge&quot;&gt;Lagom&lt;/code&gt;框架，&lt;code class=&quot;highlighter-rouge&quot;&gt;Lagom&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;版本正在进行中 &lt;sup id=&quot;fnref:lagom_issue1&quot;&gt;&lt;a href=&quot;#fn:lagom_issue1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h2 id=&quot;建模中的一些问题命名多态和序列化&quot;&gt;建模中的一些问题：命名、多态和序列化&lt;/h2&gt;

&lt;p&gt;数据的传递方向，一个是从前端通过HTTP Request将&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;数据传递给后端，
后端转换（&lt;code class=&quot;highlighter-rouge&quot;&gt;Validate[T]&lt;/code&gt;）为代码层面的&lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;，
经过数据处理之后，持久化到数据库&lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;中。&lt;/p&gt;

&lt;p&gt;另一个方向反之，从数据库读、代码层面加工，最后通过HTTP Response返回给前端。&lt;/p&gt;

&lt;p&gt;因此，整个过程中有三个层面需要建模：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前端建模，虽然&lt;code class=&quot;highlighter-rouge&quot;&gt;JavaScript&lt;/code&gt;是弱类型，但是建议使用&lt;code class=&quot;highlighter-rouge&quot;&gt;TypeScript&lt;/code&gt;在前端建模；&lt;/li&gt;
  &lt;li&gt;代码层面，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;中，对应地使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;设计接口（&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;）和类（&lt;code class=&quot;highlighter-rouge&quot;&gt;class&lt;/code&gt;）；&lt;/li&gt;
  &lt;li&gt;数据库层面，对应的就是&lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;的设计。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;在这三个层面中，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;使用或者建议的命名规范是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的主键都叫&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;对象名使用驼峰命名，首字母大写；&lt;/li&gt;
  &lt;li&gt;对象中的字段使用驼峰命名，首字母小写。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这样，保证了三个层面上的数据建模都是一模一样的。&lt;/p&gt;

&lt;p&gt;此处有备住：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以上的数据建模规范，不一定是最佳的实践。另外，我正在考虑将前端和数据库层面的建模，
修改为下划线风格，代码层面继续使用驼峰。我是指，“我在考虑，但并没有决定”。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;中提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;模块 &lt;sup id=&quot;fnref:play_json&quot;&gt;&lt;a href=&quot;#fn:play_json&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;，用来处理对象类和&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;之间
的转换：类到&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;我们用&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;，表示“写”；&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;到类，我们用&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;，表明“读”。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;中也提供了用于automated mapping的&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;读写 &lt;sup id=&quot;fnref:play_json_auto&quot;&gt;&lt;a href=&quot;#fn:play_json_auto&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;play.api.libs.json._&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoReads&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reads&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoWrites&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// format = reads + writes
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;autoFormat&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此处有建议：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;尽管&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;提供了automated mapping，但是对于&lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;比较复杂的
系统，我建议手动配置&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;（&lt;strong&gt;前提是，要有完备的读写测试来覆盖代码&lt;/strong&gt;）：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;
      &lt;p&gt;当任何一层的建模，发生更改的时候，我们必须手动去对应地修改&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;，
否则将会收到如下异常，此举，可以保证我们代码的质量：&lt;/p&gt;

      &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; play.api.libs.json.JsResultException: &quot;obj.field_name&quot;:{&quot;msg&quot;:[&quot;error.path.missing&quot;]
&lt;/code&gt;&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;p&gt;手动配置&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;的另一个原因就是，可以更加自由地处理&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;的序列化：&lt;/p&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Option[T]&lt;/code&gt;为&lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt;时，可以不用&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;；&lt;/li&gt;
        &lt;li&gt;可以兼容&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;建模用驼峰、&lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;建模用下划线的情况。&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前系统的建模，通常离不开继承和多态，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;时，可能会遇到如下异常：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;ambiguous&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overloaded&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;definition&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;表明某一个类的&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;有重复定义的情况。我之前花了9个&lt;code class=&quot;highlighter-rouge&quot;&gt;git commits&lt;/code&gt;来处理这个问题。
你可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的&lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;源代码&lt;/a&gt;，或者给我看看错误信息。&lt;/p&gt;

&lt;h2 id=&quot;restful-api设计的几个建议&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计的几个建议&lt;/h2&gt;

&lt;p&gt;再次强调，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;只提供&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;的服务，不提供View渲染。所有的
&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;返回的都是&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;对象。&lt;/p&gt;

&lt;h3 id=&quot;restful-api的几个要素&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的几个要素&lt;/h3&gt;

&lt;p&gt;通常而言，&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;接口在设计的时候，需要考虑这些要素：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Method：&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;等 &lt;sup id=&quot;fnref:rest_http_method&quot;&gt;&lt;a href=&quot;#fn:rest_http_method&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;；&lt;/li&gt;
  &lt;li&gt;资源路径，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;/user/:id/profile&lt;/code&gt;，可以在路径加入适当的参数，用来排序、分页或者筛选；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;数据，传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;RSETful&lt;/code&gt;服务的&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;数据；&lt;/li&gt;
  &lt;li&gt;HTTP Header：可以为当前的HTTP Request添加一些元数据，比如Token认证过程中的用户身份Token；&lt;/li&gt;
  &lt;li&gt;HTTP Response：服务传递回来的&lt;code class=&quot;highlighter-rouge&quot;&gt;JSON&lt;/code&gt;结果。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一致的payload和response设计&quot;&gt;一致的Payload和Response设计&lt;/h3&gt;

&lt;p&gt;如果你经常使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;map()&lt;/code&gt;，你就会发现如下的一致性原则：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// such as
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;受这一原则的启发，我在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计中，很多时候
&lt;code class=&quot;highlighter-rouge&quot;&gt;payload&lt;/code&gt;和HTTP Response的数据结构都是一样的，比如，
如下是购物车页面，提交，生成（返回）带&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;的订单的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;POST /checkout

// Request
// header: Token for authentication
payload: &quot;Bolero.models.Order&quot;

// Response
data: &quot;Bolero.models.Order&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这样的设计，让接口的使用变得更简单——只需要记住一个数据结构。&lt;/p&gt;

&lt;h3 id=&quot;限制跨域还是开放跨域&quot;&gt;限制跨域还是开放跨域&lt;/h3&gt;

&lt;p&gt;CORS是Cross Origin Resource Sharing &lt;sup id=&quot;fnref:mdn_cors&quot;&gt;&lt;a href=&quot;#fn:mdn_cors&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 的简写。&lt;/p&gt;

&lt;p&gt;最初在设计&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的时候，我是限制跨域的，我只希望某一个指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;IP&lt;/code&gt;客户端，才能访问&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;接口。
但是，当我后来需要接入Ping++支付的Webhook的时候，限制跨域就不能同时满足客户端和Ping++的访问了。&lt;/p&gt;

&lt;p&gt;因为，&lt;code class=&quot;highlighter-rouge&quot;&gt;Access-Control-Allow-Origin&lt;/code&gt;
并不支持多域（multiple origin）同时跨域访问 &lt;sup id=&quot;fnref:w3_cors_multi_issue&quot;&gt;&lt;a href=&quot;#fn:w3_cors_multi_issue&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In practice the &lt;code class=&quot;highlighter-rouge&quot;&gt;origin-list-or-null&lt;/code&gt; production is more constrained.
Rather than allowing a space-separated list of origins,
&lt;strong&gt;it is either a single origin or the string “null”&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，面对松耦合和多个客户端的实例部署，限制跨域不是一个通用的选择。&lt;/p&gt;

&lt;p&gt;如果真的想控制跨域，或者统计HTTP Request的来源，可以选择：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;中，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Filters&lt;/code&gt;&lt;sup id=&quot;fnref:play_filter&quot;&gt;&lt;a href=&quot;#fn:play_filter&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;，
从HTTP Request中的&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;信息&lt;sup id=&quot;fnref:play_rqst_header&quot;&gt;&lt;a href=&quot;#fn:play_rqst_header&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt; 来控制访问源（目前&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;并没有这么做）；&lt;/li&gt;
  &lt;li&gt;在客户端的Ｗeb Server层面，控制访问源，也就是，对于一些异常的高频访问，Web Server
都不会将该HTTP Request发送给&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;服务。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;名词单复数以及排序&quot;&gt;名词、单复数以及排序&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;在设计&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的时候，还有如下几个原则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;资源地址（&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;）中只使用名词，最好使用简单名词，
不应该出现除反斜线（&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;）以外的其它字符，也不能采用驼峰的命名风格；&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;资源地址（&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;）中的名词，统一使用单数，就算是返回一个数组，也应该使用单数，比如：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// get the list of user
GET /user
// get a user with specific id
GET /user/:id
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;我们将单个的用户看作一个文件（&lt;code class=&quot;highlighter-rouge&quot;&gt;:id&lt;/code&gt;），将这些文件都放进一个叫&lt;code class=&quot;highlighter-rouge&quot;&gt;user&lt;/code&gt;的目录。我们拿单个的文件，或者
取整个文件夹，都会经过&lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt;这个路径，不会一个用&lt;code class=&quot;highlighter-rouge&quot;&gt;/user&lt;/code&gt;；整体用&lt;code class=&quot;highlighter-rouge&quot;&gt;/users&lt;/code&gt;。
所以我们的&lt;code class=&quot;highlighter-rouge&quot;&gt;URL&lt;/code&gt;中的名词也按照这个原则设计；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;如果HTTP Response的是一个数组，那么我们是否需要将该数组排序？&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的HTTP Response排序原则是：
    &lt;ul&gt;
      &lt;li&gt;如果HTTP Request指定了排序规则，则按照该规则排序；&lt;/li&gt;
      &lt;li&gt;如果该接口对应的业务有默认的排序规则，则按照该规则排序；&lt;/li&gt;
      &lt;li&gt;其它情况，&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;并不保证HTTP Response的有序性。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;开发代码详解&quot;&gt;开发代码详解&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的源代码见：&lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;scozv/bolero&lt;/a&gt;　。&lt;/p&gt;

&lt;p&gt;该源代码的文件结构为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;.
├── app
|   ├── base                // API中的辅助类
|   ├── biz                 // 业务处理，仅仅在这一层做数据库的读写
|   ├── contollers          // MVC 中的控制器
|   └── models              
|       ├── interop         // 第三方接口的models
|       └── model.scala     // Scala建模
|
├── conf                    // Play!的配置文件
|   ├── application.conf
|   ├── play.plugins
|   ├── release.conf
|   └── routes
|
├── project                  // 项目编译配置
|   ├── build.properties
|   └── plugin.sbt
|
├── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;                     // 测试脚本
|
└── build.sbt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;models中的几个trait解释&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;中的几个&lt;code class=&quot;highlighter-rouge&quot;&gt;trait&lt;/code&gt;解释&lt;/h2&gt;

&lt;h3 id=&quot;canbehierarchic层级类&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeHierarchic&lt;/code&gt;，层级类&lt;/h3&gt;

&lt;p&gt;层级类表示一系列有关联的类。使用并查集的算法，也就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;根节点的&lt;code class=&quot;highlighter-rouge&quot;&gt;rootId&lt;/code&gt;为其本身；&lt;/li&gt;
  &lt;li&gt;任意两个实例，如果两者的&lt;code class=&quot;highlighter-rouge&quot;&gt;rootId&lt;/code&gt;相等，则表示这两者是相互关联的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;canbejsonfiedreads和writes的通用处理&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeJsonfied&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;Reads&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;Writes&lt;/code&gt;的通用处理&lt;/h3&gt;

&lt;p&gt;参考&lt;code class=&quot;highlighter-rouge&quot;&gt;models.Goods&lt;/code&gt;中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeJsonfied&lt;/code&gt;的方式 &lt;sup id=&quot;fnref:scozv_git_goods&quot;&gt;&lt;a href=&quot;#fn:scozv_git_goods&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h3 id=&quot;canbemasked敏感字段的掩盖&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeMasked&lt;/code&gt;，敏感字段的掩盖&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;在将数据Response给前端的时候，有些敏感字段，是不应该返回出去的，比如用户&lt;code class=&quot;highlighter-rouge&quot;&gt;_id&lt;/code&gt;，
或者商品的成本价格。使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CanBeMasked&lt;/code&gt;接口，在Action那边，统一调用&lt;code class=&quot;highlighter-rouge&quot;&gt;T.asMasked()&lt;/code&gt;，将敏感信息抹除。&lt;/p&gt;

&lt;p&gt;Mask这个命名，受Oracle Data Masking &lt;sup id=&quot;fnref:oracle_mask&quot;&gt;&lt;a href=&quot;#fn:oracle_mask&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt; 的启发。&lt;/p&gt;

&lt;h2 id=&quot;orderorerror基于monad设计的全局规则校验&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OrderOrError&lt;/code&gt;——基于Monad设计的全局规则校验&lt;/h2&gt;

&lt;p&gt;就拿创建订单来看，通常订单的创建，会有一系列的规则需要校验：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;该用户是否有权限创建订单；&lt;/li&gt;
  &lt;li&gt;订单中的商品数量是否满足库存；&lt;/li&gt;
  &lt;li&gt;订单中的商品价格是否不小于当前价格；&lt;/li&gt;
  &lt;li&gt;是否满足订单中列明的优惠；&lt;/li&gt;
  &lt;li&gt;等等等等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;OrderOrError&lt;/code&gt;的思路就是，对于任何一条规则，我们保证校验的结果：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;要么是原来的订单&lt;code class=&quot;highlighter-rouge&quot;&gt;order&lt;/code&gt;，当此订单通过了校验；&lt;/li&gt;
  &lt;li&gt;要么是&lt;code class=&quot;highlighter-rouge&quot;&gt;error&lt;/code&gt;信息&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;此处，借用了&lt;code class=&quot;highlighter-rouge&quot;&gt;Scala&lt;/code&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;Try&lt;/code&gt; &lt;sup id=&quot;fnref:scala_try&quot;&gt;&lt;a href=&quot;#fn:scala_try&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt; 的设计：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;OrderOrError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Either&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Order&lt;/span&gt;, &lt;span class=&quot;kt&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;OrderOrError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;cm&quot;&gt;/*
  * we connect DB and validate the order,
  * so a Future[T] will be returned
  * */&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericRule&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;OrderOrError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;implicit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ec&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ExecutionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;OrderOrError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;order&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flatMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;successful&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;genericValidation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此处有备注：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;严格意义上讲，上述的设计并不是Monad模式，因为，它没有实现两个关键的方法 &lt;sup id=&quot;fnref:scozv_bolero_issue1&quot;&gt;&lt;a href=&quot;#fn:scozv_bolero_issue1&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ModelOrError[A].map(A =&amp;gt; B): ModelOrError[B]
  ModelOrError[A].flatMap(A =&amp;gt; ModelOrError[B]): ModelOrError[B]
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;p&gt;我正在考虑和设计。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;cancrossorigin处理option以应对跨域&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanCrossOrigin&lt;/code&gt;——处理&lt;code class=&quot;highlighter-rouge&quot;&gt;OPTION&lt;/code&gt;以应对跨域&lt;/h2&gt;

&lt;p&gt;跨域的处理有两个地方，需要实现：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;定义&lt;code class=&quot;highlighter-rouge&quot;&gt;OPTION&lt;/code&gt;路由；&lt;/li&gt;
  &lt;li&gt;处理&lt;code class=&quot;highlighter-rouge&quot;&gt;OPTION&lt;/code&gt;，返回&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 200&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// routes
// OPTIONS       /*path        controllers.CORSController.preFlight(path)
// controllers
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CORSController&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CanCrossOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preFlight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;corsOPTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// CanCrossOrigin
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CanCrossOrigin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;corsOPTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// add Access-Control-Allow-Origin to header
&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;canconnectdb2t统一处理数据的读写&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB2[T]&lt;/code&gt;——统一处理数据的读写&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB2[T]&lt;/code&gt;是对原先的&lt;code class=&quot;highlighter-rouge&quot;&gt;CanConnectDB&lt;/code&gt;的改写。
主要的意图是，让开发人员尽可能地少写重复的代码。&lt;/p&gt;

&lt;p&gt;具体的代码变更，参考&lt;code class=&quot;highlighter-rouge&quot;&gt;biz.Can.scala&lt;/code&gt;，也可以访问&lt;a href=&quot;https://github.com/scozv/bolero/commit/b0a5fd3c3ab58159305711e6e0f742786fccc30b&quot;&gt;代码变更记录&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;目前提供如下的接口实现：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CanConnectDB2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 查询所有的T
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 查询一个指定_id的T
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 查询指定_id的T的一个字段
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 查询一系列T的指定字段的所有值
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldName&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 插入一条T
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;WriteResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 更新符合selector条件的一系列T
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;JsObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UpdateWriteResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 更新指定_id的T
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Future&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;UpdateWriteResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;???&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;基于token的用户认证&quot;&gt;基于Token的用户认证&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的所有接口都是无状态的，识别用户的方式，就是通过Authentication Token。
在Google中搜索该名词，可以了解更多，也可以找到&lt;code class=&quot;highlighter-rouge&quot;&gt;auth0&lt;/code&gt;的帖子 &lt;sup id=&quot;fnref:auth0_token&quot;&gt;&lt;a href=&quot;#fn:auth0_token&quot; class=&quot;footnote&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;我正在写一篇关于Token认证的帖子&lt;sup id=&quot;fnref:scozv_blog_auth_token&quot;&gt;&lt;a href=&quot;#fn:scozv_blog_auth_token&quot; class=&quot;footnote&quot;&gt;15&lt;/a&gt;&lt;/sup&gt;，
目前还没有完成，你可以在参考文献中找到该帖子的草稿。&lt;/p&gt;

&lt;p&gt;此处有提醒：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我对安全认证这一领域，还是很多不了解的地方。&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;对Token认证的实现不能保证100%
安全，我还在不断地改进中。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;里面，使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt;提供的
Action composition &lt;sup id=&quot;fnref:play_composition&quot;&gt;&lt;a href=&quot;#fn:play_composition&quot; class=&quot;footnote&quot;&gt;16&lt;/a&gt;&lt;/sup&gt; 来完成Token认证。&lt;/p&gt;

&lt;p&gt;具体的实现，参考&lt;code class=&quot;highlighter-rouge&quot;&gt;controllers.CanAuthenticate.scala&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&quot;测试代码详解&quot;&gt;测试代码详解&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;测试非常重要 &lt;sup id=&quot;fnref:scozv_blog_jira&quot;&gt;&lt;a href=&quot;#fn:scozv_blog_jira&quot; class=&quot;footnote&quot;&gt;17&lt;/a&gt;&lt;/sup&gt;，完备的测试是重构和持续集成的基础。&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;测试非常重要，完备的测试是重构和持续集成的基础。&lt;/strong&gt;&lt;/p&gt;

  &lt;p&gt;&lt;strong&gt;测试非常重要，完备的测试是重构和持续集成的基础。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;测试的&lt;a href=&quot;https://github.com/scozv/bolero&quot;&gt;源代码&lt;/a&gt;见&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;目录。&lt;/p&gt;

&lt;h2 id=&quot;测试文件的结构&quot;&gt;测试文件的结构&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;.
├── &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
|   ├── WithApplication.scala         // 升级至Play 2.4之后，使用旧版的WithApplication
|   ├── CanConnectDB.scala            // 连接到测试数据库
|   ├── CanFakeHTTP.scala             // 伪造HTTP Request
|   └── BoleroApplicationSpec.scala   // 具体的测试脚本，可以将不同的测试逻辑分割成不同的文件&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;测试的无状态&quot;&gt;测试的无状态&lt;/h2&gt;

&lt;p&gt;测试的脚本，要保证在任何库上都能通过，当然，这和测试用例的设计有关。&lt;/p&gt;

&lt;p&gt;通常，我们在测试开始时，准备数据，在测试完成之后，清理测试数据。&lt;/p&gt;

&lt;h2 id=&quot;canfakehttp不依赖任何客户端的restful测试&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CanFakeHTTP&lt;/code&gt;——不依赖任何客户端的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;测试&lt;/h2&gt;

&lt;p&gt;基于松耦合的原则，&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful&lt;/code&gt;服务的开发流程中，不应该依赖前端View的开发进程。
所以，我们使用&lt;code class=&quot;highlighter-rouge&quot;&gt;CanFakeHTTP&lt;/code&gt;模拟HTTP Request。&lt;/p&gt;

&lt;h1 id=&quot;发布和部署介绍&quot;&gt;发布和部署介绍&lt;/h1&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的一个生产环境目前部署在&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 14.04&lt;/code&gt;上面。&lt;/p&gt;

&lt;p&gt;部署脚本，可以参考&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy.sh&lt;/code&gt;，最好在&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 14.04&lt;/code&gt;上运行。该脚本
使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;sbt-native-packager&lt;/code&gt; &lt;sup id=&quot;fnref:scala_sbt_native&quot;&gt;&lt;a href=&quot;#fn:scala_sbt_native&quot; class=&quot;footnote&quot;&gt;18&lt;/a&gt;&lt;/sup&gt; 作常驻发布。&lt;/p&gt;

&lt;p&gt;另外，在实际的使用中&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt;的生产配置对开发是不可见的。
我通常会使用多个&lt;code class=&quot;highlighter-rouge&quot;&gt;git repo&lt;/code&gt;来托管源代码（假定项目代号为&lt;code class=&quot;highlighter-rouge&quot;&gt;PJ&lt;/code&gt;）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pj-docs                 &lt;span class=&quot;c&quot;&gt;# 文档中心，使用`Markdown`来写项目的所有文档&lt;/span&gt;
pj-core-restful         &lt;span class=&quot;c&quot;&gt;# 本文的主要内容，使用`Bolero`代码模板&lt;/span&gt;
pj-core-web             &lt;span class=&quot;c&quot;&gt;# 核心的Web建模，使用`TypeScript`建模&lt;/span&gt;
pj-client-web           &lt;span class=&quot;c&quot;&gt;# View层，通用的用户访问页面，使用`pj-core-web`&lt;/span&gt;
pj-client-device        &lt;span class=&quot;c&quot;&gt;# View层，App客户端&lt;/span&gt;
pj-client-console       &lt;span class=&quot;c&quot;&gt;# View层，系统的后台管理平台，使用`pj-core-web`&lt;/span&gt;
pj-deploy               &lt;span class=&quot;c&quot;&gt;# 以上所有`repo`的发布配置脚本，对开发不可见&lt;/span&gt;
pj-data                 &lt;span class=&quot;c&quot;&gt;# 生产环境的数据备份，对开发不可见&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:scozv_blog_archi&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scozv.github.io/blog/zh/pattern/2016/05/05/a-low-coupling-architecture-of-the-web-solution-with-continuous-integration&quot;&gt;基于低耦合和持续集成的Web架构&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scozv_blog_archi&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:lagom_issue1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/lagom/lagom/issues/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Lagom&lt;/code&gt; issue #1 Add Scala API&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:lagom_issue1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:play_json&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt; JSON Reads/Writes/Format Combinators&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:play_json&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:play_json_auto&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.5.x/ScalaJsonAutomated&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt; JSON automated mapping&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:play_json_auto&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:rest_http_method&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.restapitutorial.com/lessons/httpmethods.html&quot;&gt;Using HTTP Methods for RESTful Services&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:rest_http_method&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:mdn_cors&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&quot;&gt;HTTP access control (CORS)&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:mdn_cors&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:w3_cors_multi_issue&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.w3.org/TR/cors/#access-control-allow-origin-response-header&quot;&gt;5.1 Access-Control-Allow-Origin Response Header&lt;/a&gt; from w3.org&amp;nbsp;&lt;a href=&quot;#fnref:w3_cors_multi_issue&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:play_filter&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt; Filters&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:play_filter&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:play_rqst_header&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.mvc.RequestHeader&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;play.api.mvc.RequestHeader&lt;/code&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:play_rqst_header&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_git_goods&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scozv/bolero/blob/master/app/models/Goods.scala#L28&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;models.Goods&lt;/code&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scozv_git_goods&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:oracle_mask&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/database/options/data-masking-subsetting/overview/index.html&quot;&gt;Oracle Data Masking and Subsetting Pack&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:oracle_mask&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_try&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://www.scala-lang.org/api/2.9.3/scala/util/Try.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;scala.util.Try&lt;/code&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_try&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_bolero_issue1&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scozv/bolero/issues/1&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Bolero&lt;/code&gt; issue #1 monad ModelOrError needed&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scozv_bolero_issue1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:auth0_token&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/&quot;&gt;Cookies vs Tokens. Getting auth right with Angular.JS&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:auth0_token&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_blog_auth_token&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/scozv/blog/blob/master/_drafts/2016-05-12-understanding-of-login-and-the-token-based-authentication.md&quot;&gt;对登录和基于Token的认证机制的理解（草稿）&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scozv_blog_auth_token&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:play_composition&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/2.5.x/ScalaActionsComposition&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Play!&lt;/code&gt; Action composition&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:play_composition&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_blog_jira&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scozv.github.io/blog/zh/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server&quot;&gt;Bitbucket Cloud的Issue至JIRA Server的完全迁移指南&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scozv_blog_jira&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scala_sbt_native&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;[^scala_sbt_native]&quot;&gt;Debian Plugin&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:scala_sbt_native&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala</guid>
        <pubDate>2016-07-27T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>无代码不欢乐——使用统一的Bash脚本搭建开发环境</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文最终会给出一段脚本，执行类似如下的语句：&lt;/p&gt;

  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  wget -qO- path/to/installation.sh | bash
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;

  &lt;p&gt;将会在Ubuntu系统上面配置好所有的开发环境。&lt;/p&gt;

  &lt;p&gt;本文会讲解如何写出并部署&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;这样的脚本，和一些建议。&lt;/p&gt;

  &lt;p&gt;除此之外，本文更愿意表达如下几个意思：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;能用代码的，就别用鼠标；&lt;/li&gt;
    &lt;li&gt;既然用了代码，就纳入版本控制（Git）；&lt;/li&gt;
    &lt;li&gt;使用脚本（&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;），开发人员可以方便地配置统一的开发环境；&lt;/li&gt;
    &lt;li&gt;给开发人员更好的开发体验。&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;本文的脚本只运行在&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 14.04+&lt;/code&gt;上面，暂（JI）时（BEN）不考虑其它操作系统。&lt;/p&gt;

  &lt;p&gt;本文会提到&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt; &lt;sup id=&quot;fnref:dotfiles&quot;&gt;&lt;a href=&quot;#fn:dotfiles&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 这个概念，但不会详细解释它。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#installationsh初览&quot; id=&quot;markdown-toc-installationsh初览&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;初览&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#成为installationsh之前&quot; id=&quot;markdown-toc-成为installationsh之前&quot;&gt;成为&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;之前&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#编写installationsh需要留意的地方&quot; id=&quot;markdown-toc-编写installationsh需要留意的地方&quot;&gt;编写&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;需要留意的地方&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#兼容不同的ubuntu版本&quot; id=&quot;markdown-toc-兼容不同的ubuntu版本&quot;&gt;兼容不同的Ubuntu版本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#兼容新旧环境&quot; id=&quot;markdown-toc-兼容新旧环境&quot;&gt;兼容新旧环境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#区分server脚本和desktop脚本&quot; id=&quot;markdown-toc-区分server脚本和desktop脚本&quot;&gt;区分Server脚本和Desktop脚本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#控制nodejs的版本&quot; id=&quot;markdown-toc-控制nodejs的版本&quot;&gt;控制Nodejs的版本&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#提高下载速度&quot; id=&quot;markdown-toc-提高下载速度&quot;&gt;提高下载速度&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#publish让开发人员执行最少的命令&quot; id=&quot;markdown-toc-publish让开发人员执行最少的命令&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publi.sh&lt;/code&gt;——让开发人员执行最少的命令&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#使用花括号保证脚本的完整&quot; id=&quot;markdown-toc-使用花括号保证脚本的完整&quot;&gt;使用花括号保证脚本的完整&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#持续集成的基础脚本化&quot; id=&quot;markdown-toc-持续集成的基础脚本化&quot;&gt;持续集成的基础——脚本化&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#脚本化的意义不是为了显摆而是为了持续集成&quot; id=&quot;markdown-toc-脚本化的意义不是为了显摆而是为了持续集成&quot;&gt;脚本化的意义，不是为了显摆，而是为了持续集成&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#我有哪些地方都在用代码&quot; id=&quot;markdown-toc-我有哪些地方都在用代码&quot;&gt;我有哪些地方都在用代码&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#统一的开发流程脚本化&quot; id=&quot;markdown-toc-统一的开发流程脚本化&quot;&gt;统一的开发流程——脚本化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;installationsh初览&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;初览&lt;/h1&gt;

&lt;p&gt;你可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;中看到安装脚本的源代码（&lt;a href=&quot;https://github.com/scozv/dotfiles/blob/master/os/ubuntu-server.sh&quot;&gt;链接&lt;/a&gt;）。
或者，你也可以在虚拟机中执行如下命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;请注意：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu 14.04+&lt;/code&gt;上执行以上脚本&lt;/li&gt;
  &lt;li&gt;最好在虚拟机上尝试这段脚本，因为这段脚本配置的&lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDB&lt;/code&gt;的版本可能和你使用的版本不一样&lt;/li&gt;
  &lt;li&gt;不要轻易地执行未知脚本&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;成为installationsh之前&quot;&gt;成为&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;之前&lt;/h1&gt;

&lt;p&gt;我从2014年就在&lt;code class=&quot;highlighter-rouge&quot;&gt;github&lt;/code&gt;中托管我的&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;（&lt;a href=&quot;https://github.com/scozv/dotfiles&quot;&gt;链接&lt;/a&gt;）了。
于2015年将&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;转为私有。截至到本文发表，&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;的源代码统计如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;meta&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;data&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Project name&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;dotfiles&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Generated&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2016-07-23 11:37:11 (in 0 seconds)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Generator&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;&lt;a href=&quot;http://gitstats.sourceforge.net/&quot;&gt;GitStats&lt;/a&gt; (version 2015.10.03), git version 2.8.2, gnuplot 4.6 patchlevel 6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Report Period&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2014-03-08 17:51:29 to 2016-07-21 18:14:15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Age&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;867 days, 67 active days (7.73%)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total Files&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total Lines of Code&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2187 (2835 added, 648 removed)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Total Commits&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;137 (average 2.0 commits per active day, 0.2 per all days)&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;建立&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;的最初目的是为了配置&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;环境，之后就把Ubutnu使用过程中遇到的脚本，
都记录下来。简单的脚本记录，并不能取代手动的复制、粘帖与执行。&lt;/p&gt;

&lt;p&gt;所以，我逐步地将所有的脚本封装，使得这些脚本能够通过&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;执行。
也就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;记录各种命名行&lt;/li&gt;
  &lt;li&gt;将常用的命令，设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;bash_alias&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;将流程类的脚本（比如配置开发环境、安装JIRA）进可能地封装，让用户使用&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;命名就能
轻松地配置好各类环境。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;编写installationsh需要留意的地方&quot;&gt;编写&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;需要留意的地方&lt;/h1&gt;

&lt;h2 id=&quot;兼容不同的ubuntu版本&quot;&gt;兼容不同的Ubuntu版本&lt;/h2&gt;

&lt;p&gt;本文提到的脚本，主要在&lt;code class=&quot;highlighter-rouge&quot;&gt;14.04+&lt;/code&gt;上运行，建议生产环境使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu Server 14.04&lt;/code&gt;。使用脚本可以区分
系统的版本：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# http://ask.xmodulo.com/find-ubuntu-version-codename-shell-script.html&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;lsb_release --release | cut -f2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; &amp;gt; &lt;span class=&quot;s2&quot;&gt;&quot;15.10&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
  &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;System Upgrade for &lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;lsb_release --release | cut -f2&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  sudo apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt upgrade
&lt;span class=&quot;k&quot;&gt;else
  &lt;/span&gt;sudo apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo apt-get upgrade
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;兼容新旧环境&quot;&gt;兼容新旧环境&lt;/h2&gt;

&lt;p&gt;可以通过，如下两个命令，判断某一个包是否已经安装成功：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; -v &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;更详细的代码可以参考&lt;a href=&quot;https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-dc9087fc5f049f9e1d8e365374bcc630R1&quot;&gt;此处&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;区分server脚本和desktop脚本&quot;&gt;区分Server脚本和Desktop脚本&lt;/h2&gt;

&lt;p&gt;很多可视化的工具都不需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;上运行，比如IDE工具等。所以&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;应该
区分&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;脚本和&lt;code class=&quot;highlighter-rouge&quot;&gt;Desktop&lt;/code&gt;脚本。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;wget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash

wget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-desktop.sh | bash&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;查看上面的两个脚本的源代码，&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;封装的主要思路为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;前置命令的配置，比如定义一些通用的方法&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df_echo &quot;define temporary functions&quot;
. ~/opt/.df/00_define_functions.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;添加常用的PPA源并配置系统&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df_echo &quot;apt sources&quot;
. ~/opt/.df/03_apt_sources.sh
df_echo &quot;system configure&quot;
. ~/opt/.df/05_system_config.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;配置Server，每一个应用都是独立的脚本，便于组合成不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;配置Desktop&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;清理临时定义的变量和函数&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df_echo &quot;unset and clear&quot;
. ~/opt/.df/99_unset.sh
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;控制nodejs的版本&quot;&gt;控制Nodejs的版本&lt;/h2&gt;

&lt;p&gt;最新的应用版本，并不一定就适合用在生产环境上。尤其是当前的生产环境用的低版本，
最新的应用有可能涉及到重大的变更，比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-5&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;babel-6&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll 2&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll 3&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发环境也是如此，最好和生产环境保持一致，便于调试。所以，如果生产环境
一直使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs 5&lt;/code&gt;，那就不要轻易地升级到&lt;code class=&quot;highlighter-rouge&quot;&gt;Nodejs 6&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;脚本中，可以控制版本，参考&lt;code class=&quot;highlighter-rouge&quot;&gt;nodejs-5.sh&lt;/code&gt;（&lt;a href=&quot;https://github.com/scozv/dotfiles/blob/master/os/src/10/nodejs-5.sh&quot;&gt;链接&lt;/a&gt;）。&lt;/p&gt;

&lt;h2 id=&quot;提高下载速度&quot;&gt;提高下载速度&lt;/h2&gt;

&lt;p&gt;可以使用镜像提高下载速度。有些时候，软件包的源地址的访问速度较慢，可以尝试更换较快的镜像。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;scala&lt;/code&gt;等包管理的源地址都有较快的镜像站点。
源代码中列出了一些镜像地址。&lt;/p&gt;

&lt;p&gt;另外，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;sha1sum&lt;/code&gt;对下载的文件做校验（参考&lt;a href=&quot;https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-64ce3c35164131101fa3be487e13c7efL47&quot;&gt;此处&lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt;&lt;/a&gt;）。&lt;/p&gt;

&lt;h2 id=&quot;publish让开发人员执行最少的命令&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;publi.sh&lt;/code&gt;——让开发人员执行最少的命令&lt;/h2&gt;

&lt;p&gt;除了将&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;部署到公共的Git Server上面以外，也可以将其部署到CDN上面。&lt;/p&gt;

&lt;p&gt;很多时候，我们的环境脚本要能在新安装的系统上运行，此时，&lt;code class=&quot;highlighter-rouge&quot;&gt;git&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh&lt;/code&gt;都还没有配置。
我们的脚本运行不能依赖于&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;在我私有的&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;中，我写了如下的发布脚本，用来部署&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;。
其中，我使用了UCloud的CDN，因为它提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;filemgr-linux64&lt;/code&gt;脚本，可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;中方便
地使用文件上传接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;将源文件打包&quot;&lt;/span&gt;
tar -cjvf ~/repo/dotfiles/dotfiles-sh.tar -C ~/repo/dotfiles/os/src .
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;上传到UCloud的CDN中&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/opt/filemgr-linux64.elf
./filemgr-linux64 --action mput --bucket &amp;lt;bucket_name&amp;gt; --key dotfiles/0.tar --file ~/repo/dotfiles/dotfiles-sh.tar
./filemgr-linux64 --action mput --bucket &amp;lt;bucket_name&amp;gt; --key dotfiles/ubuntu-server.sh --file ~/repo/dotfiles/os/ubuntu-server.sh
./filemgr-linux64 --action mput --bucket &amp;lt;bucket_name&amp;gt; --key dotfiles/ubuntu-desktop.sh --file ~/repo/dotfiles/os/ubuntu-desktop.sh
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/repo/dotfiles&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;使用花括号保证脚本的完整&quot;&gt;使用花括号保证脚本的完整&lt;/h2&gt;

&lt;p&gt;受&lt;code class=&quot;highlighter-rouge&quot;&gt;nvm&lt;/code&gt;安装脚本&lt;sup id=&quot;fnref:nvm&quot;&gt;&lt;a href=&quot;#fn:nvm&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;的启发，为了保证&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;的脚本的完整，使用花括号将所有的
代码包含进入：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;# code here&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;持续集成的基础脚本化&quot;&gt;持续集成的基础——脚本化&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dotfiles&lt;/code&gt;以及&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;这类的脚本化，我认为是持续集成的基础。
未来如果我大范围地使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;，依然也是一系列的脚本。&lt;/p&gt;

&lt;h2 id=&quot;脚本化的意义不是为了显摆而是为了持续集成&quot;&gt;脚本化的意义，不是为了显摆，而是为了持续集成&lt;/h2&gt;

&lt;p&gt;大范围的使用脚本，并不是为了显得很&lt;code class=&quot;highlighter-rouge&quot;&gt;geek&lt;/code&gt;（此处没有褒贬），而是为了更好的持续集成。&lt;/p&gt;

&lt;p&gt;通常持续集成的配置文件基本上分为如下步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;前置的环境配置&lt;/li&gt;
  &lt;li&gt;需要做哪些测试&lt;/li&gt;
  &lt;li&gt;需要发布什么&lt;/li&gt;
  &lt;li&gt;后续有什么收尾&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上所有，都离不开完善的脚本。而第一步“前置的环境配置”就是本文的&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;。
当然，我们还应该尝试使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker&lt;/code&gt;快速地完成环境配置。&lt;/p&gt;

&lt;h2 id=&quot;我有哪些地方都在用代码&quot;&gt;我有哪些地方都在用代码&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;这个blog &lt;sup id=&quot;fnref:scozv_blog&quot;&gt;&lt;a href=&quot;#fn:scozv_blog&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;我的dotfiles &lt;sup id=&quot;fnref:scozv_dotfiles&quot;&gt;&lt;a href=&quot;#fn:scozv_dotfiles&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;我的所有笔记（LaTeX）&lt;/li&gt;
  &lt;li&gt;部署脚本&lt;/li&gt;
  &lt;li&gt;接口文档 &lt;sup id=&quot;fnref:algo-wiki&quot;&gt;&lt;a href=&quot;#fn:algo-wiki&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;li&gt;团队内部文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;统一的开发流程脚本化&quot;&gt;统一的开发流程——脚本化&lt;/h1&gt;

&lt;p&gt;脚本化，除了作为持续集成的基础之外，还有一个好处，就是统一团队的开发流程。&lt;/p&gt;

&lt;p&gt;类似&lt;code class=&quot;highlighter-rouge&quot;&gt;installation.sh&lt;/code&gt;这样的脚本，可以保证团队的开发环境一致。&lt;/p&gt;

&lt;p&gt;类似&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt; &lt;sup id=&quot;fnref:gitl&quot;&gt;&lt;a href=&quot;#fn:gitl&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt; 这样的脚本，就是为了控制统一的开发流程的，比如代码提交这个简单的动作，
我们通过完善的脚本，可以在代码&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;到Git Server之前：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;强制单元测试&lt;/li&gt;
  &lt;li&gt;和JIRA关联&lt;/li&gt;
  &lt;li&gt;统一的代码风格检查（code hint）&lt;/li&gt;
  &lt;li&gt;其它&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;开发人员并不需要拿着Checklist去一步一步，人为地检查流程是否做完了。
如此，可以给开发带来更好的体验。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:dotfiles&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://dotfiles.github.io/&quot;&gt;Your unofficial guide to dotfiles on GitHub&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:dotfiles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:nvm&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;Node Version Manager&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:nvm&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_blog&quot;&gt;
      &lt;p&gt;https://github.com/scozv/blog&amp;nbsp;&lt;a href=&quot;#fnref:scozv_blog&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:scozv_dotfiles&quot;&gt;
      &lt;p&gt;https://github.com/scozv/dotfiles&amp;nbsp;&lt;a href=&quot;#fnref:scozv_dotfiles&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:algo-wiki&quot;&gt;
      &lt;p&gt;https://github.com/scozv/algo-wiki&amp;nbsp;&lt;a href=&quot;#fnref:algo-wiki&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gitl&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git&quot;&gt;一套简洁的基于Git的线性分支管理工作流&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:gitl&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2016/07/22/donot-ask-the-devs-to-prepare-env-by-click</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2016/07/22/donot-ask-the-devs-to-prepare-env-by-click</guid>
        <pubDate>2016-07-22T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>使用Ping++设计可供集中收银的微服务</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;使用Ping++可以快速接入不同的支付渠道。
通常情况下，每一个应用需要在Ping++后台系统中，对应地创建一个应用，
用来调用Ping++的接口。&lt;/p&gt;

  &lt;p&gt;本文尝试设计这样的解决方案——该方案仅有一个Ping++应用，但同时满足多个（独立）应用的支付场景。
本文提到的解决方案，目前处在设计阶段。&lt;/p&gt;

  &lt;p&gt;本文将提到如下话题：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;使用Ping++完成一般的支付流程&lt;/li&gt;
    &lt;li&gt;来自百货大楼购物的启发&lt;/li&gt;
    &lt;li&gt;设计可供集中收银的微服务&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;本文的不足之处在于：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;对微服务的理解还停留在概念阶段&lt;/li&gt;
    &lt;li&gt;暂时还未涉及退款、提现流程&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#两种ping应用的使用方法&quot; id=&quot;markdown-toc-两种ping应用的使用方法&quot;&gt;两种Ping++应用的使用方法&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#通常的ping应用的使用方法&quot; id=&quot;markdown-toc-通常的ping应用的使用方法&quot;&gt;通常的Ping++应用的使用方法&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#来自百货大楼购物流程的启发&quot; id=&quot;markdown-toc-来自百货大楼购物流程的启发&quot;&gt;来自百货大楼购物流程的启发&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#术语&quot; id=&quot;markdown-toc-术语&quot;&gt;术语&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#应用&quot; id=&quot;markdown-toc-应用&quot;&gt;应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#应用的view层&quot; id=&quot;markdown-toc-应用的view层&quot;&gt;应用的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;层&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#应用的后台服务restful-server&quot; id=&quot;markdown-toc-应用的后台服务restful-server&quot;&gt;应用的后台服务：&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful Server&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#ping应用&quot; id=&quot;markdown-toc-ping应用&quot;&gt;Ping++应用&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#集中收银&quot; id=&quot;markdown-toc-集中收银&quot;&gt;集中收银&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#使用ping完成一般购物的支付流程&quot; id=&quot;markdown-toc-使用ping完成一般购物的支付流程&quot;&gt;使用Ping++完成一般购物的支付流程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#支付流程示意图&quot; id=&quot;markdown-toc-支付流程示意图&quot;&gt;支付流程示意图&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#将购物流程一般化&quot; id=&quot;markdown-toc-将购物流程一般化&quot;&gt;将购物流程一般化&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#订单类的设计&quot; id=&quot;markdown-toc-订单类的设计&quot;&gt;订单类的设计&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#设计可供集中收银的微服务&quot; id=&quot;markdown-toc-设计可供集中收银的微服务&quot;&gt;设计可供集中收银的微服务&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#一个微服务并不是微服务&quot; id=&quot;markdown-toc-一个微服务并不是微服务&quot;&gt;一个微服务并不是微服务&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#收银中心的微服务设计&quot; id=&quot;markdown-toc-收银中心的微服务设计&quot;&gt;收银中心的微服务设计&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#将原来的一个restful-server拆分成多个微服务&quot; id=&quot;markdown-toc-将原来的一个restful-server拆分成多个微服务&quot;&gt;将原来的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful Server&lt;/code&gt;拆分成多个微服务&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#集中收银台的设计图&quot; id=&quot;markdown-toc-集中收银台的设计图&quot;&gt;集中收银台的设计图&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#收银台服务的restful-api设计&quot; id=&quot;markdown-toc-收银台服务的restful-api设计&quot;&gt;收银台服务的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;两种ping应用的使用方法&quot;&gt;两种Ping++应用的使用方法&lt;/h1&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TL;DR&lt;/code&gt;，你可以先阅读&lt;strong&gt;术语&lt;/strong&gt;一节，对本文出现的名词的定义。&lt;/p&gt;

&lt;h2 id=&quot;通常的ping应用的使用方法&quot;&gt;通常的Ping++应用的使用方法&lt;/h2&gt;

&lt;p&gt;通常情况下，我们的每一个应用，都会对应在Ping++后台管理页面，
创建一个Ping++应用。&lt;/p&gt;

&lt;h2 id=&quot;来自百货大楼购物流程的启发&quot;&gt;来自百货大楼购物流程的启发&lt;/h2&gt;

&lt;p&gt;百货大楼购物，通常都在收银台付款，而非店铺中，流程可以整理为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户在店铺购物，确认购物车&lt;/li&gt;
  &lt;li&gt;用户使用购物车，在店铺开具购物小票&lt;/li&gt;
  &lt;li&gt;用户凭店铺的购物小票前往收银台&lt;/li&gt;
  &lt;li&gt;用户支付并得到支付成功的凭证&lt;/li&gt;
  &lt;li&gt;用户使用支付凭证，回到店铺完成购物&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;启发就是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将百货大楼的每一个店铺看作一个应用&lt;/li&gt;
  &lt;li&gt;将唯一的一个收银台，设计成微服务，用来和Ping++联系&lt;/li&gt;
  &lt;li&gt;将支付模块，从应用中独立出来&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;术语&quot;&gt;术语&lt;/h1&gt;

&lt;p&gt;为了便于阅读和理解，我解释一下文中将会出现的如下名词：&lt;/p&gt;

&lt;h2 id=&quot;应用&quot;&gt;应用&lt;/h2&gt;

&lt;p&gt;应用是一个很抽象的名词，可以是一个功能简单的计算器软件，也可以是一个
功能丰富的个人财务管理软件：小到一个程序，大到一个系统。&lt;/p&gt;

&lt;p&gt;应用也有不同的表现形式，可以是一个可执行文件、一个Web，或者是一个安装在智能手机（设备）
上的App。&lt;/p&gt;

&lt;p&gt;本文的应用，通常：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;具有完整业务流程的一个系统&lt;/li&gt;
  &lt;li&gt;它有&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;表现页面&lt;/li&gt;
  &lt;li&gt;它有后台服务&lt;/li&gt;
  &lt;li&gt;不同的应用，在业务上没有重合的地方&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;应用的view层&quot;&gt;应用的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;层&lt;/h2&gt;

&lt;p&gt;我在之前的文章提到：&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;和后台服务应该完全独立（代码、开发、部署都要独立），
这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;就是应用的表现形式，在下面的文章中：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;用户的操作，都在&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;层进行&lt;/li&gt;
  &lt;li&gt;客户端，通常就是指&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;层&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;应用的后台服务restful-server&quot;&gt;应用的后台服务：&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful Server&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;我建议应用的所有后台服务，都应该封装成&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的形式，在下面的文章中，
如下的名词，应该都是指应用的后台服务：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务端&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful Server&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;后台服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ping应用&quot;&gt;Ping++应用&lt;/h2&gt;

&lt;p&gt;可以在Ping++管理平台创建一个或者多个Ping++应用，每一个Ping++应用，都有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;app_id&lt;/code&gt;。
每一个Ping++应用里面，可以配置独立的支付渠道。&lt;/p&gt;

&lt;h2 id=&quot;集中收银&quot;&gt;集中收银&lt;/h2&gt;

&lt;p&gt;本文想要设计的集中收银解决方案，最终创建一个Ping++应用，
完成多个独立应用的支付需求。&lt;/p&gt;

&lt;h1 id=&quot;使用ping完成一般购物的支付流程&quot;&gt;使用Ping++完成一般购物的支付流程&lt;/h1&gt;

&lt;p&gt;可以先去阅读官方的&lt;a href=&quot;https://www.pingxx.com/docs/overview/flow/charge&quot;&gt;支付流程说明&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;支付流程示意图&quot;&gt;支付流程示意图&lt;/h2&gt;

&lt;p&gt;如下的示例图，将以购物为例，更详细地解释支付流程：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端选择一系列（数组）的购买商品&lt;/li&gt;
  &lt;li&gt;客户端向RESTful Server申请订单&lt;/li&gt;
  &lt;li&gt;RESTful Server向客户端Response返回带有订单编号的订单数据&lt;/li&gt;
  &lt;li&gt;客户端使用订单数据向RESTful Server申请Ping++的支付票据（Charge对象）&lt;/li&gt;
  &lt;li&gt;RESTful Server向Ping++服务器，请求Charge对象&lt;/li&gt;
  &lt;li&gt;RESTful Server收到Ping++服务器的Response，同时将Charge对象传递给客户端&lt;/li&gt;
  &lt;li&gt;客户端拿到Charge对象，调用Ping++ Client SDK开始支付&lt;/li&gt;
  &lt;li&gt;（以下为异步流程）&lt;/li&gt;
  &lt;li&gt;Ping++服务器确认支付结果之后，向RESTful Server发送一个POST请求，告知结果&lt;/li&gt;
  &lt;li&gt;RESTful Server接收到这个Webhook之后，修改订单的支付状态&lt;/li&gt;
&lt;/ol&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+------------------------------------------+----------------+
|                                          |                |
|    STEP 1                                |   Client Side  |
|    put product into cart                 |                |
|                                          +----------------+
|    STEP 4                             STEP 7              | STEP 8
|                                       (Ping++ Client SDK) |         +--------+
|    use Order data                                         | finish  |        |
|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |
|                                       request a payment   | +-----&amp;gt; |        |
+-----------------------------------------------------------+         +--------+
  + ^                  + ^
  | |                  | |
  | | STEP 2 &amp;amp; 3       | | STEP 4                STEP 5
  | |                  | |                       (Ping++ Server SDK)
  | | apply an order   | | apply for Charge
  | |                  | |
  | | RESPONSE the     | | payload with          apply for Charge
  | | Order {_id, ...} | | previous Order data   from Ping++ Server
  | |                  | |                           +
  v +                  v +                           |
+-------------------------------------+              |     +--------+
|                                     | STEP 5       |     |        |
|                  STEP 6             | +------------+---&amp;gt; |        |
|                                     | &amp;lt;----------------+ |        |
|                  get Charge data    |                    |        |
|                  from Ping++ Server | &amp;lt;----------------+ | Ping++ |
+---------------+                     | STEP 9             | Server |
|               |  RESPONSE to View   | (Async)            |        |
| RESTful Sever |                     |                    |        |
|               |                     | Webhook            |        |
| Cashier       |                     | POST notification  |        |
|               |                     | to RESTful server  |        |
+---------------+---------------------+                    +--------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;将购物流程一般化&quot;&gt;将购物流程一般化&lt;/h2&gt;

&lt;p&gt;上面的示意图流程，有两点要说明的：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;对于任何的支付流程，我们都可以尝试包装成上述的流程，比如在电子阅读平台，“支付并阅读”这个按钮，
是没有挑选商品到购物车流程的，我们可以将上述流程中的一系列变换为“包含一个元素的数组”。参考下面的
订单类的设计&lt;/li&gt;
  &lt;li&gt;RESTful Server可以按照功能，拆分成不同的服务，参考下面的收银微服务的设计&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;订单类的设计&quot;&gt;订单类的设计&lt;/h2&gt;

&lt;p&gt;目前在用的设计如下，只列出重要的属性（Property），从最上层订单类到所购商品：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;CartItem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CartItem&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;purchasedProducts&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;GenericProduct&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;quantity&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GenericProduct&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;productTitle&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;price&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Double&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;对于上面提到的“支付并阅读”这类的流程，
最终的&lt;code class=&quot;highlighter-rouge&quot;&gt;Order&lt;/code&gt;实例满足&lt;code class=&quot;highlighter-rouge&quot;&gt;cart&lt;/code&gt;数组只有一个元素：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;n&quot;&gt;singleItemOrder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;instanceOf&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;singleItemOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cart&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shoule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;设计可供集中收银的微服务&quot;&gt;设计可供集中收银的微服务&lt;/h1&gt;

&lt;h2 id=&quot;一个微服务并不是微服务&quot;&gt;一个微服务并不是微服务&lt;/h2&gt;

&lt;p&gt;一个微服务并不能形成一个完整的系统（应用），设计的收银台微服务，
还需要和其它模块、其它的微服务相互交互，就购物支付流程而言，我们至少还需要：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;基础服务，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;GET /products&lt;/code&gt;等基本信息&lt;/li&gt;
  &lt;li&gt;订单服务，用来生成订单编号、控制订单的状态等&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;收银中心的微服务设计&quot;&gt;收银中心的微服务设计&lt;/h2&gt;

&lt;h3 id=&quot;将原来的一个restful-server拆分成多个微服务&quot;&gt;将原来的一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful Server&lt;/code&gt;拆分成多个微服务&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+------------------------+          +-----------------------+
|                        |          |                       |
|  RESTful Server        |          |  RESTful Server       |
|                        |          |                       |
|  Static data           |          |  Order system         |
+------------------------+          +-----------------------+
 +                                   +  ^
 |                                   |  | STEP 2 &amp;amp; 3
 | STEP 1                            |  |
 | put product into cart             |  | apply an order
 |                                   |  |
 |                                   |  | RESPONSE the
 v                                   v  + Order {_id, ...}
+------------------------------------------+----------------+
|                                          |                |
|                                          |   Client Side  |
|                                          |                |
|                                          +----------------+
|    STEP 4                             STEP 7              | STEP 8
|                                       (Ping++ Client SDK) |         +--------+
|    use Order data                                         | finish  |        |
|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |
|                                       request a payment   | +-----&amp;gt; |        |
+-----------------------------------------------------------+         +--------+
  +  STEP 4              ^
  |                      |
  |  apply for Charge    |
  |                      |             STEP 5
  |  payload with        |             (Ping++ Server SDK)
  |  previous Order data |
  v                      +             apply for Charge
                                       from Ping++ Server
+-------------------------------------+                    +--------+
|                                     | +----------------&amp;gt; |        |
|                  STEP 6             | &amp;lt;----------------+ |        |
|                                     |                    |        |
|                  get Charge data    |                    |        |
|                  from Ping++ Server | &amp;lt;----------------+ | Ping++ |
+---------------+                     | STEP 9             | Server |
|               |  RESPONSE to View   | (Async)            |        |
| RESTful Sever |                     |                    |        |
|               |                     | Webhook            |        |
| Cashier       |                     | POST notification  |        |
|               |                     | to RESTful server  |        |
+---------------+---------------------+                    +--------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;集中收银台的设计图&quot;&gt;集中收银台的设计图&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;+------------------------+          +-----------------------+
|                        |          |                       |
|  RESTful Server        |          |  RESTful Server       |
|                        |          |                       |
|  Static data           |          |  Order system         |
+------------------------+          +-----------------------+
   +                                   +  ^
   |                                   |  | STEP 2 &amp;amp; 3
   | STEP 1                            |  |
   | put product into cart             |  | apply an order
   |                                   |  |
   |                                   |  | RESPONSE the
   v                                   v  + Order {_id, ...}
 +------------------------------------------+----------------+
 |                                          |                |
 |                                          |   Client Side  |
 |                                          |                |
 |                                          +----------------+
 |    STEP 4                             STEP 7              | STEP 8
 |                                       (Ping++ Client SDK) |         +--------+
 |    use Order data                                         | finish  |        |
 |    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |
 |                                       request a payment   | +-----&amp;gt; |        |
 +-----------------------------------------------------------+         +--------+
  +  STEP 4              ^
  |                      |
  |  apply for Charge    |
  |                      |             STEP 5
  |  payload with        |             (Ping++ Server SDK)
  |  previous Order data |
  v                      +             apply for Charge
                                       from Ping++ Server
+-------------------------------------+                    +--------+
|                                     | +----------------&amp;gt; |        |
|                  STEP 6             | &amp;lt;----------------+ |        |
|                                     |                    |        |
|                  get Charge data    |                    |        |
|                  from Ping++ Server | &amp;lt;----------------+ | Ping++ |
+---------------+                     | STEP 9             | Server |
|               |  RESPONSE to View   | (Async)            |        |
| RESTful Sever |                     |                    |        |
|               |                     | Webhook            |        |
| Cashier       |                     | POST notification  |        |
|               |                     | to RESTful server  |        |
+---------------+---------------------+                    +--------+
+  ^                            +  ^
|  |  apply for Charge          |  |  apply for Charge
|  |                            |  |
|  |  payload with              |  |  payload with
|  |  GenericOrder data         |  |  GenericOrder data
|  |                            |  |
v  +                            v  +
+---------+     +---------+     +---------+
|         |     |         |     |         |
| App 1   |     | App 2   |     | App 3   |
|         |     |         |     |         |
+---------+     +---------+     +---------+&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;收银台服务的restful-api设计&quot;&gt;收银台服务的&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;设计&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// STEP 4 apply for Charge data
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cashier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;charge&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;order:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Order&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// STEP 6
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RESPONSE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;data:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Ping++&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Charge&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;data&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// STEP 9
&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;POST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cashier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;webhook&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <link>https://scozv.github.io/blog/zh/pattern/2016/07/11/designing-cashier-microservice-with-ping-sdk</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2016/07/11/designing-cashier-microservice-with-ping-sdk</guid>
        <pubDate>2016-07-11T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>一套简洁的基于Git的线性分支管理工作流</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文受&lt;code class=&quot;highlighter-rouge&quot;&gt;GitFlow&lt;/code&gt; &lt;sup id=&quot;fnref:gitflow&quot;&gt;&lt;a href=&quot;#fn:gitflow&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 和&lt;code class=&quot;highlighter-rouge&quot;&gt;Anti-GitFlow&lt;/code&gt; &lt;sup id=&quot;fnref:gitflow_anti_01&quot;&gt;&lt;a href=&quot;#fn:gitflow_anti_01&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt; &lt;sup id=&quot;fnref:gitflow_anti_02&quot;&gt;&lt;a href=&quot;#fn:gitflow_anti_02&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;的启发，
并在使用了&lt;code class=&quot;highlighter-rouge&quot;&gt;GitFlow&lt;/code&gt;一段时间之后，提出了一套简洁的基于Git的线性分支管理工作流。
简洁不仅仅是命令接口（&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt;）的简单，同时也保证背后的分支简洁、线性。&lt;/p&gt;

  &lt;p&gt;本文还没有最终完成，&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt;接口还没有实现，同时，还有一些没有想明白的问题——文中会一一列明。&lt;/p&gt;

  &lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt;实现之前，我将继续使用&lt;code class=&quot;highlighter-rouge&quot;&gt;GitFlow&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#总体原则&quot; id=&quot;markdown-toc-总体原则&quot;&gt;总体原则&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#分支的最终效果图&quot; id=&quot;markdown-toc-分支的最终效果图&quot;&gt;分支的最终效果图&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gitl基于该工作流的接口设计&quot; id=&quot;markdown-toc-gitl基于该工作流的接口设计&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt;，基于该工作流的接口设计&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#gitl-develop-在master上面常规开发&quot; id=&quot;markdown-toc-gitl-develop-在master上面常规开发&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl develop&lt;/code&gt; 在master上面常规开发&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gitl-feature-处理实验性质的feature分支&quot; id=&quot;markdown-toc-gitl-feature-处理实验性质的feature分支&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl feature&lt;/code&gt; 处理实验性质的feature分支&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gitl-bugfix-在master或release分支上处理bugfix&quot; id=&quot;markdown-toc-gitl-bugfix-在master或release分支上处理bugfix&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl bugfix&lt;/code&gt; 在master或release分支上处理bugfix&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#gitl-release-准备release&quot; id=&quot;markdown-toc-gitl-release-准备release&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl release&lt;/code&gt; 准备release&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#基于git版本管理的几个开发场景&quot; id=&quot;markdown-toc-基于git版本管理的几个开发场景&quot;&gt;基于Git版本管理的几个开发场景&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#术语表&quot; id=&quot;markdown-toc-术语表&quot;&gt;术语表&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#场景描述&quot; id=&quot;markdown-toc-场景描述&quot;&gt;场景描述&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#在master上面常规开发&quot; id=&quot;markdown-toc-在master上面常规开发&quot;&gt;在master上面常规开发&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#开启实验性质的feature分支&quot; id=&quot;markdown-toc-开启实验性质的feature分支&quot;&gt;开启实验性质的feature分支&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#在master上面处理常规的bugfix&quot; id=&quot;markdown-toc-在master上面处理常规的bugfix&quot;&gt;在master上面处理常规的bugfix&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#public-release&quot; id=&quot;markdown-toc-public-release&quot;&gt;public release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#sprint-release&quot; id=&quot;markdown-toc-sprint-release&quot;&gt;sprint release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#bugfix-release&quot; id=&quot;markdown-toc-bugfix-release&quot;&gt;bugfix release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#特定版本的bugfix应用到master上面&quot; id=&quot;markdown-toc-特定版本的bugfix应用到master上面&quot;&gt;特定版本的bugfix应用到master上面&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#不同场景的原始git命令&quot; id=&quot;markdown-toc-不同场景的原始git命令&quot;&gt;不同场景的原始Git命令&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#在master上面常规开发-1&quot; id=&quot;markdown-toc-在master上面常规开发-1&quot;&gt;在master上面常规开发&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#开启实验性质的feature分支-1&quot; id=&quot;markdown-toc-开启实验性质的feature分支-1&quot;&gt;开启实验性质的feature分支&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#在master上面处理常规的bugfix-1&quot; id=&quot;markdown-toc-在master上面处理常规的bugfix-1&quot;&gt;在master上面处理常规的bugfix&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#public-release-1&quot; id=&quot;markdown-toc-public-release-1&quot;&gt;public release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#sprint-release-1&quot; id=&quot;markdown-toc-sprint-release-1&quot;&gt;sprint release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#bugfix-release-1&quot; id=&quot;markdown-toc-bugfix-release-1&quot;&gt;bugfix release&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#特定版本的bugfix应用到master上面-1&quot; id=&quot;markdown-toc-特定版本的bugfix应用到master上面-1&quot;&gt;特定版本的bugfix应用到master上面&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#gitflow-or-anti-gitflow&quot; id=&quot;markdown-toc-gitflow-or-anti-gitflow&quot;&gt;GitFlow or Anti-GitFlow&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#使用gitflow实现上述场景&quot; id=&quot;markdown-toc-使用gitflow实现上述场景&quot;&gt;使用GitFlow实现上述场景&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#为什么不使用gitflow&quot; id=&quot;markdown-toc-为什么不使用gitflow&quot;&gt;为什么不使用GitFlow&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#和ci集成&quot; id=&quot;markdown-toc-和ci集成&quot;&gt;和CI集成&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#提交并测试&quot; id=&quot;markdown-toc-提交并测试&quot;&gt;提交并测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#提交并发布&quot; id=&quot;markdown-toc-提交并发布&quot;&gt;提交并发布&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#后续&quot; id=&quot;markdown-toc-后续&quot;&gt;后续&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;总体原则&quot;&gt;总体原则&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;工作流背后的分支管理简洁明了&lt;/li&gt;
  &lt;li&gt;设计一个可在团队中使用的tool或者命令行&lt;/li&gt;
  &lt;li&gt;该命令行的接口简单&lt;/li&gt;
  &lt;li&gt;文章中提到的release，不包括release的配置文件&lt;/li&gt;
  &lt;li&gt;该工作流包含了一套默认的版本命名规则，这样命令行的接口不需要手动指定版本&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;分支的最终效果图&quot;&gt;分支的最终效果图&lt;/h1&gt;

&lt;p&gt;我们想实现的版本管理效果如图，右边同步的一个分支&lt;code class=&quot;highlighter-rouge&quot;&gt;/release/3.2.0&lt;/code&gt;叫做&lt;code class=&quot;highlighter-rouge&quot;&gt;sprint release&lt;/code&gt;
（见 &lt;strong&gt;术语&lt;/strong&gt; 中对此的解释），
在将来的讨论中，可能会取消这个分支：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;                             ^
                             |
                             |
                             |                    
                             |
                             |                                                ^
      ^   OR abort feature   |                                                |
      | XXXXXXXXXXXXXXXXXXX&amp;gt; |                                                |
      |                      |                                                |
      |                      |  /release/3.0.0                                |
      |                      +-------------------&amp;gt;                            |
      |                      |                                                |
      |                      |                                                |
      |  /feature/JIRA-404   |                                                |
      +----------------------+                                                |
                             |                                                |
                             |             /release/2.0.1                     |
                             |                   ^                            |
                             |                   |                            |
                             |                   |                            |
                             |                   |                            |
                             |                   | bugfix                     |
                             |                   | on /2.0.0                  |
      ^   accept feature     |                   | release                    |
      | +------------------&amp;gt; |                   |                            |
      |                      |  /release/2.0.0   |                            |
      |                      +-------------------+                            |
      |                      |                                                |
      |  /feature/JIRA-200   |                                                |
      +----------------------+                                                |
                             |                                                |
                             |                                                |
                             |                                                |
                             |                                                |
                             |  /release/1.0.0                                |
                             +-------------------+                            +

                          /master                                 /release/3.2.0
                                                            [will explain later]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;gitl基于该工作流的接口设计&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl&lt;/code&gt;，基于该工作流的接口设计&lt;/h1&gt;

&lt;p&gt;计划用gitl命名上述工作流，接口如下，参考了&lt;code class=&quot;highlighter-rouge&quot;&gt;GitFlow&lt;/code&gt;的接口风格。&lt;/p&gt;

&lt;p&gt;未来实现该接口之后，将会开源。&lt;/p&gt;

&lt;h2 id=&quot;gitl-develop-在master上面常规开发&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl develop&lt;/code&gt; 在master上面常规开发&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gitl develop &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; nil | start &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;gitl-feature-处理实验性质的feature分支&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl feature&lt;/code&gt; 处理实验性质的feature分支&lt;/h2&gt;

&lt;p&gt;定义了开始、放弃和接受feature。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gitl feature start &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;feature_name] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; master | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;branch_based_on] &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
gitl feature abort &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;feature_name]
gitl feature finish &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;feature_name]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;gitl-bugfix-在master或release分支上处理bugfix&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl bugfix&lt;/code&gt; 在master或release分支上处理bugfix&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gitl bugfix start &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bugfix_name] &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; master | &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;branch_based_on] &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
gitl bugfix abort &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bugfix_name]
gitl bugfix finish &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bugfix_name]&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;gitl-release-准备release&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitl release&lt;/code&gt; 准备release&lt;/h2&gt;

&lt;p&gt;该接口需要控制权限。&lt;/p&gt;

&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;[release_number]&lt;/code&gt;为空，则基于默认的版本命名规则。&lt;/p&gt;

&lt;p&gt;不建议传递版本编号，建议使用默认的版本命名规则。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gitl release &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; -P | -S | -B &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; start &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release_number] &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
gitl release &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; -P | -S | -B &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; abort &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release_number] &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
gitl release &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; -P | -S | -B &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; finish &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;release_number] &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;基于git版本管理的几个开发场景&quot;&gt;基于Git版本管理的几个开发场景&lt;/h1&gt;

&lt;h2 id=&quot;术语表&quot;&gt;术语表&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;center-repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;用作发布的中心源代码库，一般会被&lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;。
中心库的管理比较严格，通常不接受代码提交，只接受代码的合并（PR Merge）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;fork-repo&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每一个开发人员从中心库&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;那边&lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;代码。&lt;/p&gt;

&lt;p&gt;可以尝试建立两个&lt;code class=&quot;highlighter-rouge&quot;&gt;remote&lt;/code&gt;：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;origin&lt;/code&gt;，默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;地址；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center&lt;/code&gt;，中心库的地址，用于将中心库的更新&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;到开发人员的&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;上面&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;三种release&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;可能采取的版本管理（三位版本），从左到右：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;首位表示阶段开发任务的完成，周期一般为两到三个月，该发布可作public release；&lt;/li&gt;
  &lt;li&gt;次位表示迭代（sprint）的末尾发布，用作内部演示&lt;/li&gt;
  &lt;li&gt;末尾表示发布之后的特定版本的bugfix，通常只有public release的版本才会出现bugfix。
迭代中发现的internal defect，会在下一个迭代中修复。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们将三位版本号，从左到右，分别对应三种release：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public release，对应首位版本号，源代码中保留&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;，并记录&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;sprint release，对应次位版本号，源代码中不保留&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;，只记录&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，
将版本号作为新的&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;名称，删除上一个&lt;code class=&quot;highlighter-rouge&quot;&gt;public release&lt;/code&gt;的分支，同时记录&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于各自的分支而言（待完善，通过图形来表示，见笔记本）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public release，源代码中保留&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;，不合并到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;，该分支只保留bump version等信息&lt;/li&gt;
  &lt;li&gt;sprint release，源代码中只保留一个sprint release分支，master的迭代更改，将&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;到这个分支上面&lt;/li&gt;
  &lt;li&gt;bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，
将版本号作为新的&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;名称，删除上一个&lt;code class=&quot;highlighter-rouge&quot;&gt;public release&lt;/code&gt;的分支，同时记录&lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;场景描述&quot;&gt;场景描述&lt;/h2&gt;

&lt;p&gt;具体而言，有如下的几个场景：&lt;/p&gt;

&lt;h3 id=&quot;在master上面常规开发&quot;&gt;在master上面常规开发&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;开发人员在各自的&lt;code class=&quot;highlighter-rouge&quot;&gt;fork－repo&lt;/code&gt;上面提交代码，关联JIRA ticket&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;开启实验性质的feature分支&quot;&gt;开启实验性质的feature分支&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认基于&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;上开启分支，可用&lt;code class=&quot;highlighter-rouge&quot;&gt;feature/JIRA-404&lt;/code&gt;命名，或者&lt;/li&gt;
  &lt;li&gt;开发人员在各自的&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;上开启分支，之后&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;feature的最终阶段，可以接受或者放弃该分支&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果放弃feature：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;各个&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;就该分支&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;合并各个&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo/feature/JIRA-404&lt;/code&gt;设置为只读，或者不再接受&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt; （可选）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果接受feature：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;各个&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;就该分支&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;到&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;合并各个&lt;code class=&quot;highlighter-rouge&quot;&gt;PR&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;合并当前feature到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;合并节点标记&lt;code class=&quot;highlighter-rouge&quot;&gt;tag&lt;/code&gt;，同&lt;code class=&quot;highlighter-rouge&quot;&gt;branch&lt;/code&gt;名称一致&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;删除当前分支&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;在master上面处理常规的bugfix&quot;&gt;在master上面处理常规的bugfix&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;默认基于&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;某位开发在自己的&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;上面开启bugfix分支，以&lt;code class=&quot;highlighter-rouge&quot;&gt;bugfix/JIRA-404&lt;/code&gt;格式命名&lt;/li&gt;
  &lt;li&gt;完成修复之后&lt;/li&gt;
  &lt;li&gt;合并bugfix分支到&lt;code class=&quot;highlighter-rouge&quot;&gt;fork-repo&lt;/code&gt;的master上面， 删除本地的 bugfix分支&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;public-release&quot;&gt;public release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;  step 1                                  step 2

    ^                                       ^
    |                                       |
    |                                       |
    |                                       |
    |                                       |
    |                                       |
    |                                       | rebase back
    |             ^                         | to master   ^
    |             |                         | &amp;lt;-----------# tag n.0.0
    |             # release                 |             |
    |             |                         |             |
    |             |                         |             |
    |             |                         |             |
    |             # bump version            |             # bump version
    |             |                         |             |
    |             |                         |             |
    +-------------+                         +-------------+
    |                                       |
    |      /release/n.0.0                   |      /release/n.0.0
    |                                       |
    |                                       |
    |                                       |
    |                                       |
    |                                       |
    |                                       |
    +                                       +

 /master                                 /master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们保留每一个public release的分支，具体步骤为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认基于&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;上开启分支，以待发布版本编号命名分支&lt;/li&gt;
  &lt;li&gt;bump version，更新ChangeLog&lt;/li&gt;
  &lt;li&gt;发布，并测试&lt;/li&gt;
  &lt;li&gt;使用tag标记版本，以版本编号为tag命名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;将当前release更改rebase到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;保留release分支&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;sprint-release&quot;&gt;sprint release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;step 1                       step 2                       step 3

  ^                            ^                            ^
  |                            |                            | rebase back
  |                            |             ^              | to master   ^
  |                            |             |              | &amp;lt;----------+# tag n. m+1 .0
  |                            |             |              |             |
  | rebase to                  |             # bump         |             # bump version
  | sprint release             |             |              |             |
  |             ^              |  ^          |              |             |
  | +---------&amp;gt; |              |  +----------+              |             |
  |             |              |  | /release/n.m+1.0        |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  +-------------+              +--+                         +-------------+
  |  /release/n.m.0            | /n.m.0                     |     /release/n. m+1 .0
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  +                            +                            +

/master                      /master                      /master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;我们只保留一个sprint release的分支，具体步骤为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将master的更改rebase到上一个sprint release分支，比如release/n.m.0&lt;/li&gt;
  &lt;li&gt;基于release/n.m.0，创建分支release/n.m+1.0&lt;/li&gt;
  &lt;li&gt;在新分支上面，bump version等&lt;/li&gt;
  &lt;li&gt;发布，并测试&lt;/li&gt;
  &lt;li&gt;使用tag标记版本，以版本编号为tag命名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;将当前release更改rebase到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.m.0&lt;/code&gt;分支&lt;/li&gt;
  &lt;li&gt;保留&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.m+1.0&lt;/code&gt;分支&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sprint release分支，是分别命名，还是统一命名为&lt;code class=&quot;highlighter-rouge&quot;&gt;release/sprint&lt;/code&gt;——待定。&lt;/p&gt;

&lt;h3 id=&quot;bugfix-release&quot;&gt;bugfix release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-raw&quot; data-lang=&quot;raw&quot;&gt;step 1                       step 2                       step 3

  ^                            ^                            ^
  |                            |                            | rebase back
  |                            |             ^              | to master   ^
  |                            |             |              | &amp;lt;----------+# tag n.0.k+1
  | bugfix release             |             |              |             |
  | is ONLY for                |             # bump         |             # bump version
  | public release             |             |              |             |
  |             ^              |  ^          |              |             |
  | +---------&amp;gt; |              |  +----------+              |             |
  |             |              |  | /release/n.0.k+1        |             |
  |             |              |  |                         |             |
  |             |              |  |                         |             |
  |             |              |  # bugfix 2                |             # bugfix 2
  |             |              |  |                         |             |
  |             |              |  # bugfix 1                |             # bugfix 1
  |             |              |  |                         |             |
  +-------------+              +--+                         +-------------+
  |  /release/n.0.k            | /n.0.k                     |     /release/n.0.k+1
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  |                            |                            |
  +                            +                            +

/master                      /master                      /master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;仅在public release的版本上做特定的bugfix，具体步骤为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;默认基于特定的public release分支&lt;/li&gt;
  &lt;li&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;上开启bugfix分支，以JIRA编号命名分支，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;bugfix/JIRA-404&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;测试，并确认bugfix状态&lt;/li&gt;
  &lt;li&gt;合并bugfix分支到特定的&lt;code class=&quot;highlighter-rouge&quot;&gt;release&lt;/code&gt;分支， 删除bugfix分支&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;切换到特定的release版本，令其为&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.0.k&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;注意：此时的release的&lt;code class=&quot;highlighter-rouge&quot;&gt;HEAD&lt;/code&gt;已经包含了，该特定分支上作过的bugfix了&lt;/li&gt;
  &lt;li&gt;基于原有的release，创建下一个发布的分支，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.0.k+1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;bump version，更新ChangeLog&lt;/li&gt;
  &lt;li&gt;发布，并测试&lt;/li&gt;
  &lt;li&gt;使用tag标记版本，以版本编号为tag命名&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;center-repo&lt;/code&gt;将当前release更改rebase到&lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.0.k&lt;/code&gt;分支&lt;/li&gt;
  &lt;li&gt;保留&lt;code class=&quot;highlighter-rouge&quot;&gt;release/n.0.k+1&lt;/code&gt;分支&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;特定版本的bugfix应用到master上面&quot;&gt;特定版本的bugfix应用到master上面&lt;/h3&gt;

&lt;p&gt;需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。&lt;/p&gt;

&lt;h2 id=&quot;不同场景的原始git命令&quot;&gt;不同场景的原始Git命令&lt;/h2&gt;

&lt;h3 id=&quot;在master上面常规开发-1&quot;&gt;在master上面常规开发&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
&lt;span class=&quot;c&quot;&gt;# coding&lt;/span&gt;
git commit -avm &lt;span class=&quot;s1&quot;&gt;'JIRA-404 regular development'&lt;/span&gt;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;开启实验性质的feature分支-1&quot;&gt;开启实验性质的feature分支&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git branch feature/JIRA-404
git checkout feature/JIRA-404
&lt;span class=&quot;c&quot;&gt;# coding&lt;/span&gt;
git commit -avm &lt;span class=&quot;s1&quot;&gt;'JIRA-404 feature development'&lt;/span&gt;
git push
&lt;span class=&quot;c&quot;&gt;# git push --set-upstream origin feature/JIRA-404&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果放弃feature：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 各个`fork-repo`就该分支`PR`到`center-repo`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `center-repo`合并各个`PR`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果接受feature：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 各个`fork-repo`就该分支`PR`到`center-repo`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# `center-repo`合并各个`PR`&lt;/span&gt;
git checkout master
git merge -m &lt;span class=&quot;s1&quot;&gt;'JIRA-404 accept feature'&lt;/span&gt; feature/JIRA-404
git tag -a feature/JIRA-404 -m &lt;span class=&quot;s1&quot;&gt;'JIRA-404 brief description of this feature'&lt;/span&gt;
git branch -d feature/JIRA-404
git push origin :feature/JIRA-404&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;在master上面处理常规的bugfix-1&quot;&gt;在master上面处理常规的bugfix&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 默认基于`master`&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 完成修复之后&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 合并bugfix分支到`fork-repo`的master上面， 删除本地的bugfix分支&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;public-release-1&quot;&gt;public release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout master
git branch release/n.m.0
git checkout release/n.m.0
&lt;span class=&quot;c&quot;&gt;# bump version, update ChangeLog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# publi.sh&lt;/span&gt;
git commit -avm &lt;span class=&quot;s1&quot;&gt;'JIRA-404 description of n.m.0'&lt;/span&gt;
git tag -a n.m.0 -m &lt;span class=&quot;s1&quot;&gt;'JIRA-404 release of n.m.0'&lt;/span&gt;
git checkout master
git rebase release/n.m.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;sprint-release-1&quot;&gt;sprint release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout release/n.m.0
git rebase master
git branch release/n.m+1.0
git checkout release/n.m+1.0
&lt;span class=&quot;c&quot;&gt;# bump version, update ChangeLog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# publi.sh&lt;/span&gt;
git commit -avm &lt;span class=&quot;s1&quot;&gt;'JIRA-404 description of n.m+1.0'&lt;/span&gt;
git tag -a n.m+1.0 -m &lt;span class=&quot;s1&quot;&gt;'JIRA-404 release of n.m.0'&lt;/span&gt;
git checkout master
git rebase release/n.m+1.0
git branch -d release/n.m.0
git push origin :release/n.m.0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;bugfix-release-1&quot;&gt;bugfix release&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout release/n.m.k
git branch bugfix/JIRA-404
git checkout bugfix/JIRA-404
&lt;span class=&quot;c&quot;&gt;# fix and test&lt;/span&gt;
git checkout release/n.m.k
git merge bugfix/JIRA-404
git branch -d bugfix/JIRA-404
git push origin :bugfix/JIRA-404&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git checkout release/n.0.k
git branch release/n.0.k+1
git checkout release/n.0.k+1
&lt;span class=&quot;c&quot;&gt;# bump version, update ChangeLog&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# publi.sh&lt;/span&gt;
git commit -avm &lt;span class=&quot;s1&quot;&gt;'JIRA-404 description of n.0.k+1'&lt;/span&gt;
git tag -a n.0.k+1 -m &lt;span class=&quot;s1&quot;&gt;'JIRA-404 release of n.0.k+1'&lt;/span&gt;
git checkout master
git rebase release/n.0.k+1
git branch -d release/n.0.k
git push origin :release/n.0.k&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;特定版本的bugfix应用到master上面-1&quot;&gt;特定版本的bugfix应用到master上面&lt;/h3&gt;

&lt;p&gt;需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。&lt;/p&gt;

&lt;h1 id=&quot;gitflow-or-anti-gitflow&quot;&gt;GitFlow or Anti-GitFlow&lt;/h1&gt;

&lt;h2 id=&quot;使用gitflow实现上述场景&quot;&gt;使用GitFlow实现上述场景&lt;/h2&gt;

&lt;h2 id=&quot;为什么不使用gitflow&quot;&gt;为什么不使用GitFlow&lt;/h2&gt;

&lt;h1 id=&quot;和ci集成&quot;&gt;和CI集成&lt;/h1&gt;

&lt;h2 id=&quot;提交并测试&quot;&gt;提交并测试&lt;/h2&gt;

&lt;h2 id=&quot;提交并发布&quot;&gt;提交并发布&lt;/h2&gt;

&lt;h1 id=&quot;后续&quot;&gt;后续&lt;/h1&gt;

&lt;p&gt;这些问题还需要继续思考：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;微服务架构下面，各个服务节点都这样控制分支和版本吗，是否繁琐？&lt;/li&gt;
  &lt;li&gt;本文在未来的实践过程中，可能会更改。&lt;/li&gt;
  &lt;li&gt;本文提到的工作流，是否和&lt;code class=&quot;highlighter-rouge&quot;&gt;fork&lt;/code&gt;冲突，参考Atlassian的 &lt;em&gt;Comparing Workflows&lt;/em&gt; &lt;sup id=&quot;fnref:atl_comp_workf&quot;&gt;&lt;a href=&quot;#fn:atl_comp_workf&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt; ？&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:gitflow&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;A successful Git branching model&lt;/a&gt; by Vincent Driessen, Jan 05, 2010&amp;nbsp;&lt;a href=&quot;#fnref:gitflow&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gitflow_anti_01&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://endoflineblog.com/gitflow-considered-harmful&quot;&gt;GitFlow considered harmful&lt;/a&gt; by Adam Ruka, May 03, 2015&amp;nbsp;&lt;a href=&quot;#fnref:gitflow_anti_01&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gitflow_anti_02&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://endoflineblog.com/follow-up-to-gitflow-considered-harmful&quot;&gt;Follow-up to ‘GitFlow considered harmful’&lt;/a&gt; by Adam Ruka, Jun 20, 2015&amp;nbsp;&lt;a href=&quot;#fnref:gitflow_anti_02&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:atl_comp_workf&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows/&quot;&gt;Comparing Workflows&lt;/a&gt; by Atlassian&amp;nbsp;&lt;a href=&quot;#fnref:atl_comp_workf&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git</guid>
        <pubDate>2016-05-18T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>基于低耦合和持续集成的Web架构</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文将要解释，我目前以及未来在项目中，将会一直实践的两个概念：低耦合与持续集成。&lt;/p&gt;

  &lt;p&gt;本文还没有完全地写完。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#两个核心概念低耦合与持续集成&quot; id=&quot;markdown-toc-两个核心概念低耦合与持续集成&quot;&gt;两个核心概念：低耦合与持续集成&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#完全独立的低耦合&quot; id=&quot;markdown-toc-完全独立的低耦合&quot;&gt;完全独立的低耦合&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#节点的定义&quot; id=&quot;markdown-toc-节点的定义&quot;&gt;节点的定义&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#独立的server&quot; id=&quot;markdown-toc-独立的server&quot;&gt;独立的Server&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#独立的view&quot; id=&quot;markdown-toc-独立的view&quot;&gt;独立的View&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#各个独立部分的测试&quot; id=&quot;markdown-toc-各个独立部分的测试&quot;&gt;各个独立部分的测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#独立节点的交互&quot; id=&quot;markdown-toc-独立节点的交互&quot;&gt;独立节点的交互&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#独立的程度&quot; id=&quot;markdown-toc-独立的程度&quot;&gt;独立的程度&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#独立与集成&quot; id=&quot;markdown-toc-独立与集成&quot;&gt;独立与集成&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#低耦合与持续集成之间的矛盾&quot; id=&quot;markdown-toc-低耦合与持续集成之间的矛盾&quot;&gt;低耦合与持续集成之间的矛盾&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#构造多个独立节点协调性的测试方案&quot; id=&quot;markdown-toc-构造多个独立节点协调性的测试方案&quot;&gt;构造多个独立节点协调性的测试方案&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#完备的持续集成&quot; id=&quot;markdown-toc-完备的持续集成&quot;&gt;完备的持续集成&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#独立节点的完备测试&quot; id=&quot;markdown-toc-独立节点的完备测试&quot;&gt;独立节点的完备测试&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#持续的代码提交流程&quot; id=&quot;markdown-toc-持续的代码提交流程&quot;&gt;持续的代码提交流程&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#持续的发布流程&quot; id=&quot;markdown-toc-持续的发布流程&quot;&gt;持续的发布流程&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#抽象的概念应该先于具体的技术实现&quot; id=&quot;markdown-toc-抽象的概念应该先于具体的技术实现&quot;&gt;抽象的概念应该先于具体的技术实现&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#技术是一个工具&quot; id=&quot;markdown-toc-技术是一个工具&quot;&gt;技术是一个工具&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#在低耦合节点中更换技术&quot; id=&quot;markdown-toc-在低耦合节点中更换技术&quot;&gt;在低耦合节点中更换技术&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#持续集成保证低耦合节点的交互&quot; id=&quot;markdown-toc-持续集成保证低耦合节点的交互&quot;&gt;持续集成保证低耦合节点的交互&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;两个核心概念低耦合与持续集成&quot;&gt;两个核心概念：低耦合与持续集成&lt;/h1&gt;

&lt;p&gt;低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，
会应用，而且必须应用的两个核心概念。&lt;/p&gt;

&lt;p&gt;简单地讲：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;低耦合：将系统中的各个&lt;strong&gt;节点&lt;/strong&gt;（参看术语），分别独立起来，相互之间无所依赖，
不需要关心对方的具体实现方式&lt;/li&gt;
  &lt;li&gt;持续集成：节点相互独立之后，如何保证：
    &lt;ol&gt;
      &lt;li&gt;各个节点本身的功能正常&lt;/li&gt;
      &lt;li&gt;（系统全局而言）节点之间如何交互，进而协同工作&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;完全独立的低耦合&quot;&gt;完全独立的低耦合&lt;/h1&gt;

&lt;h2 id=&quot;节点的定义&quot;&gt;节点的定义&lt;/h2&gt;

&lt;p&gt;为了便于阅读，我将定义“节点”这个概念：&lt;/p&gt;

&lt;p&gt;节点可以是一个抽象的概念，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;；
节点也可以是一个物理的部署，比如一个物理部署的数据库服务。&lt;/p&gt;

&lt;p&gt;节点的封装，没有固定的模式，主要取决于系统层面的宏观考量（后面的章节会详细阐述）。
比如，就&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;的三个部分而言，我们可以：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;整体放到一个节点中去实现，比如利用&lt;code class=&quot;highlighter-rouge&quot;&gt;ASP .NET MVC&lt;/code&gt;，将数据库和整个Web服务部署在一起；&lt;/li&gt;
  &lt;li&gt;将&lt;code class=&quot;highlighter-rouge&quot;&gt;MC&lt;/code&gt;和数据库放到一个节点中去，将视图&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;放到另外的节点。
前面的那个节点，可以做成&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;，后面的那个节点，可以用静态页面，或者移动&lt;code class=&quot;highlighter-rouge&quot;&gt;App&lt;/code&gt;来绘制；&lt;/li&gt;
  &lt;li&gt;我们还可以将数据库独立成第三个节点，比如购买一个&lt;code class=&quot;highlighter-rouge&quot;&gt;PaaS&lt;/code&gt;的数据库实例；&lt;/li&gt;
  &lt;li&gt;我们还可以将数据库拆分为二，一个数据库节点用来存储核心数据，另外一个用来存储用户行为分析的数据；&lt;/li&gt;
  &lt;li&gt;我们甚至可以将用户行为分析的数据库和&lt;code class=&quot;highlighter-rouge&quot;&gt;View&lt;/code&gt;组成一个节点。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上节点的封装，如下图所示：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;####################################  scenario 01, entire node

+------------+              +-----------------+
| you and me |              | IIS / tomcat    |
| Chromium   +------------&amp;gt; | ASP .NET MVC    |
|            |              | Database        |
| mobile     |              |                 |
| device     |              |                 |
+------------+              +-----------------+


####################################  scenario 02, separating View from MV+C

+------------+              +-----------------+                      +--------------------+
| you and me |              | View            |    HTTP Request      | RESTful API        |
| Chromium   +------------&amp;gt; | React.js        +--------------------&amp;gt; | http://spray.io/   |
|            |              | static HTML page|                      |                    |
| mobile     |              | mobile App      |                      | Database           |
| device     |              |                 |                      |                    |
|            |              |                 | &amp;lt;--------------------+                    |
+------------+              +-----------------+    HTTP Response     +--------------------+


####################################  scenario 03, separating Database from MV

+------------+              +-----------------+                      +--------------------+
| you and me |              | View            |    HTTP Request      | RESTful API        |
| Chromium   +------------&amp;gt; | React.js        +--------------------&amp;gt; | http://spray.io/   |
|            |              | static HTML page|                      |                    |
| mobile     |              | mobile App      |                      |                    |
| device     |              |                 |                      |                    |
|            |              |                 | &amp;lt;--------------------+                    |
+------------+              +-----------------+    HTTP Response     +-+------------------+
                                                                       |
                                                                       |  connection
                                                                       |  string
                                                                       |
                                                                       |
                                                                     +-+------------------+
                                                                     | PaaS               |
                                                                     | Database+aaS       |
                                                                     |                    |
                                                                     |                    |
                                                                     |                    |
                                                                     |                    |
                                                                     +--------------------+




####################################  scenario 04, multiple Databases


                                                                      +--------------------+
                                                                      | PaaS               |
                                                                      | Database+aaS       |
                                                                      |                    |
                                                                      | Core Business      |
                                                                      |                    |
                                                                      |                    |
                                                                      +-+------------------+
                                                                        |
                                                                        | connection
                                                                        | string
                                                                        |
                                                                        |
 +-------------+             +-----------------+                      +-+------------------+
 | you and me  |             | View            |    HTTP Request      | RESTful API        |
 | Chromium    +-----------&amp;gt; | React.js        +--------------------&amp;gt; | http://spray.io/   |
 |             |             | static HTML page|                      |                    |
 | mobile      |             | mobile App      |                      |                    |
 | device      |             |                 |                      |                    |
 |             |             |                 | &amp;lt;--------------------+                    |
 +-------------+             +-----------------+    HTTP Response     +-+------------------+
                                                                        |
                                                                        | connection
                                                                        | string
                                                                        |
                                                                        |
                                                                      +-+------------------+
                                                                      | PaaS               |
                                                                      | Database+aaS       |
                                                                      |                    |
                                                                      | user-agent data    |
                                                                      |                    |
                                                                      |                    |
                                                                      +--------------------+




 ####################################  scenario 05, separating and combination

 +------------+              +-----------------+                      +--------------------+
 | you and me |              | View            |    HTTP Request      | RESTful API        |
 | Chromium   +------------&amp;gt; | React.js        +--------------------&amp;gt; | http://spray.io/   |
 |            |              | static HTML page|                      |                    |
 | mobile     |              | mobile App      |                      |                    |
 | device     |              |                 |                      |                    |
 |            |              |                 | &amp;lt;--------------------+                    |
 +------------+              +-----------------+    HTTP Response     +-+------------------+
                             | Database        |                        |
                             |                 |                        | connection
                             | user-agent data |                        | string
                             |                 |                        |
                             |                 |                        |
                             |                 |                        |
                             +-----------------+                      +-+-------------------+
                                                                      | PaaS                |
                                                                      | Database+aaS        |
                                                                      |                     |
                                                                      | Core Business       |
                                                                      |                     |
                                                                      |                     |
                                                                      +---------------------+
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;独立的server&quot;&gt;独立的Server&lt;/h2&gt;

&lt;p&gt;我们将业务的处理，独立成一个&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Server&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;独立的view&quot;&gt;独立的View&lt;/h2&gt;

&lt;p&gt;我们将用户页面的展示独立出来。&lt;/p&gt;

&lt;h2 id=&quot;各个独立部分的测试&quot;&gt;各个独立部分的测试&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的测试可以&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt; 一系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Request&lt;/code&gt;进行，从而
不依赖于用户页面的实现方式。&lt;/p&gt;

&lt;p&gt;反之，用户页面的测试，可以&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt;  一系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Response&lt;/code&gt;，从而不依赖于服务的实现方式。&lt;/p&gt;

&lt;h2 id=&quot;独立节点的交互&quot;&gt;独立节点的交互&lt;/h2&gt;

&lt;p&gt;不同节点的交互，需要有一个统一的接口文档，比如一份&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的接口文档。
每一个接口需要指定如下的接口信息：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;HTTP Method，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;GET&lt;/code&gt;、 &lt;code class=&quot;highlighter-rouge&quot;&gt;POST&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE&lt;/code&gt; 、&lt;code class=&quot;highlighter-rouge&quot;&gt;PUT&lt;/code&gt;等&lt;/li&gt;
  &lt;li&gt;URL&lt;/li&gt;
  &lt;li&gt;Payload ，需要传递给Server的数据，&lt;/li&gt;
  &lt;li&gt;HTTP Response，返回给Client的数据&lt;/li&gt;
  &lt;li&gt;HTTP Header，可选&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接口文档是不同节点交互的唯一桥梁，节点之间不需要了解对方节点具体实现的细节。&lt;/p&gt;

&lt;h2 id=&quot;独立的程度&quot;&gt;独立的程度&lt;/h2&gt;

&lt;p&gt;节点的独立程度，取决于系统整体的考量，从上面的几个scenario可以看出，
我们既可以把数据库放在某一个节点之内，也可以把他独立出来。&lt;/p&gt;

&lt;h1 id=&quot;独立与集成&quot;&gt;独立与集成&lt;/h1&gt;

&lt;h2 id=&quot;低耦合与持续集成之间的矛盾&quot;&gt;低耦合与持续集成之间的矛盾&lt;/h2&gt;

&lt;p&gt;低耦合将节点独立开来，为了让节点之间能够协同工作，
我们需要保证：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;节点本身是功能正常的&lt;/li&gt;
  &lt;li&gt;节点完全参照接口文档&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;构造多个独立节点协调性的测试方案&quot;&gt;构造多个独立节点协调性的测试方案&lt;/h2&gt;

&lt;p&gt;参照接口文档，各个节点可以&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt;需要获得的数据，比如，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;的测试可以&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt; 一系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Request&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;View的测试，可以&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt;  一系列的&lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP Response&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;完备的持续集成&quot;&gt;完备的持续集成&lt;/h1&gt;

&lt;h2 id=&quot;独立节点的完备测试&quot;&gt;独立节点的完备测试&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration&quot;&gt;之前的文章&lt;/a&gt;中也提到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需要完成单元测试&lt;/li&gt;
  &lt;li&gt;需要&lt;code class=&quot;highlighter-rouge&quot;&gt;mock&lt;/code&gt;，从而完成一系列的BDD测试&lt;/li&gt;
  &lt;li&gt;核心建模的测试覆盖率需要达到100%&lt;/li&gt;
  &lt;li&gt;尽可能地引入UI测试&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;持续的代码提交流程&quot;&gt;持续的代码提交流程&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration&quot;&gt;之前的文章&lt;/a&gt;中也提到：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;commit 和 issue需要相互关联，以便追溯&lt;/li&gt;
  &lt;li&gt;关闭的issue，不再接受commit&lt;/li&gt;
  &lt;li&gt;每一次commit，需要被测试验证&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;持续的发布流程&quot;&gt;持续的发布流程&lt;/h2&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;

&lt;h2 id=&quot;抽象的概念应该先于具体的技术实现&quot;&gt;抽象的概念应该先于具体的技术实现&lt;/h2&gt;

&lt;p&gt;当我们提到&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;的时候，不能一味的把&lt;code class=&quot;highlighter-rouge&quot;&gt;MVC&lt;/code&gt;看成一个不可分割的整体。这三个字母只是一个概念。&lt;/p&gt;

&lt;p&gt;具体的技术实现是在其之后的。如果将具体的技术实现放到第一位，往往会限制我们的思想。&lt;/p&gt;

&lt;h2 id=&quot;技术是一个工具&quot;&gt;技术是一个工具&lt;/h2&gt;

&lt;p&gt;就如设计模式和语言没有什么关系一样（&lt;a href=&quot;http://coolshell.cn/articles/8961.html&quot;&gt;参考文章&lt;/a&gt;），
技术也是概念的一个实现。&lt;/p&gt;

&lt;p&gt;当然，技术作为工具，在实现某一个抽象的概念的时候，有的可以更加便利的实现。&lt;/p&gt;

&lt;h2 id=&quot;在低耦合节点中更换技术&quot;&gt;在低耦合节点中更换技术&lt;/h2&gt;

&lt;p&gt;独立的节点，允许，节点本身更换，具体的技术，因为，对于其它节点而言，本身只需要按照接口文档去实现就好了。&lt;/p&gt;

&lt;h2 id=&quot;持续集成保证低耦合节点的交互&quot;&gt;持续集成保证低耦合节点的交互&lt;/h2&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2016/05/05/a-low-coupling-architecture-of-the-web-solution-with-continuous-integration</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2016/05/05/a-low-coupling-architecture-of-the-web-solution-with-continuous-integration</guid>
        <pubDate>2016-05-05T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>Bitbucket Cloud的Issue至JIRA Server的完全迁移指南</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文给出Bitbucket Cloud的Issue系统至JIRA Server的完整迁移方案，包括:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;Issue的导入；&lt;/li&gt;
    &lt;li&gt;Bitbucket和JIRA的双向关联；&lt;/li&gt;
    &lt;li&gt;修订历史的Git提交记录，从而与JIRA关联&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;如下话题，本文不作解释:&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;为什么是JIRA；&lt;/li&gt;
    &lt;li&gt;为什么用Bitbucket；&lt;/li&gt;
    &lt;li&gt;为什么我只用Ubuntu 14.04 Server操作系统&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;完整的迁移方案和迁移脚本，需要阅读英文版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;项目架构的两个核心思想&quot;&gt;项目架构的两个核心思想&lt;/h1&gt;

&lt;p&gt;低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，
会应用，而且必须应用的两个核心概念。&lt;/p&gt;

&lt;p&gt;我在另外一篇文章里面会更详细的解释这两个思想。&lt;/p&gt;

&lt;h2 id=&quot;低耦合的原则&quot;&gt;低耦合的原则&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;将项目分割成相互独立的节点&lt;/li&gt;
  &lt;li&gt;每一个节点是独立的源代码库&lt;/li&gt;
  &lt;li&gt;节点的交互只能通过接口文档，相互之间不需要访问对方的源代码，不需要了解对方的实现细节&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基本的持续集成&quot;&gt;基本的持续集成&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;代码的测试覆盖率至少80%&lt;/li&gt;
  &lt;li&gt;基本架构节点的覆盖率必须达到100%&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;FakeRequest&lt;/code&gt;对&lt;code class=&quot;highlighter-rouge&quot;&gt;RESTful API&lt;/code&gt;进行测试&lt;/li&gt;
  &lt;li&gt;考虑UI测试&lt;/li&gt;
  &lt;li&gt;不写测试的代码就是耍流氓&lt;/li&gt;
  &lt;li&gt;每一次代码的提交需要满足Commit Acceptance Policy &lt;sup id=&quot;fnref:CAP01&quot;&gt;&lt;a href=&quot;#fn:CAP01&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，即：
    &lt;ul&gt;
      &lt;li&gt;提交的message中包含issue编号&lt;/li&gt;
      &lt;li&gt;该issue处于未解决的状态&lt;/li&gt;
      &lt;li&gt;该issue有指定的resolver&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;每一次的提交需要由CI系统测试&lt;/li&gt;
  &lt;li&gt;如果测试失败，代码提交者应该收到通知&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;每一次commit必须关联到Issue系统&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;每一个issue都要包含一系列的代码commits&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;每一次的CI编译环境，和上一次的环境无关&lt;/li&gt;
  &lt;li&gt;持续编译和持续发布&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;完整的迁移指南&quot;&gt;完整的迁移指南&lt;/h1&gt;

&lt;p&gt;更详细的迁移解释需要阅读英文文档。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;在Ubuntu上安装JIRA Server&lt;/li&gt;
  &lt;li&gt;在JIRA里面创建Project&lt;/li&gt;
  &lt;li&gt;导入Issue数据&lt;/li&gt;
  &lt;li&gt;在JIRA Server中设置DVCS Accounts&lt;/li&gt;
  &lt;li&gt;在Bitbucket Cloud里面指定JIRA Link&lt;/li&gt;
  &lt;li&gt;修订历史代码提交信息，如下&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 警告：如下的代码将会重写所有的历史commits信息&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 警告：如下的代码将会重写所有的历史commits信息&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 警告：如下的代码将会重写所有的历史commits信息&lt;/span&gt;
git clone --no-hardlinks git@bitbucket.org:scozv/ls-core-restful.git
git filter-branch -f --msg-filter &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;'sed &quot;s/#\([0-9][0-9]*\)/LS-\1/g&quot;'&lt;/span&gt;
git reset --hard
git gc --aggressive
git prune&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;jira安装脚本&quot;&gt;JIRA安装脚本&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# JAVA&lt;/span&gt;
sudo add-apt-repository ppa:openjdk-r/ppa
sudo apt-get update
sudo apt-get install -y openjdk-8-jdk openjdk-8-jre openjdk-8-jre-headless

&lt;span class=&quot;c&quot;&gt;# MySQL&lt;/span&gt;
sudo apt-get install -y mysql-server mysql-client

&lt;span class=&quot;c&quot;&gt;# JIRA&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# JIRA_BINARY=&quot;atlassian-jira-software-7.1.2-jira-7.1.2-x64.bin&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JIRA_BINARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;atlassian-jira-6.4.13-x64.bin&quot;&lt;/span&gt;
wget -nc -P ~/Downloads/ &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;https://www.atlassian.com/software/jira/downloads/binary/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$JIRA_BINARY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

chmod a+x ~/Downloads/&lt;span class=&quot;nv&quot;&gt;$JIRA_BINARY&lt;/span&gt;
sudo bash ~/Downloads/&lt;span class=&quot;nv&quot;&gt;$JIRA_BINARY&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;JIRA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/atlassian/jira&quot;&lt;/span&gt;

sudo vi &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/setenv.sh
&lt;span class=&quot;c&quot;&gt;# JVM_SUPPORT_RECOMMENDED_ARGS=&quot;-Datlassian.plugins.enable.wait=300 -Xms64m -Xmx256m -Xss2m -XX:MaxPermSize=128m&quot;&lt;/span&gt;
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/stop-jira.sh
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/start-jira.sh

&lt;span class=&quot;c&quot;&gt;# sudo bash /opt/atlassian/jira/uninstall&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# JIRA MySQL&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MS_JIRA_DB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jiradb
&lt;span class=&quot;nv&quot;&gt;MS_JIRA_DBUSER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jiradbuser
&lt;span class=&quot;nv&quot;&gt;MS_JIRA_PWD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*ABCDEFJHIGKLMNOPQRSTUVWXYZ&quot;&lt;/span&gt;
mysql -uroot -p
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;CREATE USER &lt;span class=&quot;s1&quot;&gt;'$MS_JIRA_DBUSER'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; IDENTIFIED BY PASSWORD &lt;span class=&quot;s1&quot;&gt;'$MS_JIRA_PWD'&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;CREATE DATABASE &lt;span class=&quot;nv&quot;&gt;$MS_JIRA_DB&lt;/span&gt; CHARACTER SET utf8 COLLATE utf8_bin;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;| on &lt;span class=&quot;nv&quot;&gt;$MS_JIRA_DB&lt;/span&gt;.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;s1&quot;&gt;'$MS_JIRA_DBUSER'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;| IDENTIFIED BY PASSWORD &lt;span class=&quot;s1&quot;&gt;'$MS_JIRA_PWD'&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;flush privileges;
&lt;span class=&quot;gp&quot;&gt;&amp;gt; &lt;/span&gt;SHOW GRANTS FOR &lt;span class=&quot;s1&quot;&gt;'$MS_JIRA_DBUSER'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;;

&lt;span class=&quot;nv&quot;&gt;MYSQL_CONF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/mysql/my.cnf&quot;&lt;/span&gt;
sudo cp &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt;.before_JIRA
sudo sed -i &lt;span class=&quot;s1&quot;&gt;'/^default_storage_engine/c\default_storage_engine=INNODB'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt;
sudo sed -i &lt;span class=&quot;s1&quot;&gt;'/^max_allowed_packet/c\max_allowed_packet=256M'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt;
sudo sed -i &lt;span class=&quot;s1&quot;&gt;'/innodb_log_file_size/c\innodb_log_file_size=256M'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt;
sudo sed -i &lt;span class=&quot;s1&quot;&gt;'/^sql_mode.*=.*NO_AUTO_VALUE_ON_ZERO/c\#sql_mode = NO_AUTO_VALUE_ON_ZERO'&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$MYSQL_CONF&lt;/span&gt;
sudo bash /etc/init.d/mysql stop
sudo bash /etc/init.d/mysql start

&lt;span class=&quot;nv&quot;&gt;JIRA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/atlassian/jira&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MYSQL_J_BINARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mysql-connector-java-5.1.38.tar.gz&quot;&lt;/span&gt;
wget -nc -P ~/Downloads/ &lt;span class=&quot;s2&quot;&gt;&quot;http://dev.mysql.com/get/Downloads/Connector-J/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$MYSQL_J_BINARY&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
sudo tar zxf ~/Downloads/&lt;span class=&quot;nv&quot;&gt;$MYSQL_J_BINARY&lt;/span&gt; -C &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/lib/
sudo cp &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/lib/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar  &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/lib/
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/stop-jira.sh
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/start-jira.sh

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/lib/jvm/java-8-openjdk-amd64/
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/config.sh
&lt;span class=&quot;c&quot;&gt;# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html&lt;/span&gt;
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/stop-jira.sh
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/start-jira.sh

&lt;span class=&quot;c&quot;&gt;## JIRA 6 only&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/installation&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://confluence.atlassian.com/display/UPM/Installing+Add-ons#Installingadd-ons-installingversion1InstallingPlugins1typeadd-onsinJIRAandBamboo&lt;/span&gt;
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/stop-jira.sh
&lt;span class=&quot;nv&quot;&gt;JIRA_CAP_BINARY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commitacceptance-1.6.0.jar&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JIRA_ADDON_SITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://marketplace-cdn.atlassian.com/files/artifact/5f9ba63d-ee6c-4633-9b7a-a26c644a2434&quot;&lt;/span&gt;
wget -nc -P ~/Downloads/ &lt;span class=&quot;nv&quot;&gt;$JIRA_ADDON_SITE&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$JIRA_CAP_BINARY&lt;/span&gt;
sudo cp ~/Downloads/&lt;span class=&quot;nv&quot;&gt;$JIRA_CAP_BINARY&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/atlassian-jira/WEB-INF/lib/
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/start-jira.sh

&lt;span class=&quot;c&quot;&gt;## stop-jira&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JIRA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/atlassian/jira&quot;&lt;/span&gt;
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/stop-jira.sh
sudo bash /etc/init.d/mysql stop
&lt;span class=&quot;c&quot;&gt;## start-jira&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;JIRA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/opt/atlassian/jira&quot;&lt;/span&gt;
sudo bash /etc/init.d/mysql start
sudo bash &lt;span class=&quot;nv&quot;&gt;$JIRA_HOME&lt;/span&gt;/bin/start-jira.sh&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:CAP01&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/overview&quot;&gt;JIRA Commit Acceptance Plugin&lt;/a&gt; by Atlassian, Version 1.6.0 • JIRA Server 5.0 - 6.4.13 • Released 2012-02-22&amp;nbsp;&lt;a href=&quot;#fnref:CAP01&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server</guid>
        <pubDate>2016-04-05T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>将Hyde风格移至到现有的Jekyll站点</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文描述了将Hyde风格移至到现有的Jekyll站点的步骤。主要的思路是：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;了解Jekyll站点的渲染步骤；&lt;/li&gt;
    &lt;li&gt;使用Meld比较&lt;code class=&quot;highlighter-rouge&quot;&gt;Hyde&lt;/code&gt;库和现有Jekyll站点的区别；&lt;/li&gt;
    &lt;li&gt;替代并且测试&lt;/li&gt;
  &lt;/ul&gt;

  &lt;p&gt;更详细的步骤需要参看英文版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;jekyll的文件结构&quot;&gt;Jekyll的文件结构&lt;/h1&gt;

&lt;p&gt;参考__&lt;a href=&quot;https://jekyllrb.com/docs/structure/&quot;&gt;官方文档&lt;/a&gt;__，
了解Jekyll的文件结构。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;.
├── assets
|   ├── css
|   ├── js
|   ├── img
|   └── themes
|       ├── &lt;span class=&quot;c&quot;&gt;# hyde&lt;/span&gt;
|       └── bootstrap
├── _includes
|   ├── JB
|   |   ├── comments_render_script
|   |   ├── pages_list_script
|   |   ├── analytics_render_script
|   └── themes
|       ├── &lt;span class=&quot;c&quot;&gt;# hyde&lt;/span&gt;
|       └── bootstrap
|           ├── default.html
|           ├── page.html
|           └── post.html
├── _layouts
|   ├── default.html
|   ├── page.html
|   └── post.html&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;jekyll渲染的步骤&quot;&gt;Jekyll渲染的步骤&lt;/h1&gt;

&lt;p&gt;更详细的解释需要参看英文版本，简言之：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./_layout/*.html&lt;/code&gt;，HTML网页的入口&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./_includes/JB/*&lt;/code&gt;， HTML渲染的时候，可重用的代码&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./_includes/themes/&lt;/code&gt;, 页面风格定义&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./assets/themes/&lt;/code&gt;, 公共的静态资源——图片、样式文件等&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;应用hyde页面风格的步骤&quot;&gt;应用Hyde页面风格的步骤&lt;/h1&gt;

&lt;p&gt;更详细的解释需要参看英文版本。&lt;/p&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2016/03/18/how-do-we-apply-the-hyde-theme-to-existing-jekyll-site</link>
        <guid>https://scozv.github.io/blog/zh/guide/2016/03/18/how-do-we-apply-the-hyde-theme-to-existing-jekyll-site</guid>
        <pubDate>2016-03-18T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>用于需求分析、开发以至持续集成的源代码管理工作模式</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;开发团队中，使用Word或者PDF文档，或者邮件来描述需求，可能导致同样内容的文档出现在不同成员的电脑上，进而可能导致
版本不一致。另外两次版本的需求更改，很难进行差异比较（Word和PDF文档不是简单的文本文件）。
一种解决方案是，使用文本文件（比如Markdown或者LaTeX）来描述需求，并将所有的文件纳入源代码管理。
所以，本文描述的这个工作流，将所有的文档纳入源代码管理。同时还将提到：&lt;/p&gt;

  &lt;ul&gt;
    &lt;li&gt;使用Issue来跟踪需求、变更和问题解决&lt;/li&gt;
    &lt;li&gt;产品、测试和开发等不同角色如何便捷的使用Bitbucket来提出并跟踪任务&lt;/li&gt;
    &lt;li&gt;一些基本的工具，比如c9.io，或者git的基本用法&lt;/li&gt;
    &lt;li&gt;Markdown的基本语法&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#环境准备&quot; id=&quot;markdown-toc-环境准备&quot;&gt;环境准备&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#了解atlassian&quot; id=&quot;markdown-toc-了解atlassian&quot;&gt;了解Atlassian&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#注册bitbucket&quot; id=&quot;markdown-toc-注册bitbucket&quot;&gt;注册Bitbucket&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#操作系统和git环境&quot; id=&quot;markdown-toc-操作系统和git环境&quot;&gt;操作系统和Git环境&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#git环境简介&quot; id=&quot;markdown-toc-git环境简介&quot;&gt;Git环境简介&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#编辑文本文档&quot; id=&quot;markdown-toc-编辑文本文档&quot;&gt;编辑文本文档&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#ubuntu系统下的建议&quot; id=&quot;markdown-toc-ubuntu系统下的建议&quot;&gt;Ubuntu系统下的建议&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#windows系统下的建议&quot; id=&quot;markdown-toc-windows系统下的建议&quot;&gt;Windows系统下的建议&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#使用c9io&quot; id=&quot;markdown-toc-使用c9io&quot;&gt;使用c9.io&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#移动端的访问&quot; id=&quot;markdown-toc-移动端的访问&quot;&gt;移动端的访问&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#不同角色的工作流程&quot; id=&quot;markdown-toc-不同角色的工作流程&quot;&gt;不同角色的工作流程&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#产品和需求的变更&quot; id=&quot;markdown-toc-产品和需求的变更&quot;&gt;产品和需求的变更&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#mention&quot; id=&quot;markdown-toc-mention&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;mention&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#email-notification&quot; id=&quot;markdown-toc-email-notification&quot;&gt;Email Notification&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#附录&quot; id=&quot;markdown-toc-附录&quot;&gt;附录&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#全局规则&quot; id=&quot;markdown-toc-全局规则&quot;&gt;全局规则&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#文件命名&quot; id=&quot;markdown-toc-文件命名&quot;&gt;文件命名&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#源代码存放的文件要求&quot; id=&quot;markdown-toc-源代码存放的文件要求&quot;&gt;源代码存放的文件要求&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#markdown基本语法介绍&quot; id=&quot;markdown-toc-markdown基本语法介绍&quot;&gt;Markdown基本语法介绍&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#latex基本语法介绍&quot; id=&quot;markdown-toc-latex基本语法介绍&quot;&gt;LaTeX基本语法介绍&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#常用的git场景&quot; id=&quot;markdown-toc-常用的git场景&quot;&gt;常用的Git场景&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#如何修改最近一次commit的备注&quot; id=&quot;markdown-toc-如何修改最近一次commit的备注&quot;&gt;如何修改最近一次commit的备注&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#想暂时回到某一个历史版本&quot; id=&quot;markdown-toc-想暂时回到某一个历史版本&quot;&gt;想暂时回到某一个历史版本&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#如何在当前的版本上做一些实验性的修改但不确定是否提交&quot; id=&quot;markdown-toc-如何在当前的版本上做一些实验性的修改但不确定是否提交&quot;&gt;如何在当前的版本上做一些实验性的修改，但不确定是否提交&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#c9io的基本环境配置&quot; id=&quot;markdown-toc-c9io的基本环境配置&quot;&gt;c9.io的基本环境配置&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#bitbucket和github在acadamic-license上的比较&quot; id=&quot;markdown-toc-bitbucket和github在acadamic-license上的比较&quot;&gt;Bitbucket和Github在Acadamic License上的比较&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;环境准备&quot;&gt;环境准备&lt;/h1&gt;
&lt;p&gt;本文提到的“环境”，不是开发环境，而是对每个成员都是适用的基本工作环境。&lt;/p&gt;

&lt;p&gt;本文提到的“源代码”，不仅仅是开发代码，而是团队运行过程中所有的文档，包括：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;需求文档及附件&lt;/li&gt;
  &lt;li&gt;团队工作流程&lt;/li&gt;
  &lt;li&gt;统一的开发风格文档&lt;/li&gt;
  &lt;li&gt;其它所有和团队有关，并需要记录的文档&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;所有输出的成品，比如编译生成的PDF文件，不应该纳入源代码管理。&lt;/p&gt;

&lt;h2 id=&quot;了解atlassian&quot;&gt;了解Atlassian&lt;/h2&gt;

&lt;p&gt;Atlassian的&lt;a href=&quot;https://www.atlassian.com/software&quot;&gt;产品线&lt;/a&gt;比较全面，
我目前使用的三个是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;JIRA：Issue系统&lt;/li&gt;
  &lt;li&gt;Bitbucket：Git源代码管理&lt;/li&gt;
  &lt;li&gt;Bamboo：CI系统&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目前，每一个产品都有如下两个版本：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cloud：由Atlassian托管的SaaS服务&lt;/li&gt;
  &lt;li&gt;Server：自主托管的软件&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;两个版本除了部署托管方式不同，页面和使用方式都非常类似。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;所以，在同一个产品的不同版本之间相互迁移，不会造成用户体验的不习惯。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;比如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Bitbucket Cloud：对应的网址是如下，所有的源代码托管到Atlassian服务器&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://bitbucket.org
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bitbucket Server（原名叫Stash）：个人或企业自主购买服务器，自主部署&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;注册bitbucket&quot;&gt;注册Bitbucket&lt;/h2&gt;
&lt;p&gt;首先注册一个&lt;a href=&quot;https://bitbucket.org&quot;&gt;bitbucket.org&lt;/a&gt;账号，bitbucket是一个在线的源代码管理系统，支持多个私有库，
默认每个库支持5位成员协同工作。&lt;/p&gt;

&lt;p&gt;进入bitbucket页面之后，左侧导航栏常用的菜单为：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;提交（commits）：用来查看所有的版本信息&lt;/li&gt;
  &lt;li&gt;问题（issues）：所有的问题列表，可对每一个问题进行讨论，并跟踪当前问题的处理进度&lt;/li&gt;
  &lt;li&gt;下载（downloads）：可以将每一个阶段的文档整理成PDF文件，存放到“下载”表中，以便向团队之外人展示&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Bitbucket支持在线编辑和预览Markdown文档。&lt;/p&gt;

&lt;h2 id=&quot;操作系统和git环境&quot;&gt;操作系统和Git环境&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;建议使用Ubuntu操作系统，便于自动化脚本的管理&lt;/li&gt;
  &lt;li&gt;如果使用Windows系统，需要安装&lt;a href=&quot;https://git-for-windows.github.io/&quot;&gt;Git-for-windows&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;可以尝试使用CloudIDE，推荐使用&lt;a href=&quot;https://c9.io&quot;&gt;c9.io&lt;/a&gt;或者&lt;a href=&quot;https://Koding.io&quot;&gt;Koding.io&lt;/a&gt;，
这两个云端IDE都配置了Ubuntu的虚机&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;git环境简介&quot;&gt;Git环境简介&lt;/h2&gt;

&lt;p&gt;当团队成员获得了某一个源代码仓库（repo）的访问权限之后，需要安装Git环境，用来提交和查看不是时期的源代码。&lt;/p&gt;

&lt;!--* Linux用户建议在`Bash`环境下使用Git--&gt;
&lt;!--* Mac用户可以通过--&gt;
&lt;!--* Windows用户可以安装[TortoiseGit] [1]或者[Git for Windows] [2]--&gt;

&lt;p&gt;建议在&lt;code class=&quot;highlighter-rouge&quot;&gt;Bash&lt;/code&gt;环境下使用Git。&lt;/p&gt;

&lt;p&gt;Git的仓库（repo）有三类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务器上的中心库，指的是托管在bitbucket.org上的库，每一位成员需要不时地从服务器上获取最新的源代码，同时也要将自己的
更改提交保存到服务器上&lt;/li&gt;
  &lt;li&gt;其他成员电脑上的库，只有当其他成员将他们的更改提交到了服务器上，我们才能获取更新，看到这些更改&lt;/li&gt;
  &lt;li&gt;本地自己的库，同样的，只有我们将自己的更改提交到服务器，团队其他成员才能获取我们的更新&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一般而言，Git环境的基本流程是：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 0. 克隆或更新本地库，将服务器上的变更，更新到本地&lt;/span&gt;
git pull
&lt;span class=&quot;c&quot;&gt;# 0. 修改、编辑源代码，标记变更的文件，并为本次变更添加一个描述&lt;/span&gt;
git add file_changed.txt
git commit -m &lt;span class=&quot;s1&quot;&gt;'本次变更的描述信息'&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 0. 可以重复上一个步骤，多次变更文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 0. 一并提交本地的所有的更新到服务器上&lt;/span&gt;
git push&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;编辑文本文档&quot;&gt;编辑文本文档&lt;/h2&gt;

&lt;h3 id=&quot;ubuntu系统下的建议&quot;&gt;Ubuntu系统下的建议&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;如果有能力，请用&lt;code class=&quot;highlighter-rouge&quot;&gt;vim&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;emacs&lt;/code&gt;。（&lt;strong&gt;友情提示：这两个编辑器的学习比较耗时，请合理安排时间&lt;/strong&gt;）&lt;/li&gt;
  &lt;li&gt;使用开源的&lt;a href=&quot;https://atom.io/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atom.io&lt;/code&gt;&lt;/a&gt;编辑器，可以使用&lt;a href=&quot;https://launchpad.net/~webupd8team/+archive/ubuntu/atom&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;webupd8team&lt;/code&gt;提供的&lt;code class=&quot;highlighter-rouge&quot;&gt;ppa&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;付费使用&lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;windows系统下的建议&quot;&gt;Windows系统下的建议&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;使用开源的&lt;a href=&quot;https://atom.io/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;atom.io&lt;/code&gt;&lt;/a&gt;编辑器&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;使用c9io&quot;&gt;使用c9.io&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://c9.io
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这是一个网页版的代码编辑器，在一些个人电脑环境有限的情况下，可以直接在网页里面写代码。&lt;/p&gt;

&lt;p&gt;特色是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;登录之后，整个环境就是你上次的文档环境，不管你在什么操作系统上，只要你能上网&lt;/li&gt;
  &lt;li&gt;代码高亮&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;同步预览，一边编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;文件，一边查看最终的效果&lt;/li&gt;
  &lt;li&gt;智能提示&lt;/li&gt;
  &lt;li&gt;更重要的是，提供了一个具有&lt;code class=&quot;highlighter-rouge&quot;&gt;su&lt;/code&gt;权限的&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt;的&lt;code class=&quot;highlighter-rouge&quot;&gt;Terminal&lt;/code&gt;，也就
意味着，你在网页里面可以使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;Ubuntu&lt;/code&gt;操作系统了&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;移动端的访问&quot;&gt;移动端的访问&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iOS&lt;/code&gt;上使用&lt;a href=&quot;https://itunes.apple.com/cn/app/codebucket-bitbucket-for-ios/id551531422?&quot;&gt;CodeBucket&lt;/a&gt;访问源代码库。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Android&lt;/code&gt;平台使用&lt;a href=&quot;http://www.coolapk.com/apk/fi.iki.kuitsi.bitbeaker&quot;&gt;Bitbeaker&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;移动端通常可用于问题的讨论。&lt;/p&gt;

&lt;h1 id=&quot;不同角色的工作流程&quot;&gt;不同角色的工作流程&lt;/h1&gt;

&lt;h2 id=&quot;产品和需求的变更&quot;&gt;产品和需求的变更&lt;/h2&gt;
&lt;p&gt;需求最开始可以在问题（issue） 列表中讨论，逐步反映到需求文档中，具体而言：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;新增一个问题（issue）&lt;/li&gt;
  &lt;li&gt;团队成员在每一个问题的评论中讨论&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;编写对应的需求文档，并在提交的时候，关联问题编号（使用英文字符井号&lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt;）&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m '新增某某需求，参考问题 #1'
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;mention&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;mention&lt;/h2&gt;

&lt;p&gt;在issue的讨论中，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;@username&lt;/code&gt;提及某一个队员，一般来说，对方会收到一封邮件，
所以为了方便，请使用 &lt;strong&gt;简短&lt;/strong&gt; 并且容易在键盘上打出来的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;另外，我建议：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;请将你的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;视为开源开发社区的一个身份，所以尽量，在如下开发者社区使用同样的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;：
    &lt;ul&gt;
      &lt;li&gt;Bitbucket.org&lt;/li&gt;
      &lt;li&gt;c9.io&lt;/li&gt;
      &lt;li&gt;github.com&lt;/li&gt;
      &lt;li&gt;gitlab.com&lt;/li&gt;
      &lt;li&gt;stackexchange.com&lt;/li&gt;
      &lt;li&gt;stackoverflow.com&lt;/li&gt;
      &lt;li&gt;mail.yandex.com&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;可以使用同样的邮箱&lt;/li&gt;
  &lt;li&gt;如果刚刚进入开源开发社区，可以修改你觉得不合适的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;确定&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;之后，或者使用了很久的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;，永远不要修改&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;email-notification&quot;&gt;Email Notification&lt;/h2&gt;

&lt;p&gt;除了用于登录、注册的邮箱外，如果你想及时地收到Notification（比如某人&lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt;了你），
可以在个人设置中，添加一个额外的邮箱地址。&lt;/p&gt;

&lt;h1 id=&quot;附录&quot;&gt;附录&lt;/h1&gt;

&lt;h2 id=&quot;全局规则&quot;&gt;全局规则&lt;/h2&gt;

&lt;h3 id=&quot;文件命名&quot;&gt;文件命名&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;所有的文件名称只包含英文字母、数字和下划线，比如：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  requirement_001_user_login.md
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;所有的文件名不要出现空格和其它特殊字符&lt;/li&gt;
  &lt;li&gt;所有的文本文件，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;，都设置为&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;编码，以免中文字体出现乱码&lt;/li&gt;
  &lt;li&gt;所有的附件（图片、PPT文件等），使用简短的文件名描述图片内容，并在文档中注明&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;源代码存放的文件要求&quot;&gt;源代码存放的文件要求&lt;/h3&gt;

&lt;p&gt;源代码存放的文件，都要能够做比较（&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;对于诸如，&lt;code class=&quot;highlighter-rouge&quot;&gt;.pdf&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.exe&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;.ppt&lt;/code&gt;等文件，是不适合做&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;的，因为如果
使用&lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;文本编辑器打开这些文件，看到的都是二进制编码。&lt;/p&gt;

&lt;p&gt;如下文件，需要通过源代码管理：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;文档的源文件：&lt;code class=&quot;highlighter-rouge&quot;&gt;.md&lt;/code&gt;，包括：
    &lt;ul&gt;
      &lt;li&gt;面向开发者的文档&lt;/li&gt;
      &lt;li&gt;团队的规范文档&lt;/li&gt;
      &lt;li&gt;必要的会议记录&lt;/li&gt;
      &lt;li&gt;所有的需求文档&lt;/li&gt;
      &lt;li&gt;其它&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;有能力的团队，可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;来编写文档，参考&lt;a href=&quot;http://scozv.github.io/help/2015/08/12/introduction-of-building-documents-with-latex&quot;&gt;此处&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;所有的源代码&lt;/li&gt;
  &lt;li&gt;必要的配置文件，注意区分开发环境和生产环境，同时，注意生产配置的保密&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;如下的文件，请不要放到源代码托管，&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如下的文件，请不要放到源代码托管，&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如下的文件，请不要放到源代码托管：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;del&gt;源代码的编译产物，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;dll&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;exe&lt;/code&gt;或者其它编译后的文件&lt;/del&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;非文本的文档，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;pdf&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;等&lt;/del&gt;，参考&lt;a href=&quot;https://github.com/weijianwen/SJTUThesis/issues/26&quot;&gt;这个讨论&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;源代码的dependencies，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;Node.js&lt;/code&gt;项目里面的&lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;文件夹&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;参考常用的&lt;code class=&quot;highlighter-rouge&quot;&gt;gitignore&lt;/code&gt;文件：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://github.com/github/gitignore
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;markdown基本语法介绍&quot;&gt;Markdown基本语法介绍&lt;/h2&gt;
&lt;p&gt;bitbucket中可以直接编辑和预览文件。
详细的语法说明，可以参考：https://bitbucket.org/tutorials/markdowndemo/overview&lt;/p&gt;

&lt;p&gt;常用的语法有如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;目录&lt;/p&gt;

    &lt;p&gt;在文档的开始，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;[TOC]&lt;/code&gt;来自动生成文章的目录，比如&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;gh&quot;&gt;# 第一章&lt;/span&gt;
第一章内容
&lt;span class=&quot;gu&quot;&gt;## 1.1小节&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## 1.2小节&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;# 第二章&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;换行&lt;/p&gt;

    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;中的换行需要敲两下回车，
一个回车不会换行。
这样的好处是，我们在编写文档的过程中，
每行不会太长，便于我们阅读。
不管是文档还是代码，如果每行的内容
太多的话，我们就要拖动
页面下方的水平滚动条，
来查看和阅读
这一行后面的内容。
如果，真的这样的话，想必是很
不方便的。&lt;/p&gt;

    &lt;p&gt;比如，“换行”这一小节的&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;源代码如下，同时，我们不需要让每行段落，
过长，比如两种源代码，最终的显示效果一样：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;sb&quot;&gt;`Markdown`&lt;/span&gt;中的换行需要敲两下回车，
一个回车不会换行。
这样的好处是，我们在编写文档的过程中，
每行不会太长，便于我们阅读。
不管是文档还是代码，如果每行的内容
太多的话，我们就要拖动
页面下方的水平滚动条，
来查看和阅读
这一行后面的内容。
如果，真的这样的话，想必是很
不方便的。

比如，“换行”这一小节的&lt;span class=&quot;sb&quot;&gt;`Markdown`&lt;/span&gt;源代码如下，
同时，我们不需要让每行段落，
过长，比如两种源代码，最终的显示效果一样：&lt;span class=&quot;sb&quot;&gt;


`Markdown`&lt;/span&gt;中的换行需要敲两下回车，一个回车不会换行。  这样的好处是，我们在编写文档的过程中，  每行不会太长，便于我们阅读。  不管是文档还是代码，如果每行的内容 太多的话，我们就要拖动  页面下方的水平滚动条，  来查看和阅读  这一行后面的内容。  如果，真的这样的话，想必是很  不方便的。

比如，“换行”这一小节的&lt;span class=&quot;sb&quot;&gt;`Markdown`&lt;/span&gt;源代码如下，同时，我们不需要让每行段落，过长，比如两种源代码，最终的显示效果一样：&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;章节级别&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 使用一个井号，来表示章节1，比如 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gh&quot;&gt;# Heading 1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 使用两个井号，来表示第二级章节，比如 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;## Heading 1.1&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 可以向下一直写到第五级，即 --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;##### Heading 1.1.1.1.1&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;粗体和斜体&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 用两个星号包围需要加粗的字体： --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;gs&quot;&gt;**粗体**&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- 用一个星号包围需要倾斜的字体： --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;ge&quot;&gt;*斜体*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;超链接&lt;/p&gt;

    &lt;p&gt;通常超链接的语法如下：&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;Markdown 语法&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;https://daringfireball.net/projects/markdown/syntax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;列表&lt;/p&gt;

    &lt;p&gt;使用一个井号，标记列表中的元素，比如&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Item one
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Item two
&lt;span class=&quot;p&quot;&gt;*&lt;/span&gt; Item three&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;表格&lt;/p&gt;

    &lt;p&gt;注意，下列语法中的短横线只需要使用一个就够了，列之间用竖线分割。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-md&quot; data-lang=&quot;md&quot;&gt;第一列的表头       | 第二列的表头
-----------------| -------------
第一行第一列的内容  | 第一行第二列的内容
第二行第一列的内容  | 第二行第二列的内容&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;latex基本语法介绍&quot;&gt;LaTeX基本语法介绍&lt;/h2&gt;

&lt;h2 id=&quot;常用的git场景&quot;&gt;常用的Git场景&lt;/h2&gt;
&lt;p&gt;本小节主要参考文献[Chacon and Straub, 2014] &lt;sup id=&quot;fnref:pro_git2&quot;&gt;&lt;a href=&quot;#fn:pro_git2&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;下列的代码段中，以&lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt;打头的命令需要在&lt;code class=&quot;highlighter-rouge&quot;&gt;bash&lt;/code&gt;中执行。其余的为命令执行的结果。&lt;/p&gt;

&lt;h3 id=&quot;如何修改最近一次commit的备注&quot;&gt;如何修改最近一次commit的备注&lt;sup id=&quot;fnref:gb_undo&quot;&gt;&lt;a href=&quot;#fn:gb_undo&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git commit --amend&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;想暂时回到某一个历史版本&quot;&gt;想暂时回到某一个历史版本&lt;sup id=&quot;fnref:st_checkout&quot;&gt;&lt;a href=&quot;#fn:st_checkout&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;

&lt;p&gt;有的时候，突然发现了一个问题，但是明明记得之前某个时间段是正常的。
此时，需要回到之前的某一个版本（commit），尝试找到是哪一次提交引发了该问题。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 0. 列出最近的一系列提交&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git log --pretty&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;oneline -n 20 --graph --abbrev-commit
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 9ecb341 fix markdown href syntax
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 3f0828b fix markdown coding syntax
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 72fc362 fix markdown syntax
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 4175860 draft &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;vcs wrkflow
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 94259e0 fix typo of lataxing
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 8ecbced no center &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;equation
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 794bcee blockquote equation
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; b0ca566 fix div &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;markdown

&lt;span class=&quot;c&quot;&gt;# 0. 临时返回到之前的某一次提交&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout 94259e0

&lt;span class=&quot;c&quot;&gt;# 0. 使用二分查找，反复执行`git checkout`，直到定位到某两个**相邻**的版本，也即，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 前一个版本还是正常的，后一个版本就出现了问题&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 0. 比较这两个**相邻**版本的差异，分析问题&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git diff 4175860 94259e0

&lt;span class=&quot;c&quot;&gt;# 0. 回撤这些临时版本&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;如何在当前的版本上做一些实验性的修改但不确定是否提交&quot;&gt;如何在当前的版本上做一些实验性的修改，但不确定是否提交&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 充分利用Git的Branch特性，在当前的版本上创建一个分支，然后做实验性的修改。&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git branch experiment

&lt;span class=&quot;c&quot;&gt;# 确认了这些修改之后，可以将实验分支上的更改合并到当前位置&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git checkout master
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git merge master experiment&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;另外，关于分支合并，&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;的区别可以参考&lt;a href=&quot;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&quot;&gt;这篇文章&lt;/a&gt;（这个区别一般
只有开发才会用到）。简单理解：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;merge&lt;/code&gt;是将两条路径的最后一个节点合并在一起，然后继续往下走&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rebase&lt;/code&gt;是将旁边路径上的更改，反映到当前路径上。原先的两条路径不会有交点，但是当前路径上的每一分提交都会被重写，从而反映
旁边路径上的更改&lt;/li&gt;
  &lt;li&gt;如果当前路径上的某些提交已经更新（&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;）到了服务器，则需要重新获取历史版本（&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;c9io的基本环境配置&quot;&gt;c9.io的基本环境配置&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# create workspace&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# private&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# choose a EMPTY template&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# generate SSH key for Git server,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# https://confluence.atlassian.com/x/YwV9E&lt;/span&gt;
ssh-keygen -t rsa -b 4096
vi ~/.ssh/id_rsa.pub
&lt;span class=&quot;c&quot;&gt;# start the ssh-agent in the background&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ssh-agent -s&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
ssh-add ~/.ssh/id_rsa
&lt;span class=&quot;c&quot;&gt;# record SSH key into Github and Bitbucket&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# clone Git repo into c9.io&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# git clone git@bitbucket.org:username/repo.git&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;bitbucket和github在acadamic-license上的比较&quot;&gt;Bitbucket和Github在Acadamic License上的比较&lt;/h2&gt;

&lt;p&gt;在Acadamic License结束之后，Bitbucket依然允许5人小组的私有库，但是Github需要付费，才能继续使用私有库。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:pro_git2&quot;&gt;
      &lt;p&gt;Chacon, S. and Straub, B. (2014). Pro Git, Second Edition.: NY. Apress.&amp;nbsp;&lt;a href=&quot;#fnref:pro_git2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:gb_undo&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things&quot;&gt;Git Basics - Undoing Things&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:gb_undo&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:st_checkout&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/4114122&quot;&gt;Temporarily switch to a different commit&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:st_checkout&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2015/09/04/a-vcs-project-workflow-for-requirement-coding-and-ci</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2015/09/04/a-vcs-project-workflow-for-requirement-coding-and-ci</guid>
        <pubDate>2015-09-04T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>介绍专业的文档系统LaTeX</title>
        <description>
&lt;!--2015-08-10-introduction-of-building-documents-with-latex--&gt;

&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族是一个专业的排版系统。本文简要地介绍了&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族的常见成员，
并整理出了&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;入门使用过程中会遇到的一些问题，&lt;/p&gt;

  &lt;p&gt;同时，将演示&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;在网页中的集成。最后在附录部分，给出了样式模板的参考代码。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#tex家族简介&quot; id=&quot;markdown-toc-tex家族简介&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族简介&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#为什么使用tex家族排版&quot; id=&quot;markdown-toc-为什么使用tex家族排版&quot;&gt;为什么使用&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族排版&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#tex的使用说明&quot; id=&quot;markdown-toc-tex的使用说明&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;的使用说明&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#tex和latex的区别&quot; id=&quot;markdown-toc-tex和latex的区别&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的区别&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#tex注重排版&quot; id=&quot;markdown-toc-tex注重排版&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;注重排版&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#latex注重内容&quot; id=&quot;markdown-toc-latex注重内容&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;注重内容&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#样例模板参考&quot; id=&quot;markdown-toc-样例模板参考&quot;&gt;样例模板参考&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#latex的格式样例&quot; id=&quot;markdown-toc-latex的格式样例&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的格式样例&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#学术论文格式样例&quot; id=&quot;markdown-toc-学术论文格式样例&quot;&gt;学术论文格式样例&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#编译命令参考&quot; id=&quot;markdown-toc-编译命令参考&quot;&gt;编译命令参考&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#latex在web页面的使用基于katex库&quot; id=&quot;markdown-toc-latex在web页面的使用基于katex库&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;在Web页面的使用——基于&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;库&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#jekyll中的集成katex&quot; id=&quot;markdown-toc-jekyll中的集成katex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;中的集成&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#gitbook中的集成katex&quot; id=&quot;markdown-toc-gitbook中的集成katex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook&lt;/code&gt;中的集成&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#附录&quot; id=&quot;markdown-toc-附录&quot;&gt;附录&lt;/a&gt;    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;#latex使用过程中的问题列表&quot; id=&quot;markdown-toc-latex使用过程中的问题列表&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;使用过程中的问题列表&lt;/a&gt;        &lt;ul&gt;
          &lt;li&gt;&lt;a href=&quot;#latex-font-warning-font-shape-undefined&quot; id=&quot;markdown-toc-latex-font-warning-font-shape-undefined&quot;&gt;LaTeX Font Warning: Font shape undefined&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#latex-error-file-multindsty-not-found&quot; id=&quot;markdown-toc-latex-error-file-multindsty-not-found&quot;&gt;latex error: file `multind.sty’ not found&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#makeindex-finance不会生成multi-index页面&quot; id=&quot;markdown-toc-makeindex-finance不会生成multi-index页面&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makeindex finance&lt;/code&gt;不会生成Multi Index页面&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#xecjk-error-key-unknown&quot; id=&quot;markdown-toc-xecjk-error-key-unknown&quot;&gt;xeCJK error: “key-unknown”&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cjk字体的选用&quot; id=&quot;markdown-toc-cjk字体的选用&quot;&gt;CJK字体的选用&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#cjk字体不能在数学公式环境中显示&quot; id=&quot;markdown-toc-cjk字体不能在数学公式环境中显示&quot;&gt;CJK字体不能在数学公式环境中显示&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#使用强调emph而非加粗textbf&quot; id=&quot;markdown-toc-使用强调emph而非加粗textbf&quot;&gt;使用强调&lt;code class=&quot;highlighter-rouge&quot;&gt;\emph&lt;/code&gt;而非加粗&lt;code class=&quot;highlighter-rouge&quot;&gt;\textbf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#编译之后的文档输出有乱码&quot; id=&quot;markdown-toc-编译之后的文档输出有乱码&quot;&gt;编译之后的文档输出有乱码&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#文献引用编号显示为&quot; id=&quot;markdown-toc-文献引用编号显示为&quot;&gt;文献引用编号显示为&lt;code class=&quot;highlighter-rouge&quot;&gt;[?]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#修改目录中索引的层级&quot; id=&quot;markdown-toc-修改目录中索引的层级&quot;&gt;修改目录中“索引”的层级&lt;/a&gt;&lt;/li&gt;
          &lt;li&gt;&lt;a href=&quot;#定义摘要章节的样式&quot; id=&quot;markdown-toc-定义摘要章节的样式&quot;&gt;定义“摘要”章节的样式&lt;/a&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;#模板样例&quot; id=&quot;markdown-toc-模板样例&quot;&gt;模板样例&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tex家族简介&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族简介&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;可以视为出版行业的专业排版系统，由&lt;a href=&quot;http://www-cs-faculty.stanford.edu/~knuth/&quot;&gt;Donald Knuth&lt;/a&gt;于1978年发布，
当前的稳定版本编号为&lt;a href=&quot;https://en.wikipedia.org/wiki/TeX&quot; title=&quot;TeX Wikipage&quot;&gt;&lt;script type=&quot;math/tex&quot;&gt;3.14159265&lt;/script&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;是脚本化的排版系统，所有的排版格式都是用&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;语法描述的。比如使用&lt;code class=&quot;highlighter-rouge&quot;&gt;\begin{tabular} \end{tabular}&lt;/code&gt;来绘制表格。
&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;接收一系列的语法命令和文本内容，经过&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;系统编译（macro compiler）之后，输出到显示屏、&lt;code class=&quot;highlighter-rouge&quot;&gt;DVI&lt;/code&gt;或者&lt;code class=&quot;highlighter-rouge&quot;&gt;PDF&lt;/code&gt;文档。
对于同样的一份&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;脚本，在任意的环境下编译后的输出文档：格式、字体、间距等都应该是一样的。&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;的基础上，可以定义一系列的宏包（macro），可以更方便地描述排版样式。比如上述的表格语法，其实来自&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;宏包，
如果要使用纯&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;（plain &lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;）来绘制表格，则要使用更多的排版命令
（参考这两个网页文献 &lt;a href=&quot;http://www.volkerschatz.com/tex/halign.html&quot;&gt;A&lt;/a&gt;、
&lt;a href=&quot;http://tex.stackexchange.com/questions/183235/vertically-aligned-table-in-plaintex-latex-context-etc&quot;&gt;B&lt;/a&gt; ）。
&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;是非常流行的宏包，除此之外还有&lt;code class=&quot;highlighter-rouge&quot;&gt;AMS-TeX&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;XeTeX&lt;/code&gt;等&lt;sup id=&quot;fnref:TUG01&quot;&gt;&lt;a href=&quot;#fn:TUG01&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h1 id=&quot;为什么使用tex家族排版&quot;&gt;为什么使用&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;家族排版&lt;/h1&gt;
&lt;p&gt;和Office这类所见所得的文档处理器不同的是，&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;系列使用大量的命令来描述排版格式。
此外，所见非得的&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;和所见即得的Office相比：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;，不需要考虑软件的版权费用问题，它是免费的。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;，不需要担心跨软件、跨平台的格式兼容问题。
不同的Office软件在排版格式上并不完全兼容，即使同一个软件公司的不同Office版本，
格式上也不完全兼容。但是，同样的一份&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;文档，经过不同的环境编译之后，输出的排版都是完全一样的。&lt;/li&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;，精力可以放在撰写文档的内容，而非花大量的时间，用鼠标选中不同的文本段落，调整大量的排版样式。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;更多用于学术领域，很多出版社、大学会提供指定的学术论文模板，
比如&lt;a href=&quot;http://web.mit.edu/thesis/tex/&quot; title=&quot;MIT Thesis LaTeX Template&quot;&gt;MIT thesis templates&lt;/a&gt;或者非官方的&lt;a href=&quot;https://github.com/weijianwen/SJTUThesis&quot; title=&quot;SJTU Thesis LaTeX Template&quot;&gt;上海交通大学学位论文模板&lt;/a&gt;。使用这些
模板，基本上不用考虑排版格式的问题，只要专心写文章就好了。&lt;/li&gt;
  &lt;li&gt;很多专业的学术语言——复杂的数学公式，化学分子式，五线谱，电路图——是没法仅仅使用Office就能编写的。&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;可以&lt;sup id=&quot;fnref:WIK01&quot;&gt;&lt;a href=&quot;#fn:WIK01&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;文档是一个普通的文本文档，这意味着，可以进行源代码的版本管理。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;类似的所见非得系统还有&lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;&lt;/a&gt;，不过，&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;更常用于网页展示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;语法定义了不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;HTML&lt;/code&gt;节点；&lt;/li&gt;
  &lt;li&gt;不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;处理系统（在线编译网站，或者软件）定义不同的&lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt;样式；&lt;/li&gt;
  &lt;li&gt;使得同样的&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;文档，最终的展示并不一样。以“&lt;code class=&quot;highlighter-rouge&quot;&gt;online markdown&lt;/code&gt;”为关键字搜索，
可以找到不同的在线&lt;code class=&quot;highlighter-rouge&quot;&gt;Markdown&lt;/code&gt;编辑网站，它们对同一份文档的渲染结果是不同的。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;tex的使用说明&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;的使用说明&lt;/h1&gt;
&lt;p&gt;目前，我会优先考虑使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;，而非直接使用纯粹的&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;，因为前者的使用，能够将精力更多
的放在撰写的内容上。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的过程中，建议积累自己的一份样式模板，并通过源代码管理这个过程。后面的附录会附上我自己积累的一份样式模板。&lt;/p&gt;

&lt;p&gt;目前在&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的使用过程中，碰到的问题有如下几类（详细的问题清单，也会附在后文的附录中，供参考）：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;中文等CJK字体的编译问题：解决方案通常是选用合适的字体，配置不同格式的字体名称，需要留意字体的版权声明；&lt;/li&gt;
  &lt;li&gt;文档编译出错：这时，需要仔细阅读编译日志，通常用编译日志中的错误信息在网上搜索，都能得到解决方案；&lt;/li&gt;
  &lt;li&gt;不知道如何实现具体的排版样式：我目前没有精力仔细研究纯粹的&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;（plain &lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;）语法，所以还是通过搜索
来解决问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以从&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTex&lt;/code&gt;的&lt;a href=&quot;https://en.wikibooks.org/wiki/LaTeX&quot;&gt;Wikibook&lt;/a&gt;开始读起。
另外官方的&lt;a href=&quot;http://tug.org/begin.html&quot;&gt;tug.org&lt;/a&gt;和无所不知的&lt;a href=&quot;http://tex.stackexchange.com/&quot;&gt;stackoverflow&lt;/a&gt;都能找到
很多帮助文档。&lt;/p&gt;

&lt;p&gt;准备一张 &lt;em&gt;LaTeX Cheat Sheet&lt;/em&gt; 供参考。&lt;/p&gt;

&lt;h2 id=&quot;tex和latex的区别&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的区别&lt;/h2&gt;

&lt;p&gt;正如前面说的那样：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;是一个排版系统的基础；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;基础上，定义了很多便捷的样式模板；&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;XeLaTeX&lt;/code&gt;增加了对&lt;code class=&quot;highlighter-rouge&quot;&gt;CJK&lt;/code&gt;的更好支持。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tex注重排版&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;注重排版&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;更像一个排版系统，参考&lt;a href=&quot;http://stackoverflow.com/a/7014579&quot;&gt;tex.stack问答&lt;/a&gt;
或者&lt;a href=&quot;http://www.haverford.edu/mathematics/resources/LaTeX_vs_TeX.php&quot;&gt;此处&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Learn TeX only if you would like to become a typesetter&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt; is a system designed for typesetting&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;latex注重内容&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;注重内容&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;能够更快地编写文档，但是没法体会到&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;的很多特性，
参考&lt;a href=&quot;http://www.tug.org/pipermail/texhax/2009-October/013645.html&quot;&gt;tug.org上的文档&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/20638337&quot;&gt;知乎问答&lt;/a&gt;上，也给出了一个分类列表——&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;之于&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;，就像“引擎”之于“格式”。
&lt;a href=&quot;http://www.zhihu.com/question/25033797/answer/29962700&quot;&gt;知乎另一份问答&lt;/a&gt;里提到，&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的选择，需要一定的权衡：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;用LaTeX的时候，还真有你想要某些功能而没有的情况。怎么办？两种办法：花钱找高人帮着写；自己写。&lt;/p&gt;

  &lt;p&gt;…&lt;/p&gt;

  &lt;p&gt;首先需要熟悉LaTeX的内部命令（大部分是含有@字符的命令），有时候这还不够，
万一碰到\expandafter，\futurelet，\ifvoid等等还得碰底层的primitive（基本命令）。
这个时候，还真就没plain TeX用着舒服。不过舒服也是有代价的，
因为plain TeX很短，能很快看完，但是前提是能够顺利地把TeXbook看完。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;样例模板参考&quot;&gt;样例模板参考&lt;/h2&gt;

&lt;h3 id=&quot;latex的格式样例&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的格式样例&lt;/h3&gt;

&lt;p&gt;参考附录部分的样例模板。&lt;/p&gt;

&lt;h3 id=&quot;学术论文格式样例&quot;&gt;学术论文格式样例&lt;/h3&gt;

&lt;p&gt;在互联网上总能找到很多学术论文的模板样例：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://web.mit.edu/thesis/tex/&quot; title=&quot;MIT Thesis LaTeX Template&quot;&gt;MIT thesis templates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;非官方的&lt;a href=&quot;https://github.com/weijianwen/SJTUThesis&quot; title=&quot;SJTU Thesis LaTeX Template&quot;&gt;上海交通大学学位论文模板&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.acm.org/publications/article-templates/acm-latex-style-guide&quot;&gt;ACM LaTeX Style Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://phd.epfl.ch/thesistemplates&quot;&gt;Generic EPFL Template in LaTeX&lt;/a&gt;，Scala！&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.elsevier.com/authors/author-schemas/latex-instructions&quot;&gt;Elsevier LaTeX instructions&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www2.ametsoc.org/ams/index.cfm/publications/authors/journal-and-bams-authors/author-resources/latex-author-info/preparing-a-latex-manuscript-for-submission/&quot;&gt;AMS LaTeX Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;编译命令参考&quot;&gt;编译命令参考&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;c&quot;&gt;# 文件名: build.sh&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 编译过程中如果出现异常中断，可能需要清除临时文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 谨慎使用git clean命令，这会删除untracked文件&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# git clean -fx&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 编译入口&lt;/span&gt;
xelatex index.tex
&lt;span class=&quot;c&quot;&gt;# 编译索引&lt;/span&gt;
makeindex idx_finance.idx
&lt;span class=&quot;c&quot;&gt;# 编译参考文献&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;c,f&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; ; &lt;span class=&quot;k&quot;&gt;do
	&lt;/span&gt;bibtex &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 引用参考文献编号&lt;/span&gt;
xelatex index.tex
xelatex index.tex&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;latex在web页面的使用基于katex库&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;在Web页面的使用——基于&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;库&lt;/h2&gt;

&lt;p&gt;如果想要体验在线编辑&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX&lt;/code&gt;文档，可以试用这两个网站：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;sharelatex.com&lt;/li&gt;
  &lt;li&gt;overleaf.com&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里主要讨论Web页面中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;语法，显示数学公式。常用的解决方案是在网页中嵌入&lt;code class=&quot;highlighter-rouge&quot;&gt;MathJax&lt;/code&gt;库，
然后使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$$ \equation $$&lt;/code&gt;语法在网页中显示数学公式。&lt;/p&gt;

&lt;p&gt;但是&lt;code class=&quot;highlighter-rouge&quot;&gt;MathJax&lt;/code&gt;库的加载和公式渲染（render）比较耗时。
一个替代方案是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;——出自&lt;a href=&quot;https://khan.github.io/KaTeX/&quot;&gt;Khan Academy&lt;/a&gt; 团队。
&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;的渲染速度得益于它将所有的数学公式用&lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt;的方式展示。&lt;/p&gt;

&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;需要注意的是：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;$$ \equation $$&lt;/code&gt;而非&lt;code class=&quot;highlighter-rouge&quot;&gt;$ \equation $&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;如果需要居中显示行级公式，可以自定义&lt;code class=&quot;highlighter-rouge&quot;&gt;CSS&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;目前&lt;a href=&quot;https://github.com/Khan/KaTeX/releases/tag/v0.5.0&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX v0.5.0&lt;/code&gt;&lt;/a&gt;并不支持所有的&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;语法，
比如&lt;code class=&quot;highlighter-rouge&quot;&gt;$$\LaTeX{}$$&lt;/code&gt;就无法被渲染。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;jekyll中的集成katex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;中的集成&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;如下的公式就是通过&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;渲染的：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;e^x = \lim_{n\rightarrow \infty} \sum_{t=0}^{n} ( \frac{1}{t!}\cdot x^t )= \sum_{t=0}^{\infty} (1 + x + \frac{1}{2!}x^2+\frac{1}{3!}x^3+ ... + \frac{1}{t!}\cdot x^t)&lt;/script&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;Jekyll&lt;/code&gt;中的集成，可以参考这篇文章（&lt;a href=&quot;http://xuc.me/blog/KaTeX-and-Jekyll/&quot;&gt;链接&lt;/a&gt;）。&lt;/p&gt;

&lt;h3 id=&quot;gitbook中的集成katex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook&lt;/code&gt;中的集成&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook&lt;/code&gt;已经提供了&lt;code class=&quot;highlighter-rouge&quot;&gt;KaTeX&lt;/code&gt;的插件：&lt;a href=&quot;http://plugins.gitbook.com/plugin/katex&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;gitbook-plugin-katex&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&quot;附录&quot;&gt;附录&lt;/h1&gt;

&lt;h2 id=&quot;latex使用过程中的问题列表&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;使用过程中的问题列表&lt;/h2&gt;

&lt;h3 id=&quot;latex-font-warning-font-shape-undefined&quot;&gt;LaTeX Font Warning: Font shape undefined&lt;/h3&gt;
&lt;p&gt;如果一个字体集，少了粗体定义，则会出现这样的提示。解决方案是，
手动指定文档中粗体对应的字体：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;c&quot;&gt;% CJK for XeTeX&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% http://www.ctan.org/pkg/xetexref&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% https://zh.wikipedia.org/wiki/XeTeX&lt;/span&gt;
-&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
-&lt;span class=&quot;k&quot;&gt;\setmainfont&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[Mapping=tex-text]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;WenQuanYi Micro Hei&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;c&quot;&gt;% http://mirror.bjtu.edu.cn/CTAN/macros/xetex/latex/xecjk/xeCJK.pdf&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra, xeCJK&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\setCJKmainfont&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[Mapping=tex-text]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;WenQuanYi Micro Hei&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\xeCJKsetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;AutoFakeBold=true, LoadFandol=false&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;latex-error-file-multindsty-not-found&quot;&gt;latex error: file `multind.sty’ not found&lt;/h3&gt;

&lt;p&gt;Windows 下的&lt;code class=&quot;highlighter-rouge&quot;&gt;MiKTeX 2.9&lt;/code&gt;不会出现这样的问题， &lt;code class=&quot;highlighter-rouge&quot;&gt;Lubuntu 14.04&lt;/code&gt;下的&lt;code class=&quot;highlighter-rouge&quot;&gt;TeX Live&lt;/code&gt;出现过这样的问题。
tex.ac.uk下的&lt;a href=&quot;http://www.tex.ac.uk/cgi-bin/texfaq2html-beta?label=multind&quot;&gt;一份文档&lt;/a&gt; 指出：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;makeidx.sty (is) Part of the LaTeX distribution&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;所以&lt;a href=&quot;http://bioinforma.weebly.com/random-troubleshooting.html#/&quot;&gt;该文档&lt;/a&gt;尝试安装&lt;code class=&quot;highlighter-rouge&quot;&gt;texlive-full&lt;/code&gt;来解决问题:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-base&quot; data-lang=&quot;base&quot;&gt;sudo apt-get install texlive-full
sudo texhash
sudo texconfig&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如果想要尝试手动安装&lt;code class=&quot;highlighter-rouge&quot;&gt;multind.sty&lt;/code&gt;，可以按照如下步骤：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;下载&lt;a href=&quot;http://ctan.org/pkg/multind&quot;&gt;multind.sty&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;参考&lt;a href=&quot;http://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages#Installing_a_package&quot;&gt;Wikibook/LaTeX&lt;/a&gt;安装sty文件&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;mkdir /usr/share/texmf/tex/latex/multind&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo texhash&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;makeindex-finance不会生成multi-index页面&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;makeindex finance&lt;/code&gt;不会生成Multi Index页面&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;finance&lt;/code&gt;是一个文件名，而非命令。对比如下两个命令：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;scott@c9 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~/repo/notes] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;makeindex finance
This is makeindex, version 2.15 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TeX Live 2013] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kpathsea + Thai support&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Scanning input file finance...done &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0 entries accepted, 0 rejected&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Nothing written &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;finance.ind.
Transcript written &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;finance.ilg.

scott@c9 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;~/repo/notes] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;makeindex finance.idx
This is makeindex, version 2.15 &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;TeX Live 2013] &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;kpathsea + Thai support&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Scanning input file finance.idx....done &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;22 entries accepted, 0 rejected&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Sorting entries....done &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;106 comparisons&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Generating output file finance.ind....done &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;59 lines written, 0 warnings&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.
Output written &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;finance.ind.
Transcript written &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;finance.ilg.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;xecjk-error-key-unknown&quot;&gt;xeCJK error: “key-unknown”&lt;/h3&gt;

&lt;p&gt;可能会在&lt;code class=&quot;highlighter-rouge&quot;&gt;Lubuntu 14.04&lt;/code&gt;下遇到这样的问题：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!
! xeCJK error: &lt;span class=&quot;s2&quot;&gt;&quot;key-unknown&quot;&lt;/span&gt;
!
! Sorry, but xeCJK/options does not have a key called &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;LoadFandol&lt;span class=&quot;s1&quot;&gt;'.
!
! The key `LoadFandol'&lt;/span&gt; is being ignored.
!
! See the xeCJK documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;further information.
!
! Type &amp;lt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&amp;gt; to &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;.
!...............................................  

l.37 ...setup&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;AutoFakeBold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;nv&quot;&gt;LoadFandol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;解决方案是，更换字体配置：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt; &lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra, xeCJK&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
-&lt;span class=&quot;k&quot;&gt;\setCJKmainfont&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[Mapping=tex-text]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;WenQuanYi Micro Hei&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\setCJKmainfont&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[BoldFont=Adobe Heiti Std]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Adobe Song Std&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;\xeCJKsetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;AutoFakeBold=true, CJKmath=true&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

+&lt;span class=&quot;c&quot;&gt;% Latin&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;fontspec, pifont&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\setmainfont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Gentium Book Basic&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+
 &lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;cjk字体的选用&quot;&gt;CJK字体的选用&lt;/h3&gt;

&lt;p&gt;字体的选用，首先要注意版权的问题。&lt;/p&gt;

&lt;p&gt;开源的CJK字体，可以选用&lt;a href=&quot;http://wenq.org/&quot;&gt;文泉驿&lt;/a&gt;，或者&lt;a href=&quot;http://blog.typekit.com/alternate/source-han-sans-chs/&quot;&gt;思源黑体&lt;/a&gt;。
建议在配置中指定粗体、斜体等格式对应的字体文件。
不过，目前并不能顺利地在LaTeX中使用思源黑体， 参考&lt;a href=&quot;http://www.zhihu.com/question/24535443&quot;&gt;知乎问答&lt;/a&gt;。
而且使用思源黑体，可能会遇到如下错误：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;xelatex.exe: The font file could not be found.
xelatex.exe: Data: Source Sans Pro/OT&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;可以参考知乎专题的&lt;a href=&quot;http://zhuanlan.zhihu.com/LaTeX/19807822&quot;&gt;解决方案&lt;/a&gt;，
或者stackoverflow上的&lt;a href=&quot;http://tex.stackexchange.com/questions/84186/how-can-i-use-source-sans-pro-in-tex-live-2012&quot;&gt;问答&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;除此之外，可以为印刷出版物选用经典的&lt;code class=&quot;highlighter-rouge&quot;&gt;Adobe Song Std&lt;/code&gt;字体，但需留意
&lt;a href=&quot;http://www.adobe.com/products/type/font-licensing/additional-license-rights.html&quot;&gt;版权&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;顺带提一下，拉丁字符字体，可选用开源的&lt;a href=&quot;http://scripts.sil.org/cms/scripts/page.php?item_id=Gentium&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Gentium&lt;/code&gt;&lt;/a&gt;字体集，
非常适合印刷出版物。&lt;/p&gt;

&lt;h3 id=&quot;cjk字体不能在数学公式环境中显示&quot;&gt;CJK字体不能在数学公式环境中显示&lt;/h3&gt;

&lt;p&gt;解决方案如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;-&lt;span class=&quot;k&quot;&gt;\xeCJKsetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;AutoFakeBold=true&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\xeCJKsetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;AutoFakeBold=true, CJKmath=true&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;使用强调emph而非加粗textbf&quot;&gt;使用强调&lt;code class=&quot;highlighter-rouge&quot;&gt;\emph&lt;/code&gt;而非加粗&lt;code class=&quot;highlighter-rouge&quot;&gt;\textbf&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;对于需要加粗的段落，建议使用声明式的强调（&lt;code class=&quot;highlighter-rouge&quot;&gt;\emph&lt;/code&gt;），而非命令式的加粗（&lt;code class=&quot;highlighter-rouge&quot;&gt;\textbf&lt;/code&gt;）。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikibooks.org/wiki/LaTeX/Fonts#Finding_fonts&quot;&gt;Wkibook/LaTeX&lt;/a&gt;中提到:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Do not use bold text in your paragraphs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://tex.stackexchange.com/a/1983&quot;&gt;tex.stackexchange/Stefan Kottwitz&lt;/a&gt;也有这样的说明:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Further, I rarely use physical font commands in my body text.
I use them to define styles in the preamble and
use the styles in the document afterwards,
ensuring consistency and allowing changes to be easily made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;可以参考&lt;a href=&quot;http://tex.stackexchange.com/questions/6754/what-is-the-canonical-way-to-redefine-the-emph-command/6757#6757&quot;&gt;此处&lt;/a&gt;
定义强调段落的样式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;+&lt;span class=&quot;c&quot;&gt;% bold emphasized text&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\DeclareRobustCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\%&lt;/span&gt;
+  &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;nomath&lt;span class=&quot;k&quot;&gt;\em&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\if&lt;/span&gt; b&lt;span class=&quot;k&quot;&gt;\expandafter\@&lt;/span&gt;car&lt;span class=&quot;k&quot;&gt;\f&lt;/span&gt;@series&lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;nil
+  &lt;span class=&quot;k&quot;&gt;\normalfont&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\bfseries&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;编译之后的文档输出有乱码&quot;&gt;编译之后的文档输出有乱码&lt;/h3&gt;

&lt;p&gt;检查&lt;code class=&quot;highlighter-rouge&quot;&gt;.tex&lt;/code&gt;文档的编码，是否为&lt;code class=&quot;highlighter-rouge&quot;&gt;UTF-8&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;file -i &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.tex&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;文献引用编号显示为&quot;&gt;文献引用编号显示为&lt;code class=&quot;highlighter-rouge&quot;&gt;[?]&lt;/code&gt;&lt;/h3&gt;

&lt;p&gt;仔细阅读编译日志，可以找到解决方案：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;makeindex idx_finance.idx
bibtex index.aux
xelatex index.tex
+xelatex index.tex&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;也就是说，编译过程中，执行两次编译命令。&lt;/p&gt;

&lt;h3 id=&quot;修改目录中索引的层级&quot;&gt;修改目录中“索引”的层级&lt;/h3&gt;

&lt;p&gt;如果想要将目录中“索引”的层级提高到“章节”级别，可以定义如下的排版格式：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;+  &lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
+  &lt;span class=&quot;c&quot;&gt;% Put section depth at the same level as \chapter.&lt;/span&gt;
+  &lt;span class=&quot;k&quot;&gt;\renewcommand*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\toclevel&lt;/span&gt;@section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;\printindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;idx&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;finance&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;Index of Finance&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+  &lt;span class=&quot;c&quot;&gt;% Put section depth back to its default value.&lt;/span&gt;
+  &lt;span class=&quot;k&quot;&gt;\renewcommand*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\toclevel&lt;/span&gt;@section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+  &lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;定义摘要章节的样式&quot;&gt;定义“摘要”章节的样式&lt;/h3&gt;

&lt;p&gt;参考stackoverflow中的讨论：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;c&quot;&gt;% http://stackoverflow.com/q/2737326&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\chapter*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\centering&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;\begin{normalsize}&lt;/span&gt;Abstract&lt;span class=&quot;nt&quot;&gt;\end{normalsize}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
+&lt;span class=&quot;nt&quot;&gt;\begin{quotation}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% abstract text&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% Abstract&lt;/span&gt;
+&lt;span class=&quot;nt&quot;&gt;\end{quotation}&lt;/span&gt;
+&lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;模板样例&quot;&gt;模板样例&lt;/h2&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-tex&quot; data-lang=&quot;tex&quot;&gt;&lt;span class=&quot;k&quot;&gt;\documentclass&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[a4paper]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;book&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% shortcut for scozv's github homepage&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;hyperref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\scozv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;https://github.com/scozv&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% shortcut for \ding{213}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\To&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\ding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;213&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;listings, color&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% shortcut for inline code snippet, like `code` in markdown&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% \newcommand{\cd}[1]{\colorbox[rgb]{0.86,0.86,0.86}{\lstinline$#1$}}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\cd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;[1]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\lstinline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;$}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% shortcut for section, subsection, subsubsection&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% mb stands for member&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\mb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;[1]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\subsection*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;#1&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\mmb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;[1]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\subsubsection*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;#1&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% set style for multiple lines code snippet&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\lstset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;numbers=left, numberstyle=&lt;span class=&quot;k&quot;&gt;\tiny&lt;/span&gt;
	, stepnumber=2, numbersep=5pt
	, backgroundcolor=&lt;span class=&quot;k&quot;&gt;\color&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[rgb]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;0.86,0.86,0.86&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	, basicstyle=&lt;span class=&quot;k&quot;&gt;\footnotesize\ttfamily&lt;/span&gt;
	, breaklines=true&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% set index&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;multind&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;idx&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;finance&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\idxf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;[1]&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;idx&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;finance&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;#1&lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% heading&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setcounter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;secnumdepth&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;3&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% set multi-ref&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;multibib&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;References of Programming&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;c&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;References of Finance&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newcites&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;f&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% CJK for XeTeX&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% http://www.ctan.org/pkg/xetexref&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% https://zh.wikipedia.org/wiki/XeTeX&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;% http://ctan.org/pkg/xecjk&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;xltxtra, xeCJK&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setCJKmainfont&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;[BoldFont=Adobe Heiti Std]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Adobe Song Std&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\xeCJKsetup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;AutoFakeBold=true, CJKmath=true&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% Latin&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;fontspec, pifont&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setmainfont&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Gentium Book Basic&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;%[ItalicFont=Gentium Book Basic Bold]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% intertext, trigleq and proof&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\usepackage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;amsmath, amssymb, amsthm&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% bold emphasized text&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\DeclareRobustCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\em&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;nomath&lt;span class=&quot;k&quot;&gt;\em&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\if&lt;/span&gt; b&lt;span class=&quot;k&quot;&gt;\expandafter\@&lt;/span&gt;car&lt;span class=&quot;k&quot;&gt;\f&lt;/span&gt;@series&lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;nil
  &lt;span class=&quot;k&quot;&gt;\normalfont&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\bfseries&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;\fi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% tiny margin note&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\long\def\@&lt;/span&gt;ympar#1&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;savemarbox&lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;marbox&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\small&lt;/span&gt; #1&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\global\setbox\@&lt;/span&gt;currbox&lt;span class=&quot;k&quot;&gt;\copy\@&lt;/span&gt;marbox
  &lt;span class=&quot;k&quot;&gt;\@&lt;/span&gt;xympar&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% reduce the space of itemize&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\newlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\wideitemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\wideitemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;.5&lt;span class=&quot;k&quot;&gt;\itemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\addtolength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\wideitemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;-7pt&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;%&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\let\olditem\item&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\renewcommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\setlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\itemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\wideitemsep&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\olditem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;\begin{document}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Introduction of Building Documents with LaTeX&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Scott&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\date&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Aug, 12, 2015&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\maketitle&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\chapter*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\centering&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;\begin{normalsize}&lt;/span&gt;Abstract&lt;span class=&quot;nt&quot;&gt;\end{normalsize}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\begin{quotation}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\noindent&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;% abstract text&lt;/span&gt;
This artical will give brief introduction for TeX and LaTeX,
then discuss a few issues during using LaTeX
and how to display LaTeX eqation on web page.
Finally, a LaTeX template will be attached in Appendix.
&lt;span class=&quot;nt&quot;&gt;\end{quotation}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\clearpage&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;% no indent of second ... paragraphs of each section&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\parindent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0pt&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\setlength&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\parskip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;1.3ex plus 0.5ex minus 0.3ex&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Part I&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;C01-01&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;p1&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;c01&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Part II&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;C02-01&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;p2&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;c01&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;C02-02&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;\include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;p2&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;c02&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;\cleardoublepage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\phantomsection&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;chapter&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\bibliographystylec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;GBT7714-2005NLang&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\bibliographyc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;code/ref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;\makeatletter&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;% Put section depth at the same level as \chapter.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\renewcommand*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\toclevel&lt;/span&gt;@section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;0&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\printindex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;idx&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;finance&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;Index of Finance&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;% Put section depth back to its default value.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\renewcommand*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\toclevel&lt;/span&gt;@section&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\makeatother&lt;/span&gt;  

  &lt;span class=&quot;k&quot;&gt;\cleardoublepage&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\phantomsection&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\addcontentsline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;toc&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;chapter&lt;span class=&quot;p&quot;&gt;}{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;\bibnamef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\bibliographystylef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;GBT7714-2005NLang&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;\bibliographyf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;finance/ref&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;\appendix&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\part&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Appendix&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\chapter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;Appendix I&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;\include&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;appendix&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;\end{document}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:TUG01&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://tug.org/tex-ptr-faq&quot;&gt;Pointers to Frequently Asked and Answered Questions&lt;/a&gt;. tug.org. [OL]&amp;nbsp;&lt;a href=&quot;#fnref:TUG01&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:WIK01&quot;&gt;
      &lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/LaTeX#.E8.B6.A3.E5.91.B3.E6.87.89.E7.94.A8&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LaTeX&lt;/code&gt;的趣味应用&lt;/a&gt;. wikipedia.org. [OL]&amp;nbsp;&lt;a href=&quot;#fnref:WIK01&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/guide/2015/08/12/introduction-of-building-documents-with-latex</link>
        <guid>https://scozv.github.io/blog/zh/guide/2015/08/12/introduction-of-building-documents-with-latex</guid>
        <pubDate>2015-08-12T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>对Eric Lippert所著的Monads系列文章的综述</title>
        <description>
&lt;h1 class=&quot;no_toc&quot; id=&quot;摘要&quot;&gt;摘要&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文主要对几篇讨论Monad的文献进行综述，文中的大部分代码都来自参考文献（我会指明参考来源）。本文有几处地方提出了几个思考题，这些思考题也来自参考文献，建议先尝试写写这些思考题，再去阅读参考文献。这一份综述尝试抛开函数编程的背景，去看看我们平时已经在使用但却没有留意的一些Monad。文章主要涉及到C#这门语言，但是不同的语言背景并不会有太多的影响。&lt;/p&gt;

  &lt;p&gt;我推荐阅读参考文献中的英文原文。虽然中文意合英文形合&lt;sup id=&quot;fnref:G08&quot;&gt;&lt;a href=&quot;#fn:G08&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;，但是本文的综述将使用中文，除了部分程序代码，和一些术语、人名 that 我不打算翻译的。&lt;/p&gt;

  &lt;p&gt;本文对Haskell和.NET中异步Task的理解不够，如果需要了解Task这个Monad的话，请参考Stephen Toub的文章&lt;sup id=&quot;fnref:ST13&quot;&gt;&lt;a href=&quot;#fn:ST13&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;。另外，本文对Monad的综述都建立在强类型系统的基础上，关于JavaScript中的Monad，请观看Douglas Crockford的演讲。Douglas说“假如你理解了Monad，你就失去了用语言来解释它的能力”&lt;sup id=&quot;fnref:DC13&quot;&gt;&lt;a href=&quot;#fn:DC13&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#一个略微复杂的思考题&quot; id=&quot;markdown-toc-一个略微复杂的思考题&quot;&gt;一个略微复杂的思考题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#身边的几个泛型类&quot; id=&quot;markdown-toc-身边的几个泛型类&quot;&gt;身边的几个泛型类&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#数学理论中的复合映射&quot; id=&quot;markdown-toc-数学理论中的复合映射&quot;&gt;数学理论中的复合映射&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#从复合映射到复合函数&quot; id=&quot;markdown-toc-从复合映射到复合函数&quot;&gt;从复合映射到复合函数&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#一个简单的加法运算&quot; id=&quot;markdown-toc-一个简单的加法运算&quot;&gt;一个简单的加法运算&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#更一般化的加法运算&quot; id=&quot;markdown-toc-更一般化的加法运算&quot;&gt;更一般化的加法运算&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#平面化&quot; id=&quot;markdown-toc-平面化&quot;&gt;平面化&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monad的历史&quot; id=&quot;markdown-toc-monad的历史&quot;&gt;Monad的历史&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#monad的性质&quot; id=&quot;markdown-toc-monad的性质&quot;&gt;Monad的性质&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#开头的思考题&quot; id=&quot;markdown-toc-开头的思考题&quot;&gt;开头的思考题&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#总结&quot; id=&quot;markdown-toc-总结&quot;&gt;总结&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#参考文献&quot; id=&quot;markdown-toc-参考文献&quot;&gt;参考文献&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;一个略微复杂的思考题&quot;&gt;一个略微复杂的思考题&lt;/h1&gt;
&lt;p&gt;假如我们有如下这样一个委托，称其为K：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;delegate Answer K&amp;lt;T,Answer&amp;gt;(Func&amp;lt;T,Answer&amp;gt; k);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，T、Answer都是泛型类型。这个委托等价于：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Func&amp;lt;Func&amp;lt;T, Answer&amp;gt;, Answer&amp;gt; K;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;也就是说，K这个类型是一类函数签名，这类函数返回一个值Answer，接收一个参数，而接收的参数又是一类函数Func&amp;lt;T, Answer&amp;gt;。&lt;/p&gt;

&lt;p&gt;另外，给出K的构造方法：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static K&amp;lt;T, Answer&amp;gt; ToContinuation&amp;lt;T, Answer&amp;gt;(this T value)
{
	return (Func&amp;lt;T, Answer&amp;gt; solve) =&amp;gt; solve(value);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在的问题是，参考K的构造方法，如何实现下面这个方法，保证它能够编译通过，即方法的返回类型和方法签名匹配？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static K&amp;lt;U, Answer&amp;gt; SelectMany&amp;lt;T, U, Answer&amp;gt;(this K&amp;lt;T, Answer&amp;gt; m, Func&amp;lt;T, K&amp;lt;U, Answer&amp;gt;&amp;gt; k)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个问题来自Wes Dyer文章的最后一部分&lt;sup id=&quot;fnref:WD08&quot;&gt;&lt;a href=&quot;#fn:WD08&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，我认为，如果能在看懂题意的基础上，尝试写一写内部实现，将有助于理解Monad。如果对题目有些费解，请先往下看。本文的最后会再次提到这个题目。&lt;/p&gt;

&lt;h1 id=&quot;身边的几个泛型类&quot;&gt;身边的几个泛型类&lt;/h1&gt;
&lt;p&gt;Eric Lippert在他的Monad系列&lt;sup id=&quot;fnref:EL13&quot;&gt;&lt;a href=&quot;#fn:EL13&quot; class=&quot;footnote&quot;&gt;5&lt;/a&gt;&lt;/sup&gt;中，给出了如下几个泛型类，并借助这几个泛型类，由浅入深地揭示了Monad的性质。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nullable&amp;lt;T&amp;gt;
IEnumerable&amp;lt;T&amp;gt;
Lazy&amp;lt;T&amp;gt;
OnDemand&amp;lt;T&amp;gt;
Task&amp;lt;T&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中，OnDemand&amp;lt;T&amp;gt;本质上是Func&amp;lt;T&amp;gt;，指的是一类无参有返回值的函数，Eric这样做，是为了和更一般的Func&amp;lt;V, U&amp;gt;加以区别。&lt;/p&gt;

&lt;p&gt;这几个泛型类的特点是，它们都赋予了T新的能力：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nullable&amp;lt;T&amp;gt; 使得T可空；&lt;/li&gt;
  &lt;li&gt;IEnumerable&amp;lt;T&amp;gt; 使得T可以被遍历；&lt;/li&gt;
  &lt;li&gt;Lazy&amp;lt;T&amp;gt; 使得T只在第一次需要的时候才计算，之后都从cache中获取；&lt;/li&gt;
  &lt;li&gt;OnDemand&amp;lt;T&amp;gt; 使得T只有在需要的时候才被调用；&lt;/li&gt;
  &lt;li&gt;Task&amp;lt;T&amp;gt; 使得…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为这些泛型类扩展了T的能力，所以，我们称它们为Amplifier，对于这一类扩展后的类型，我们统一用M&amp;lt;T&amp;gt;来表示。&lt;/p&gt;

&lt;h1 id=&quot;数学理论中的复合映射&quot;&gt;数学理论中的复合映射&lt;/h1&gt;
&lt;p&gt;抛开计算机语言或者函数编程的思维，我们先来回顾一下高等数学中复合函数的概念。为了和计算机程序设计中的函数加以区别，我们使用映射这个术语。&lt;/p&gt;

&lt;p&gt;给定如下两个映射：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;g(x) =  x^2-4x, f(x) = \ln (x+4)&lt;/script&gt;

&lt;p&gt;令复合映射：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x) = f(g(x))&lt;/script&gt;

&lt;p&gt;符号计算得知：&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;p(x)= \ln (x^2-4x+4) = \ln [(x-2)^2] = 2 \ln (x-2)&lt;/script&gt;

&lt;p&gt;我们可以看到，复合映射之后，新的映射计算过程被重新组合，我们并不需要先计算出&lt;script type=&quot;math/tex&quot;&gt;x^2-4x&lt;/script&gt;的值，再代入第二层函数。&lt;/p&gt;

&lt;p&gt;我们思考，假如：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;令&lt;script type=&quot;math/tex&quot;&gt;x=e+2=4.718281828459045&lt;/script&gt;，我们是计算&lt;script type=&quot;math/tex&quot;&gt;(4.718281828459045)^2-4*4.718281828459045&lt;/script&gt;容易呢，还是计算&lt;script type=&quot;math/tex&quot;&gt;2 \ln (e+2-2)=2\ln e = 2&lt;/script&gt;容易？&lt;/li&gt;
  &lt;li&gt;或者，运算器不支持平方运算，却有一张对数表，那么我们通过符号运算化简得到&lt;script type=&quot;math/tex&quot;&gt;p(x)&lt;/script&gt;，才能计算出结果；&lt;/li&gt;
  &lt;li&gt;又或者，在程序语言中，传入的参数是Int.MaxValue，平方运算很可能超出存储的范围，那么我们也最好到最后再去用新的映射加以计算。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;所以，有些事儿不要急着去处理。后面我们还会看到这句话。&lt;/p&gt;

&lt;h1 id=&quot;从复合映射到复合函数&quot;&gt;从复合映射到复合函数&lt;/h1&gt;
&lt;p&gt;Wes Dyer在他的文章中用程序语言的方式来描述复合映射这样的概念&lt;sup id=&quot;fnref:WD08:1&quot;&gt;&lt;a href=&quot;#fn:WD08&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;，Wes Dyer首先给出对一般类型T的函数复合：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Func&amp;lt;T, V&amp;gt; Compose&amp;lt;T, U, V&amp;gt;(this Func&amp;lt;U, V&amp;gt; f, Func&amp;lt;T, U&amp;gt; g)
{
    return x =&amp;gt; f(g(x));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在前面的小节里，我们提到，诸如Nullable&amp;lt;T&amp;gt;这些泛型类，它们扩展了T的能力，对于这一类扩展后的类型，我们统一用M&lt;T&gt;来表示。&lt;/T&gt;&lt;/p&gt;

&lt;p&gt;如果我们用M&amp;lt;V&amp;gt;和M&amp;lt;U&amp;gt;来替换上面的签名，比如用Nullable&amp;lt;V&amp;gt;和Nullable&amp;lt;U&amp;gt;来替换：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static Func&amp;lt;T, Nullable&amp;lt;V&amp;gt;&amp;gt; Compose&amp;lt;T, U, V&amp;gt;(this Func&amp;lt;U, Nullable&amp;lt;V&amp;gt;&amp;gt; f, Func&amp;lt;T, Nullable&amp;lt;U&amp;gt;&amp;gt; g)
{
    return x =&amp;gt; f(g(x)); // 编译错误，g(x)返回一个Nullable&amp;lt;U&amp;gt;，但是f只接收U作为传入参数
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;简单的替换导致编译错误，因此Wes Dyer在文中引入了一个中间函数Bind，用来解决值域属于M&amp;lt;T&amp;gt;复合函数的绑定：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static M&amp;lt;V&amp;gt; Bind&amp;lt;U, V&amp;gt;(this M&amp;lt;U&amp;gt; m, Func&amp;lt;U, M&amp;lt;V&amp;gt;&amp;gt; k);

public static Func&amp;lt;T, M&amp;lt;V&amp;gt;&amp;gt; Compose&amp;lt;T, U, V&amp;gt;(this Func&amp;lt;U, M&amp;lt;V&amp;gt;&amp;gt; f, Func&amp;lt;T, M&amp;lt;U&amp;gt;&amp;gt; g)
{
    return x =&amp;gt; Bind(g(x), f);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么，前文提到的那些M&amp;lt;T&amp;gt;：Nullable&amp;lt;T&amp;gt;, Lazy&amp;lt;T&amp;gt;, OnDemand&amp;lt;T&amp;gt;, Task&amp;lt;T&amp;gt;, IEnumerable&amp;lt;T&amp;gt;，这些类型的Bind函数分别应该如何实现呢？&lt;/p&gt;

&lt;h1 id=&quot;一个简单的加法运算&quot;&gt;一个简单的加法运算&lt;/h1&gt;

&lt;p&gt;扩展了一个T之后，我们现在有了增强版的类型M&amp;lt;T&amp;gt;。一个类型，总会有一些动态的行为。Eric Lippert在他的Monads系列中的第三部分，为上述的一些M&amp;lt;int&amp;gt;增加了一个加法运算&lt;sup id=&quot;fnref:EL13-3&quot;&gt;&lt;a href=&quot;#fn:EL13-3&quot; class=&quot;footnote&quot;&gt;6&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Nullable&amp;lt;int&amp;gt; AddOne(Nullable&amp;lt;int&amp;gt; nullable)
{
  if (nullable.HasValue)
  {
    int unwrapped = nullable.Value;
    int result = unwrapped + 1;
    return CreateSimpleNullable(result);
  }
  else  
    return new Nullable&amp;lt;int&amp;gt;();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;以及OnDemand&amp;lt;T&amp;gt;的加法运算：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static OnDemand&amp;lt;int&amp;gt; AddOne(OnDemand&amp;lt;int&amp;gt; onDemand)
{
  return ()=&amp;gt;
  {
    int unwrapped = onDemand();
    int result = unwrapped + 1;
    return result;
  };
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意，我们前面提到，有些事儿不要着急去处理，OnDemand&amp;lt;int&amp;gt;的加法运算为什么不这样写呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// 不要采用这样的实现方式
static OnDemand&amp;lt;int&amp;gt; AddOne(OnDemand&amp;lt;int&amp;gt; onDemand)
{
  int unwrapped = onDemand();
  int result = unwrapped + 1;
  return ()=&amp;gt;{return result;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为我们过早地计算了最初的onDemand承载的值。&lt;/p&gt;

&lt;p&gt;现在，参考上面两个实现，请写出其它M&amp;lt;T&amp;gt;的加法运算：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Lazy&amp;lt;int&amp;gt; AddOne(Lazy&amp;lt;int&amp;gt; lazy)
static IEnumerable&amp;lt;int&amp;gt; AddOne(IEnumerable&amp;lt;int&amp;gt; sequence)
async static Task&amp;lt;int&amp;gt; AddOne(Task&amp;lt;int&amp;gt; task)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;答案在Eric的Monads系列中，请阅读参考文献。&lt;/p&gt;

&lt;h1 id=&quot;更一般化的加法运算&quot;&gt;更一般化的加法运算&lt;/h1&gt;
&lt;p&gt;如何我们仔细地阅读上面的两个加法运算，我们会发现，加法这个操作，只出现在一个地方：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;int result = unwrapped + 1;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Eric在他的Monads系列的第四部分，将加法运算更一般化了&lt;sup id=&quot;fnref:EL13-4&quot;&gt;&lt;a href=&quot;#fn:EL13-4&quot; class=&quot;footnote&quot;&gt;7&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Nullable&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(Nullable&amp;lt;A&amp;gt; nullable, Func&amp;lt;A, R&amp;gt; function)
{
  if (nullable.HasValue)
  {
    A unwrapped = nullable.Value;
    R result = function(unwrapped);
    return new Nullable&amp;lt;R&amp;gt;(result);
  }
  else
    return new Nullable&amp;lt;R&amp;gt;();
}

// 使用ApplyFunction构造具体的复合函数
static Nullable&amp;lt;int&amp;gt; AddOne(Nullable&amp;lt;int&amp;gt; nullable)
{
  return ApplyFunction(nullable, (int x) =&amp;gt; x + 1);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以看到，加法运算只是ApplyFunction的一个特例。&lt;/p&gt;

&lt;p&gt;同样的，参考上面的实现，请思考其它几个M&amp;lt;T&amp;gt;的ApplyFunction应该如何实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Lazy&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(Lazy&amp;lt;A&amp;gt; lazy, Func&amp;lt;A, R&amp;gt; function);
static OnDemand&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(OnDemand&amp;lt;A&amp;gt; onDemand, Func&amp;lt;A, R&amp;gt; function);
static IEnumerable&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(IEnumerable&amp;lt;A&amp;gt; sequence, Func&amp;lt;A, R&amp;gt; function);
async static Task&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(Task&amp;lt;A&amp;gt; sequence, Func&amp;lt;A, R&amp;gt; function);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;平面化&quot;&gt;平面化&lt;/h1&gt;
&lt;p&gt;设想，我们有如下一个方法，它计算一个整数的对数，当x小于零的时候，&lt;script type=&quot;math/tex&quot;&gt;\log&lt;/script&gt;函数没有意义，将返回一个空：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nullable&amp;lt;int&amp;gt; SaftLog(int x) {return x &amp;gt; 0 ? Math.Log(x) : null;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;如果把这个函数传给上一节给出的ApplyFunction，会有什么问题呢？&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Nullable&amp;lt;R&amp;gt; ApplyFunction&amp;lt;A, R&amp;gt;(Nullable&amp;lt;A&amp;gt; nullable, Func&amp;lt;A, R&amp;gt; function);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过依次比对类型签名，我们发现，R对应的是Nullable&amp;lt;int&amp;gt;，也就是说，ApplyFunction返回的类型是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Nullable&amp;lt;Nullable&amp;lt;int&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;首先，这在C#是不合法的，Nullable只能用在值类型上面。其次，就算合法，但也过多嵌套。同样的，Lazy&amp;lt;Lazy&amp;lt;int&amp;gt;&amp;gt;，OnDemand&amp;lt;OnDemand&amp;lt;T&amp;gt;&amp;gt;等都是不合适的。我们需要将其平面化。&lt;/p&gt;

&lt;p&gt;Eric在他Monads系列的第五部分给出了新的一个函数签名&lt;sup id=&quot;fnref:EL13-5&quot;&gt;&lt;a href=&quot;#fn:EL13-5&quot; class=&quot;footnote&quot;&gt;8&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Nullable&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(Nullable&amp;lt;A&amp;gt; nullable, Func&amp;lt;A, Nullable&amp;lt;R&amp;gt;&amp;gt; function)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;回忆，在复合函数那一小节，Wes Dyer给出了如下的函数签名：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static M&amp;lt;V&amp;gt; Bind&amp;lt;U, V&amp;gt;(this M&amp;lt;U&amp;gt; m, Func&amp;lt;U, M&amp;lt;V&amp;gt;&amp;gt; k);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们看到，这两个签名本质上是相同的。&lt;/p&gt;

&lt;p&gt;同样的，作为辅助思考的练习，请写出如下签名的实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static Nullable&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(Nullable&amp;lt;A&amp;gt; nullable, Func&amp;lt;A, Nullable&amp;lt;R&amp;gt;&amp;gt; function);
static OnDemand&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(OnDemand&amp;lt;A&amp;gt; onDemand, Func&amp;lt;A, OnDemand&amp;lt;R&amp;gt;&amp;gt; function);
static Lazy&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(Lazy&amp;lt;A&amp;gt; lazy, Func&amp;lt;A, Lazy&amp;lt;R&amp;gt;&amp;gt; function);
static async Task&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(Task&amp;lt;A&amp;gt; task, Func&amp;lt;A, Task&amp;lt;R&amp;gt;&amp;gt; function);
static IEnumerable&amp;lt;R&amp;gt; ApplySpecialFunction&amp;lt;A, R&amp;gt;(IEnumerable&amp;lt;A&amp;gt; sequence, Func&amp;lt;A, IEnumerable&amp;lt;R&amp;gt;&amp;gt; function);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;monad的历史&quot;&gt;Monad的历史&lt;/h1&gt;
&lt;p&gt;Wes Dyer在他的文章中简述了Monad的历史&lt;sup id=&quot;fnref:WD08:2&quot;&gt;&lt;a href=&quot;#fn:WD08&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;。他指出，Monad这个概念来自理论数学的范畴论，Eugenio Moggi在其文章《Notions of computation and monads》将Monad引入了计算机科学领域。Philip Wadler在其著作《The essence of functional programming》探讨了Monad的应用。Haskell中更是大量的使用了Monad。&lt;/p&gt;

&lt;p&gt;这样一来，使得我们一说到Moand就和函数编程扯上关系。就好比面向对象、UML的特性容易表达设计模式那样，我们常常一说到设计模式，就往OOP上面靠&lt;sup id=&quot;fnref:CH13&quot;&gt;&lt;a href=&quot;#fn:CH13&quot; class=&quot;footnote&quot;&gt;9&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;p&gt;要知道，函数编程里面的匿名函数λ表达式，也是从理论数学中发展过来的&lt;sup id=&quot;fnref:WL14&quot;&gt;&lt;a href=&quot;#fn:WL14&quot; class=&quot;footnote&quot;&gt;10&lt;/a&gt;&lt;/sup&gt;。Eric也多次提及LINQ的设计者之一Erik Meijer正是Haskell的设计参与者，比如他在StackOverflow上对LINQ与Haskell关系的回答&lt;sup id=&quot;fnref:EL11&quot;&gt;&lt;a href=&quot;#fn:EL11&quot; class=&quot;footnote&quot;&gt;11&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;

&lt;h1 id=&quot;monad的性质&quot;&gt;Monad的性质&lt;/h1&gt;
&lt;p&gt;Eric指出Monad是类型（Type）的一种设计模式，是对现有Type的能力的一种放大（amplifier），或者是对T的一种wrapper，借助之前提到的几个M&amp;lt;T&amp;gt;，我们很容易地设计出一种“asynchronously-computed sequence of nullable bytes”&lt;sup id=&quot;fnref:EL13-2&quot;&gt;&lt;a href=&quot;#fn:EL13-2&quot; class=&quot;footnote&quot;&gt;12&lt;/a&gt;&lt;/sup&gt;类型：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Task&amp;lt;IEnumerable&amp;lt;Nullable&amp;lt;int&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;所以我们需要一个构造器将T转化为M&amp;lt;T&amp;gt;，这就是下面我们会看到的Unit。&lt;/p&gt;

&lt;p&gt;另外，Moanded类型还需要定义一个操作，用来复合函数。该放大器不会改变底层（Underlying）类型的原有特性。更重要的是，诸如OnDemand的复合，我们只有在最后invoke函数的时候，才去计算，不能过早。诸如IEnumerable&amp;lt;T&amp;gt;的复合，只有最终需要内部元素的时候，才去遍历，不能过早。诸如IQueryable&amp;lt;T&amp;gt;，只有最终需要拿回查询结果的时候，再去连接数据源，也不能过早。&lt;/p&gt;

&lt;p&gt;一个直观的例子就是：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// C#
IEnumerabe&amp;lt;T&amp;gt;.Select().Where().FirstOrDefault();
// Scala
Seq[T].map().filter().firstOrDefault();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以看到，在这样一条复合运算中，最终只需要一个值，如果数组很长，映射的运算非常耗时，过早地遍历数组显然不是明智之举。是的，LINQ的延迟运算，就是基于这样的思想。&lt;/p&gt;

&lt;p&gt;Eric在文中提出&lt;sup id=&quot;fnref:EL13-8&quot;&gt;&lt;a href=&quot;#fn:EL13-8&quot; class=&quot;footnote&quot;&gt;13&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;You might have noticed that the asynchronous, lazy, on-demand and sequence monads all have an interesting common property: when you apply a function to any of these monads, what you get back is an object that will perform that function in the future. Essentially, the bind function takes an immutable workflow and its subsequent step, and returns you the resulting new workflow. The bind operator does not execute the workflow; it makes a new workflow out of an old one.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个复合操作就是我们下面看到的Bind，在C#中，对应的函数名为SelectMany，在Scala中，对应的叫flatMap。&lt;/p&gt;

&lt;p&gt;Wes Dyer表明，如果放大用Unit来构造，复合用Bind来表示的话，我们需要如下两个签名&lt;sup id=&quot;fnref:WD08:3&quot;&gt;&lt;a href=&quot;#fn:WD08&quot; class=&quot;footnote&quot;&gt;4&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static M&amp;lt;T&amp;gt;  Unit&amp;lt;T&amp;gt;(T value);
static M&amp;lt;R&amp;gt;  Bind&amp;lt;T, R&amp;gt;(M&amp;lt;T&amp;gt;, Func&amp;lt;T, M&amp;lt;R&amp;gt;&amp;gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;并满足如下的三个法则：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Left Identity&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bind(Unit(e), k) = k(e)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Right Identity&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bind(m, Unit) = m
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;结合律&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Bind(m, x =&amp;gt; Bind(k(x), y =&amp;gt; h(y)) = Bind(Bind(m, x =&amp;gt; k(x)), y =&amp;gt; h(y))
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;开头的思考题&quot;&gt;开头的思考题&lt;/h1&gt;

&lt;p&gt;文章开头的练习题来自Wes Dyer的文献，那道题让我们习惯函数的返回值也是一个函数。&lt;/p&gt;

&lt;p&gt;接下来，让我们来看Eric给出的思考题，这个思考题让我们尝试去设计一个Monad。&lt;/p&gt;

&lt;p&gt;正如上一节所说，C#的Bind取名为SelectMany，给定实现&lt;sup id=&quot;fnref:EL13-10&quot;&gt;&lt;a href=&quot;#fn:EL13-10&quot; class=&quot;footnote&quot;&gt;14&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static IEnumerable&amp;lt;R&amp;gt; SelectMany&amp;lt;A, R&amp;gt;(this IEnumerable&amp;lt;A&amp;gt; sequence, Func&amp;lt;A, IEnumerable&amp;lt;R&amp;gt;&amp;gt; function)
{
  foreach(A outerItem in sequence)
    foreach(R innerItem in function(outerItem))
      yield return innerItem;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用SelectMany，请设计如下的实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;static IEnumerable&amp;lt;A&amp;gt; Where(this IEnumerable&amp;lt;A&amp;gt; source, Func&amp;lt;A, boolean&amp;gt; prediction);
static IEnumerable&amp;lt;R&amp;gt; Selcect(this IEnumerable&amp;lt;A&amp;gt; source, Func&amp;lt;A, R&amp;gt; map);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;借助SelectMany、Where和Select，我们可以实现更复杂的Join操作，请练习（暂时不要考虑时间复杂度效率的问题）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public static IEnumerable&amp;lt;TResult&amp;gt; Join&amp;lt;TOuter, TInner, TKey, TResult&amp;gt;(
    this IEnumerable&amp;lt;TOuter&amp;gt; outer,
    IEnumerable&amp;lt;TInner&amp;gt; inner,
    Func&amp;lt;TOuter, TKey&amp;gt; outerKeySelector,
    Func&amp;lt;TInner, TKey&amp;gt; innerKeySelector,
    Func&amp;lt;TOuter, TInner, TResult&amp;gt; resultSelector,
    IEqualityComparer&amp;lt;TKey&amp;gt; comparer
)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我强烈建议在查阅文献之前，动手写写这三个实现，对我们理解Monad有很大的帮助。我自己也尝试写过一遍，你可以参考我的Gist。&lt;/p&gt;

&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;
&lt;p&gt;Monad是一种类型的设计模式，用来放大现有Type的能力。需要满足一些法则，并且向Monad上面添加操作流的时候，我们不要提早运行，而丢失了Monad特性。&lt;/p&gt;

&lt;p&gt;添加操作类的过程，在Haskell中叫Bind，在C#中叫SelectMany，在Scala中叫flatMap。这样，对于凡是实现了这些签名的类，就可以在For Comperhensoin中使用了，Eric在Monad系列的第十二部分，对此有详细的阐述，同时还讨论了如何解决SelectMany多重嵌套导致的效率低下问题。&lt;/p&gt;

&lt;p&gt;正如Eric指出的那样，Monad是类型的一种设计模式。所以Scala的Try[T]类，Rx库（rx.codeplex.com）中的IObservable&amp;lt;T&amp;gt;，还有LINQ，都是基于这样的设计模式。&lt;/p&gt;

&lt;p&gt;最后，再次推荐阅读参考文献的英文原文。&lt;/p&gt;

&lt;h1 id=&quot;参考文献&quot;&gt;参考文献&lt;/h1&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:G08&quot;&gt;
      &lt;p&gt;郭富强. 意合形合的汉英对比研究[D]. 华东师范大学 2006&amp;nbsp;&lt;a href=&quot;#fnref:G08&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:ST13&quot;&gt;
      &lt;p&gt;Stephen Toub. &lt;a href=&quot;http://blogs.msdn.com/b/pfxteam/archive/2013/04/03/tasks-monads-and-linq.aspx&quot;&gt;Tasks, Monads, and LINQ&lt;/a&gt;[J/OL] 2013&amp;nbsp;&lt;a href=&quot;#fnref:ST13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:DC13&quot;&gt;
      &lt;p&gt;Douglas Crockford. Monads and Gonads, in the Speech named &lt;em&gt;JavaScript the Good Parts&lt;/em&gt;&amp;nbsp;&lt;a href=&quot;#fnref:DC13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:WD08&quot;&gt;
      &lt;p&gt;Wes Dyer. &lt;a href=&quot;http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx&quot;&gt;The Marvels of Monads&lt;/a&gt;[J/OL] 2008&amp;nbsp;&lt;a href=&quot;#fnref:WD08&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:WD08:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:WD08:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;3&lt;/sup&gt;&lt;/a&gt;&amp;nbsp;&lt;a href=&quot;#fnref:WD08:3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;sup&gt;4&lt;/sup&gt;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/category/monads&quot;&gt;Monads&lt;/a&gt;[J/OL] 2013&amp;nbsp;&lt;a href=&quot;#fnref:EL13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-3&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/02/28/monads-part-three/&quot;&gt;Monads, Part 3&lt;/a&gt;[J/OL] 2013.02.28&amp;nbsp;&lt;a href=&quot;#fnref:EL13-3&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-4&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/03/04/monads-part-four/&quot;&gt;Monads, Part 4&lt;/a&gt;[J/OL] 2013.03.04&amp;nbsp;&lt;a href=&quot;#fnref:EL13-4&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-5&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/03/07/monads-part-five/&quot;&gt;Monads, Part 5&lt;/a&gt;[J/OL] 2013.03.07&amp;nbsp;&lt;a href=&quot;#fnref:EL13-5&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:CH13&quot;&gt;
      &lt;p&gt;陈浩. &lt;a href=&quot;http://coolshell.cn/articles/8961.html&quot;&gt;从面向对象的设计模式看软件设计&lt;/a&gt;[J/OL] 2013&amp;nbsp;&lt;a href=&quot;#fnref:CH13&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:WL14&quot;&gt;
      &lt;p&gt;维基百科. &lt;a href=&quot;https://en.wikipedia.org/wiki/Lambda_calculus&quot;&gt;λ演算&lt;/a&gt;[J/OL] 2014&amp;nbsp;&lt;a href=&quot;#fnref:WL14&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL11&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://stackoverflow.com/a/4683716&quot;&gt;Answer to &lt;em&gt;Are there any connections between Haskell and LINQ?&lt;/em&gt;&lt;/a&gt;[EB/OL]. StackOverflow.com 2011.01.13&amp;nbsp;&lt;a href=&quot;#fnref:EL11&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-2&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/02/25/monads-part-two/&quot;&gt;Monads, Part 2&lt;/a&gt;[J/OL] 2013.02.25&amp;nbsp;&lt;a href=&quot;#fnref:EL13-2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-8&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/03/18/monads-part-eight/&quot;&gt;Monads, Part 8&lt;/a&gt;[J/OL] 2013.03.18&amp;nbsp;&lt;a href=&quot;#fnref:EL13-8&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:EL13-10&quot;&gt;
      &lt;p&gt;Eric Lippert. &lt;a href=&quot;http://ericlippert.com/2013/03/25/monads-part-ten/&quot;&gt;Monads, Part 10&lt;/a&gt;[J/OL] 2013.03.25&amp;nbsp;&lt;a href=&quot;#fnref:EL13-10&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
        <link>https://scozv.github.io/blog/zh/pattern/2014/06/20/understand-monads-in-c</link>
        <guid>https://scozv.github.io/blog/zh/pattern/2014/06/20/understand-monads-in-c</guid>
        <pubDate>2014-06-20T00:00:00+08:00</pubDate>
      </item>
    
  
    
    
  
    
      <item>
        <title>将网页版的QUnit.js测试移植到Node.js</title>
        <description>
&lt;blockquote&gt;
  &lt;p&gt;本文描述了我让代码在浏览器和Node.js两边都能运行的过程，略属娱乐。
因为就项目 &lt;a href=&quot;https://github.com/scozv/tango&quot; title=&quot;Tango.js&quot;&gt;Tango.js&lt;/a&gt; 而言，我认为，重点在算法（ &lt;em&gt;Algo&lt;/em&gt;rithm ）。
至于引入大文本输入测试（参见 &lt;a href=&quot;https://github.com/scozv/algo-js/issues/18&quot; title=&quot;issue #18&quot;&gt;issue #18&lt;/a&gt; ），是为了保证算法的正确和高效，以及今后的重构，
当然这也很重要。引入持续集成，是尽可能想让一切都是自动化。&lt;/p&gt;

  &lt;p&gt;对于已经完成了成套测试的网页版QUnit.js环境，要想移至到Node.js上运行，
并且重构的代码要尽可能的少，测试代码最好不要有任何变化。&lt;/p&gt;

  &lt;p&gt;需要注意，全局变量在浏览器和Node.js的环境下的名称不一样，完整的迁移
方法请参考英文版本。&lt;/p&gt;

  &lt;p&gt;（2016年更新）让我们使用Webpack吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a name=&quot;pi&quot;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;浏览器下，全局变量叫  &lt;code class=&quot;highlighter-rouge&quot;&gt;window&lt;/code&gt;，大量的代码可能使用了这个变量:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(function (sorting, undefined) {
    sorting.mergeSort = function () {};
})(window.Sorting = window.Sorting || {})
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Node.js下面，全局变量叫&lt;code class=&quot;highlighter-rouge&quot;&gt;global&lt;/code&gt; ，我们可以赋值（参考 &lt;a href=&quot;https://github.com/scozv/algo-js/blob/master/qunit/q.js&quot; title=&quot;a file named q.js&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;./qunit/q.js&lt;/code&gt;&lt;/a&gt;）：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window = global;

require('../src/t.js')
require('../src/x.array.js');
require('../src/sorting.js');
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;更多内容，请参考英文版本。&lt;/p&gt;

</description>
        <link>https://scozv.github.io/blog/zh/guide/2013/12/21/how-to-make-code-of-algojs-run-in-nodejs-as-in-browser</link>
        <guid>https://scozv.github.io/blog/zh/guide/2013/12/21/how-to-make-code-of-algojs-run-in-nodejs-as-in-browser</guid>
        <pubDate>2013-12-21T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>迭代版本的Tarjan强连通算法（二）</title>
        <description>
&lt;blockquote&gt;
  &lt;p&gt;上一次，我们提到了迭代深度优先查找（DFS）——用一个叫frontier的栈来保持访问顺序。今天，我们将看到迭代拓扑排序以及Karasoju强连通算法。&lt;/p&gt;

  &lt;p&gt;今天的重点在于，我们会增加一个栈，名为head。当父节点的所有后代都访问过之后，应该满足head.peek() === frontier.peek()。&lt;/p&gt;

  &lt;p&gt;本文大部分的解释（以及伪代码）需要阅读英文版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a name=&quot;pi&quot;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post-content lang zh-cn&quot;&gt;
拓扑排序的时候，需要记录当前访问的点，是从哪个父节点下来的。所以我们增加了一个叫head的栈，用来记录这个信息——当两个栈（frontier和head）的peek元素相同时，就意味着，父节点下面已经没有节点可以继续访问了，此时相当于一层递归的DFS结束。
&lt;br /&gt;
&lt;br /&gt;
需要留意的是，同一个节点可能来自不同的父节点：比如有两条边3 &amp;#8594; 2和5 &amp;#8594; 2。那么节点2可能有两次push进frontier，所以在处理的时候需要留意节点的状态。显而易见地，如果某一个节点已经被标记了拓扑顺序，那么它就不应该再次被标记，也就是说，它就不应该再次进入head栈。
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <link>https://scozv.github.io/blog/zh/algo/2013/11/23/how-to-write-iterative-tarjan-scc-algorithm-part-one</link>
        <guid>https://scozv.github.io/blog/zh/algo/2013/11/23/how-to-write-iterative-tarjan-scc-algorithm-part-one</guid>
        <pubDate>2013-11-23T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>迭代版本的Tarjan强连通算法（一）</title>
        <description>
&lt;blockquote&gt;
  &lt;p&gt;上个月我完成了迭代版的Tarjan强连通算法（参见 &lt;a href=&quot;https://github.com/scozv/tango&quot; title=&quot;Tango.js&quot;&gt;Tango.js&lt;/a&gt; ） 。这一个系列的文章将解释这一过程和相关代码——包括迭代图遍历、迭代拓扑排序和Kosaraju强连通算法以及最后的迭代Tarjan算法三部分。本文先讲迭代图遍历。&lt;/p&gt;

  &lt;p&gt;本文大部分的解释（以及伪代码）需要阅读英文版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a name=&quot;pi&quot;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post-content lang zh-cn&quot;&gt;

递归在某些程度上来说，很适合理解（只要找出递推公式），写起来也简单（因为它是递归）。我看过Erlang的一些介绍，这门函数式编程语言，在编译器的支持与优化下，很适合用递归。
&lt;br /&gt;
&lt;br /&gt;
递归的调用需要栈（Call Stack）来维护。碰到一些栈上有容量限制的语言，比如Python、JavaScript等，要么扩大栈的容量，或者如本系列文章这样，尝试将递归转化成迭代。
&lt;br /&gt;
&lt;br /&gt;
上面提到的深度优先查找（DFS），转化起来比较容易；而在我们第三部分将要提到的Tarjan强连通算法，转化起来就费了不少的心思（参见 &lt;a href=&quot;https://github.com/scozv/algo-js/issues/14&quot; target=&quot;_blank&quot;&gt;issue #14&lt;/a&gt;）。
&lt;br /&gt;
&lt;br /&gt;
当然，我认为，能够用递归的地方应该尽量用，尤其在函数式编程语言中。本系列的递归到迭代的转化，一来解决JavaScript的函数栈的容量问题，二来可以帮助我理解强连通算法。
&lt;br /&gt;
&lt;br /&gt;
下一篇我会整理一下拓扑排序的迭代转化，并将其应用到Kosaraju强连通算法中。

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <link>https://scozv.github.io/blog/zh/algo/2013/11/10/how-to-write-iterative-tarjan-scc-algorithm-part-zero</link>
        <guid>https://scozv.github.io/blog/zh/algo/2013/11/10/how-to-write-iterative-tarjan-scc-algorithm-part-zero</guid>
        <pubDate>2013-11-10T00:00:00+08:00</pubDate>
      </item>
    
  
    
      <item>
        <title>使用Heap数据结构将Dijkstra最短路算法的时间复杂度降到O(n ln m)</title>
        <description>
&lt;blockquote&gt;
  &lt;p&gt;为了将Dijkstra最短路径算法的时间复杂度从 &lt;script type=&quot;math/tex&quot;&gt;O(nm)&lt;/script&gt; 降低到 &lt;script type=&quot;math/tex&quot;&gt;O(n \ln m)&lt;/script&gt; ，
我们可以使用 &lt;strong&gt;heap&lt;/strong&gt; 。不过迭代中的每一次更新heap的过程，我们需要一些技巧来保持heap的有序性。
本文就会指出该技巧，并且解释我在算法代码中的一些&lt;a href=&quot;https://goo.gl/NssHNy&quot; title=&quot;Diff of Tango.js&quot;&gt;变动&lt;/a&gt;。&lt;/p&gt;

  &lt;p&gt;本文大部分的解释需要阅读英文版本。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;a name=&quot;pi&quot;&gt;
&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;post-content lang zh-cn&quot;&gt;

简言之，算法的每次迭代，都是用较小的值去更新原来的heap，
所以我们应该调用 &lt;code&gt;heap.swim()&lt;/code&gt; 来维持heap的有序性。

&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <link>https://scozv.github.io/blog/zh/algo/2013/11/03/how-to-update-heap-in-dijkstra-shortest-path</link>
        <guid>https://scozv.github.io/blog/zh/algo/2013/11/03/how-to-update-heap-in-dijkstra-shortest-path</guid>
        <pubDate>2013-11-03T00:00:00+08:00</pubDate>
      </item>
    
  
</channel>
</rss>
