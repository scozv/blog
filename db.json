{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1490948211000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1490948211000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1490948211000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1490948211000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1490948211000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1490948211000},{"_id":"source/_posts/2013-11-03-how-to-update-heap-in-dijkstra-shortest-path.md","hash":"71ae51d272fc1a9e347d7b6b7bcbbb4cbaa5126b","modified":1490949258000},{"_id":"source/_posts/2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero.md","hash":"faa886f76d8b126f5670922d43bfde7b1296c615","modified":1490949258000},{"_id":"source/_posts/2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one.md","hash":"5b9368698e8b85daa1e1cb28ce9572d7b66d9837","modified":1490949258000},{"_id":"source/_posts/2013-12-21-how-to-make-code-of-algojs-run-in-nodejs-as-in-browser.md","hash":"3b9551bec2837989b45f3d3c9a0f4badc0d4689f","modified":1490949258000},{"_id":"source/_posts/2014-05-01-tips-on-basic-personal-finance.md","hash":"191b619fe6dc4a5142cc6c2d26d827c4b974d30f","modified":1490949258000},{"_id":"source/_posts/2014-06-20-understand-monads-in-c.md","hash":"19ba6bc8a34cb51e10a3acde1a7ba038cf54597e","modified":1490949258000},{"_id":"source/_posts/2015-08-12-introduction-of-building-documents-with-latex.md","hash":"6bc898fdfc30ae9ca1350eb6f2e487f53a56e63f","modified":1490949258000},{"_id":"source/_posts/2016-03-18-how-do-we-apply-the-hyde-theme-to-existing-jekyll-site.md","hash":"2649febdf654d2a1ffdf92de01f2f6a776a0a499","modified":1490949258000},{"_id":"source/_posts/2016-04-05-fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server.md","hash":"9526b8fa3e41ee9ed4e86e9ca7514298f46de28f","modified":1490949258000},{"_id":"source/_posts/2015-09-04-a-vcs-project-workflow-for-requirement-coding-and-ci.md","hash":"24a0abc2b945dbead3abe027a1572faae9ad5248","modified":1490949258000},{"_id":"source/_posts/2016-05-05-a-low-coupling-architecture-of-the-web-solution-with-continuous-integration.md","hash":"d0a7d1b6562336f63f6045e8d57078df47910971","modified":1490949258000},{"_id":"source/_posts/2016-05-18-a-linear-branch-management-with-git.md","hash":"915a8e5cb02ee120bfed74e979881b07c0fb67b1","modified":1490949258000},{"_id":"source/_posts/2016-07-11-designing-cashier-microservice-with-ping-sdk.md","hash":"f95af833351b17ec8418f2f777e9f308e9962929","modified":1490949258000},{"_id":"source/_posts/2016-07-22-donot-ask-the-devs-to-prepare-env-by-click.md","hash":"bc3d96898f087725e9fff258da750bf3d5cdd8a7","modified":1490949258000},{"_id":"source/_posts/2016-07-27-bolero-a-restful-scaffold-with-scala.md","hash":"0220ec22abf2d8dc5c2becd6d0d67afe437ab514","modified":1490949258000},{"_id":"source/_posts/2016-08-21-scala-quick-tour-part-i.md","hash":"3b68ab8d1b0c006db8c7e7bf794e1127e026073f","modified":1490949258000},{"_id":"source/_posts/2016-08-22-scala-quick-tour-part-ii.md","hash":"609dea8381ffb6a44922acdcfb3929b122ea842d","modified":1490949258000},{"_id":"source/_posts/2016-09-05-bolero-cumulative-update-on-sep-04-2016.md","hash":"a8a635394e913932ff2a4d42135e9e933817492a","modified":1490949258000},{"_id":"source/_posts/2017-03-23-use-minimum-matched-string-and-extended-regex-for-wildcard-matching.md","hash":"e1d96460fa077b07c07d1516f07612e4c3470b12","modified":1490949258000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1490948211000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1490948211000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1490948211000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1490948211000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1490948211000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1490948211000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1490948211000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1490948211000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1490948211000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1490948211000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1490948211000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490948211000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1490948211000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1490948211000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1490948211000},{"_id":"source/_posts/zh/2013-11-03-how-to-update-heap-in-dijkstra-shortest-path.md","hash":"cc8838c514ba435f4726fa32134460e03fbdd187","modified":1490949258000},{"_id":"source/_posts/zh/2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero.md","hash":"38c6234052493ad26bcd9fde9cbce82448716ba1","modified":1490949258000},{"_id":"source/_posts/zh/2013-12-21-how-to-make-code-of-algojs-run-in-nodejs-as-in-browser.md","hash":"3390963e3ff4e77c7f7e8d929484c1557f75eb5e","modified":1490949258000},{"_id":"source/_posts/zh/2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one.md","hash":"1ffe572b7cf360664435ad84ac63567ffe4fbca2","modified":1490949258000},{"_id":"source/_posts/zh/2014-06-20-understand-monads-in-c.md","hash":"269a5c8c84814e92bb119832d19b74bbb5c7ba7e","modified":1490949258000},{"_id":"source/_posts/zh/2015-09-04-a-vcs-project-workflow-for-requirement-coding-and-ci.md","hash":"b7745b69c411f90c910586fbdbdcb61e496342e6","modified":1490949258000},{"_id":"source/_posts/zh/2016-03-18-how-do-we-apply-the-hyde-theme-to-existing-jekyll-site.md","hash":"9775679d86dde5b785d031d5a485cf6b0a698992","modified":1490949258000},{"_id":"source/_posts/zh/2015-08-12-introduction-of-building-documents-with-latex.md","hash":"5d7f308d73b74c5184e9764bc0c330196d82de6f","modified":1490949258000},{"_id":"source/_posts/zh/2016-04-05-fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server.md","hash":"7c9725bbe65b666aba66e3133039574709bdeaef","modified":1490949258000},{"_id":"source/_posts/zh/2016-05-05-a-low-coupling-architecture-of-the-web-solution-with-continuous-integration.md","hash":"d7aa61243999aa91f618d2d2bdd5c333bc2d4e7f","modified":1490949258000},{"_id":"source/_posts/zh/2016-05-18-a-linear-branch-management-with-git.md","hash":"44d5830bafb9e922f14a1c146ead4787eb95df24","modified":1490949258000},{"_id":"source/_posts/zh/2016-07-11-designing-cashier-microservice-with-ping-sdk.md","hash":"447c00639c5316c2c0b9a4fb72f305ce3fb86242","modified":1490949258000},{"_id":"source/_posts/zh/2016-07-22-donot-ask-the-devs-to-prepare-env-by-click.md","hash":"2662434de3cceb14785567997dae22040024046c","modified":1490949258000},{"_id":"source/_posts/zh/2016-07-27-bolero-a-restful-scaffold-with-scala.md","hash":"6d84f6fd9b1079a2cdb14069e42f39ced5ef376a","modified":1490949258000},{"_id":"source/_posts/zh/2016-08-21-scala-quick-tour-part-i.md","hash":"9ea8662b8bc93bc883d870b55d465806a9ea853b","modified":1490949258000},{"_id":"source/_posts/zh/2016-08-22-scala-quick-tour-part-ii.md","hash":"b845f4854fc8c8907731829090e34bb4a4cdce41","modified":1490949258000},{"_id":"source/_posts/zh/2016-09-05-bolero-cumulative-update-on-sep-04-2016.md","hash":"c452fd8bd18e5ddd6b5c318431bcc03a4828f9d5","modified":1490949258000},{"_id":"source/_posts/zh/2017-03-23-use-minimum-matched-string-and-extended-regex-for-wildcard-matching.md","hash":"c5e55f93ecf1d80f06c4eeb140b94c601c952777","modified":1490949258000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1490948211000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1490948211000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1490948211000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1490948211000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1490948211000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1490948211000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1490948211000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1490948211000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1490948211000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1490948211000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1490948211000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1490948211000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1490948211000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1490948211000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1490948211000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1490948211000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1490948211000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1490948211000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1490948211000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1490948211000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1490948211000}],"Category":[{"name":"algo","_id":"cj0xkryrj0002yxcb9u2g5ess"},{"name":"guide","_id":"cj0xkrys3000hyxcbn8ep3hr2"},{"name":"slides","_id":"cj0xkrys6000myxcbencip6f3"},{"name":"pattern","_id":"cj0xkrys9000syxcbblhw0qni"}],"Data":[],"Page":[],"Post":[{"layout":"post","title":"How to Update Heap in Dijkstra Shortest Path Algorithm","description":"","lang":"en","_content":"{% include JB/setup %}\n\n> When we use a __heap__ to improve the runing time of Dijkstra shortest path algorithm from $$O(nm)$$ to $$O(n \\ln m)$$, we may find that it is not easy to keep the heap in heap order just using insert() or delete(). This post describes the update of that heap.\n>\n>\n> I suppose that you might:\n>\n> *\tknow how to wirte Dijkstra algorithm with $$O(nm)$$ running time, and\n> *\tknow how to use heap.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\nTo speed up the finding minimum length of path in each stage in Dijkstra shortest path algorithm, we can use a binary heap to store frontier path, according to many words, like [_Heap Application_] [1], or Tim Roughgarden's [algorithm course] [2].\n\n{% highlight js %}\nfunction dijstra(graph, s) {\n  s = s || 1;\n  i = 0;\n\n  frontier = new Heap();\n  frontier.push([s, 0]);\n\n  while ( !frontier.isEmpty && i < graph.n ) {\n    // O(logn) on pop() instead of O(n)\n    //   from linear selection of minimum length\n    current = frontier.pop();\n\n    graph.edgesOf(current)\n     .filter(v => !v.isVisisted)\n     .forEach(v =>\n        if (frontier.has(v))\n          // update path length on v in frontier\n        else:\n          frontier.push([v, current[1] + weightOf(current, v)]);\n    );\n  }\n}\n{% endhighlight %}\n\nIt sounds easy, however the 1st revision of `dijkstra()` in Tango.js is failed to update heap correctly, where I just update the value of one vertex without keeping heap order.\n\n{% highlight js %}\nif (g.__labelAt__(v[0]) === -1){\n\t// not visited, update each in frontier\n\tvar updated = frontier.__id__.some(function(x){\n    return x && (x[0] === v[0]) &&\n      (x[1] = Math.min(x[1], current[1] + v[1]), true);\n\t});\n\n\tif (!updated){\n    frontier.push([v[0], v[1]]);\n\t}\n} // end if, unvisited\n{% endhighlight %}\n\nHow to update and keep heap order?\n\nWhile, when we update the MinHeap, it means that we may replace the item at that index with a value __LESS__ than the origin one. According to the definition of minimum binary heap, each parent is less than their children. (see picture from [Wikipedia] [1])\n\n![Min Heap](http://upload.wikimedia.org/wikipedia/commons/6/69/Min-heap.png)\n\nSo, if we replace $$17$$ with a __LESS__ value called $$x$$.\n$$x$$ is still less than its children,\nbut $$x$$ may be less than $$2$$ (its parent).\nAs the algorithm of `push()` of heap, we need to exchange $$x$$ with its parent, great-parent..., until heap is ordered. That is:\n\n__Using `heap.swim()` to update that heap.__ (see [diff][3] of revision)\n\n{% highlight js %}\nvar updated = frontier.__id__.some(function(x, k){\n  // return x && x[0] === v[0] && (doUpdate, true)\n  return x && (x[0] === v[0]) &&\n    ((function(){\n      if (current[1] + v[1] < x[1]) {\n        x[1] = current[1] + v[1];\n        // swim like push() in heap is important to update heap\n        frontier.__swim__(k);\n      }\n    })(), true);\n});\n{% endhighlight %}\n\n<br />\n\n[1]: http://en.wikipedia.org/wiki/Heap_(data_structure)#Applications\t\"Wikipedia\"\n[2]: https://www.coursera.org/course/algo \t\t\t\t\t\t\t\t\"Algorithms: Design and Analysis, Part 1\"\n[3]: https://goo.gl/NssHNy                                              \"Diff of Tango.js\"\n","source":"_posts/2013-11-03-how-to-update-heap-in-dijkstra-shortest-path.md","raw":"---\nlayout: post\ntitle: \"How to Update Heap in Dijkstra Shortest Path Algorithm\"\ndescription: \"\"\ncategory : \"algo\"\ntags: [\"algorithm\", \"graph\", \"dijkstra\", \"heap\"]\nlang: en\n---\n{% include JB/setup %}\n\n> When we use a __heap__ to improve the runing time of Dijkstra shortest path algorithm from $$O(nm)$$ to $$O(n \\ln m)$$, we may find that it is not easy to keep the heap in heap order just using insert() or delete(). This post describes the update of that heap.\n>\n>\n> I suppose that you might:\n>\n> *\tknow how to wirte Dijkstra algorithm with $$O(nm)$$ running time, and\n> *\tknow how to use heap.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\nTo speed up the finding minimum length of path in each stage in Dijkstra shortest path algorithm, we can use a binary heap to store frontier path, according to many words, like [_Heap Application_] [1], or Tim Roughgarden's [algorithm course] [2].\n\n{% highlight js %}\nfunction dijstra(graph, s) {\n  s = s || 1;\n  i = 0;\n\n  frontier = new Heap();\n  frontier.push([s, 0]);\n\n  while ( !frontier.isEmpty && i < graph.n ) {\n    // O(logn) on pop() instead of O(n)\n    //   from linear selection of minimum length\n    current = frontier.pop();\n\n    graph.edgesOf(current)\n     .filter(v => !v.isVisisted)\n     .forEach(v =>\n        if (frontier.has(v))\n          // update path length on v in frontier\n        else:\n          frontier.push([v, current[1] + weightOf(current, v)]);\n    );\n  }\n}\n{% endhighlight %}\n\nIt sounds easy, however the 1st revision of `dijkstra()` in Tango.js is failed to update heap correctly, where I just update the value of one vertex without keeping heap order.\n\n{% highlight js %}\nif (g.__labelAt__(v[0]) === -1){\n\t// not visited, update each in frontier\n\tvar updated = frontier.__id__.some(function(x){\n    return x && (x[0] === v[0]) &&\n      (x[1] = Math.min(x[1], current[1] + v[1]), true);\n\t});\n\n\tif (!updated){\n    frontier.push([v[0], v[1]]);\n\t}\n} // end if, unvisited\n{% endhighlight %}\n\nHow to update and keep heap order?\n\nWhile, when we update the MinHeap, it means that we may replace the item at that index with a value __LESS__ than the origin one. According to the definition of minimum binary heap, each parent is less than their children. (see picture from [Wikipedia] [1])\n\n![Min Heap](http://upload.wikimedia.org/wikipedia/commons/6/69/Min-heap.png)\n\nSo, if we replace $$17$$ with a __LESS__ value called $$x$$.\n$$x$$ is still less than its children,\nbut $$x$$ may be less than $$2$$ (its parent).\nAs the algorithm of `push()` of heap, we need to exchange $$x$$ with its parent, great-parent..., until heap is ordered. That is:\n\n__Using `heap.swim()` to update that heap.__ (see [diff][3] of revision)\n\n{% highlight js %}\nvar updated = frontier.__id__.some(function(x, k){\n  // return x && x[0] === v[0] && (doUpdate, true)\n  return x && (x[0] === v[0]) &&\n    ((function(){\n      if (current[1] + v[1] < x[1]) {\n        x[1] = current[1] + v[1];\n        // swim like push() in heap is important to update heap\n        frontier.__swim__(k);\n      }\n    })(), true);\n});\n{% endhighlight %}\n\n<br />\n\n[1]: http://en.wikipedia.org/wiki/Heap_(data_structure)#Applications\t\"Wikipedia\"\n[2]: https://www.coursera.org/course/algo \t\t\t\t\t\t\t\t\"Algorithms: Design and Analysis, Part 1\"\n[3]: https://goo.gl/NssHNy                                              \"Diff of Tango.js\"\n","slug":"how-to-update-heap-in-dijkstra-shortest-path","published":1,"date":"2013-11-02T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrc0000yxcbh93d3ul3"},{"layout":"post","title":"How to Write Iterative Tarjan SCC Algorithm, Part I","description":"","lang":"en","_content":"{% include JB/setup %}\n\n> During the work on [Tango.js] [1], I found there is a limitation on recursive stack size of JavaScript. This series posts describe the way to convert recursive Tarjan SCC algorithm to iterative one, containing:\n>\n> * Part I: Iterative BFS and DFS algorithm on graph;\n> * [Part II] [4]: Iterative topological sort and Kosaraju SCC algorithm on graph;\n> * Part III: Iterative Tarjan SCC algorithm on graph.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## Recursive DFS\n\nIt is easy to write down a recursive BFS or DFS algorithm on graph. Take DFS for example:\n\n{% highlight js %}\nfunction DFS(graph, node) {\n  // do something on this node and mark it as visited\n\n  (for x in graph.getAdjacentVertex(node)) {\n    // then we DFS on each adjacent vertex of this node\n    if (!graph.isVisited(x)) {\n        DFS(graph, x)\n    }\n  }\n\n  graph.markVisited(node);\n}\n{% endhighlight %}\n\nThe call of recursive function is managed by a stack, we may see 'Call Stack', or 'Error Stack' in some IDE tools. Recursive function is brief, and it is easy to understand sometimes. But if there is limitation on stack size, We may try to write it as iterative way.\n\n## Call Stack\n\nFirstly, we see what happen in recursive DFS above, for the graph with only two paths:\n\n\t1 → 2 → 3\n\t1 → 4\n\nwe call `DFS(1)`, find `{2, 4}` as adjacent vertex, then we call <code>DFS<sub>1</sub>(2)</code> (notation  <code>DFS<sub>i</sub>(j)</code> means the parent call of `j` in stack is `i`). Next call  <code>DFS<sub>2</sub>(3)</code> finding `{3}` as adjacent vertex of `2` and finish <code>DFS<sub>1</sub>(2)</code>. Finally  call  <code>DFS<sub>1</sub>(4)</code> and finish `DFS(1)`.\n\n## Stack Frontier\n\nIf we have a stack named `frontier`, we push `1` at first, then pop to visit `1`. Push `[4, 2]`, and pop `2`. Next push `[3]` as adjacent vertex of `2` (the stack is `( 4, 3 >` now). Finally pop `3` and `4` to finish search.\n\nRow Index | Current `v` | Action | `frontier`\n:---:|:---:|:---|:--------\n 0 | 1 | initial call | ( 1 >\n 1 | 1 | find `{2, 4}` as adjacent vertex of `1` | ( 4, 2 >\n 2 | 2 | pop `2` to visit | ( 4 >\n 3 | 2 | find `{3}` of `2` | ( 4, 3 >\n 4 | 3 | pop `3` to visit | ( 4 >\n 5 | 4 | pop `4` to visit| empty\n\n(notation `( >` specifies we push and pop from right side)\n\n## Attentions\n\nThere are two things we need to pay attentions:\n\n* __Visiting Order__. At row index 1, we push `4` at first, in order to visit graph as same order of recursive call. However this is not very important, I just want to sync the order of iterative way and the order of recursive way. Pushing `4` at first or pushing `2` at first will get correct topological order or SCC, which we are going to find out at following two parts.\n* __Vertex Status__. If we have only two paths in graph like: `1 → 2 → 3` and `1 → 3 → 4`. We have stack like this:\n\n  Row Index | Current `v` | Action | `frontier`\n  :---:|:---:|:---|:--------\n  0 | 1 | initial call | ( 1 >\n  1 | 1 | find `{2, 3}` as adjacent vertex of `1` | ( 3, 2 >\n  2 | 2 | pop `2` to visit | ( 3 >\n  3 | 2 | find `{3}` of `2` | ( 3, 3 >\n\n  (notation `( >` specifies we push and pop from right side)\n\n  We may notice at row index 3, we push duplicate `3` into frontier. So we need a vertex status to mark vertex as being visited or being pushed into stack (see [issue #8] [3]).\n\n## Running Time\nHere is simplified code of iterative DFS:\n\n{% highlight js %}\nfunction f() {\n  // 0. initialize stack, O(1)\n\n  // 1. for all vertex, O(|V|)\n  while (not frontier.isEmpty()) {\n    // 1.0 visit current vertex, O(1)\n\n    // 1.1 process all vertex out from the current\n    (for x in graph.getAdjacentVertex(current)) {\n      frontier.push(x);\n      // process each adjacent vertex of the current one\n    }\n  }\n}\n{% endhighlight %}\n\nIn our code (comment 1.1) below, for each vertex, we process its adjacent vertex,\nwhich we find from outgoing edges of current vertex.\nWe let the number of outgoing edges of vertex $$i$$ is $$e_i$$,\nand $$n=\\|V\\|, m=\\|E\\|$$ as the number of vertex and number of edges respectively, so we write the running time as following:\n\n$$T = O(1) + \\sum_{i=1}^{n} \\left [ O(1) + e_i \\right ] $$\n\n$$= O(1) + \\sum_{i=1}^{n}O(1) + \\sum_{i=1}^{n}e_i$$\n\nAnd notice that the sum of outgoing edges of all vertex is the the number of all edges, that is $$\\sum_{i=1}^{n}e_i=\\left \\|E \\right \\|=m$$, so we have:\n\n$$T=O(1)+O(n)+O(m)=O(n+m)$$\n\n## Next\n\nRead code in `graph.search.js` on [Tango.js] [1], and reference [this series of posts] [2] by Tom Moertel for more details on _Recursive to Iterative_.\n\n[Next] [4] part of this series, I am going to describe some ideas on iterative topological order algorithm which can be applied on Kosaraju SCC algorithm.\n\n<br />\n\n[1]: https://github.com/scozv/tango\t\"Tango.js\"\n[2]: http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\t\t\"Recursive to Iterative by Tom Moertel\"\n[3]: https://github.com/scozv/algo-js/issues/8\t\t\t\t\t\t\"Issue 8\"\n[4]: {% post_url 2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one %} \"Tarjan, Part II\"\n","source":"_posts/2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero.md","raw":"---\nlayout: post\ntitle: \"How to Write Iterative Tarjan SCC Algorithm, Part I\"\ndescription: \"\"\ncategory : \"algo\"\ntags: [\"algorithm\", \"graph\", \"dfs\"]\nlang: en\n---\n{% include JB/setup %}\n\n> During the work on [Tango.js] [1], I found there is a limitation on recursive stack size of JavaScript. This series posts describe the way to convert recursive Tarjan SCC algorithm to iterative one, containing:\n>\n> * Part I: Iterative BFS and DFS algorithm on graph;\n> * [Part II] [4]: Iterative topological sort and Kosaraju SCC algorithm on graph;\n> * Part III: Iterative Tarjan SCC algorithm on graph.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## Recursive DFS\n\nIt is easy to write down a recursive BFS or DFS algorithm on graph. Take DFS for example:\n\n{% highlight js %}\nfunction DFS(graph, node) {\n  // do something on this node and mark it as visited\n\n  (for x in graph.getAdjacentVertex(node)) {\n    // then we DFS on each adjacent vertex of this node\n    if (!graph.isVisited(x)) {\n        DFS(graph, x)\n    }\n  }\n\n  graph.markVisited(node);\n}\n{% endhighlight %}\n\nThe call of recursive function is managed by a stack, we may see 'Call Stack', or 'Error Stack' in some IDE tools. Recursive function is brief, and it is easy to understand sometimes. But if there is limitation on stack size, We may try to write it as iterative way.\n\n## Call Stack\n\nFirstly, we see what happen in recursive DFS above, for the graph with only two paths:\n\n\t1 → 2 → 3\n\t1 → 4\n\nwe call `DFS(1)`, find `{2, 4}` as adjacent vertex, then we call <code>DFS<sub>1</sub>(2)</code> (notation  <code>DFS<sub>i</sub>(j)</code> means the parent call of `j` in stack is `i`). Next call  <code>DFS<sub>2</sub>(3)</code> finding `{3}` as adjacent vertex of `2` and finish <code>DFS<sub>1</sub>(2)</code>. Finally  call  <code>DFS<sub>1</sub>(4)</code> and finish `DFS(1)`.\n\n## Stack Frontier\n\nIf we have a stack named `frontier`, we push `1` at first, then pop to visit `1`. Push `[4, 2]`, and pop `2`. Next push `[3]` as adjacent vertex of `2` (the stack is `( 4, 3 >` now). Finally pop `3` and `4` to finish search.\n\nRow Index | Current `v` | Action | `frontier`\n:---:|:---:|:---|:--------\n 0 | 1 | initial call | ( 1 >\n 1 | 1 | find `{2, 4}` as adjacent vertex of `1` | ( 4, 2 >\n 2 | 2 | pop `2` to visit | ( 4 >\n 3 | 2 | find `{3}` of `2` | ( 4, 3 >\n 4 | 3 | pop `3` to visit | ( 4 >\n 5 | 4 | pop `4` to visit| empty\n\n(notation `( >` specifies we push and pop from right side)\n\n## Attentions\n\nThere are two things we need to pay attentions:\n\n* __Visiting Order__. At row index 1, we push `4` at first, in order to visit graph as same order of recursive call. However this is not very important, I just want to sync the order of iterative way and the order of recursive way. Pushing `4` at first or pushing `2` at first will get correct topological order or SCC, which we are going to find out at following two parts.\n* __Vertex Status__. If we have only two paths in graph like: `1 → 2 → 3` and `1 → 3 → 4`. We have stack like this:\n\n  Row Index | Current `v` | Action | `frontier`\n  :---:|:---:|:---|:--------\n  0 | 1 | initial call | ( 1 >\n  1 | 1 | find `{2, 3}` as adjacent vertex of `1` | ( 3, 2 >\n  2 | 2 | pop `2` to visit | ( 3 >\n  3 | 2 | find `{3}` of `2` | ( 3, 3 >\n\n  (notation `( >` specifies we push and pop from right side)\n\n  We may notice at row index 3, we push duplicate `3` into frontier. So we need a vertex status to mark vertex as being visited or being pushed into stack (see [issue #8] [3]).\n\n## Running Time\nHere is simplified code of iterative DFS:\n\n{% highlight js %}\nfunction f() {\n  // 0. initialize stack, O(1)\n\n  // 1. for all vertex, O(|V|)\n  while (not frontier.isEmpty()) {\n    // 1.0 visit current vertex, O(1)\n\n    // 1.1 process all vertex out from the current\n    (for x in graph.getAdjacentVertex(current)) {\n      frontier.push(x);\n      // process each adjacent vertex of the current one\n    }\n  }\n}\n{% endhighlight %}\n\nIn our code (comment 1.1) below, for each vertex, we process its adjacent vertex,\nwhich we find from outgoing edges of current vertex.\nWe let the number of outgoing edges of vertex $$i$$ is $$e_i$$,\nand $$n=\\|V\\|, m=\\|E\\|$$ as the number of vertex and number of edges respectively, so we write the running time as following:\n\n$$T = O(1) + \\sum_{i=1}^{n} \\left [ O(1) + e_i \\right ] $$\n\n$$= O(1) + \\sum_{i=1}^{n}O(1) + \\sum_{i=1}^{n}e_i$$\n\nAnd notice that the sum of outgoing edges of all vertex is the the number of all edges, that is $$\\sum_{i=1}^{n}e_i=\\left \\|E \\right \\|=m$$, so we have:\n\n$$T=O(1)+O(n)+O(m)=O(n+m)$$\n\n## Next\n\nRead code in `graph.search.js` on [Tango.js] [1], and reference [this series of posts] [2] by Tom Moertel for more details on _Recursive to Iterative_.\n\n[Next] [4] part of this series, I am going to describe some ideas on iterative topological order algorithm which can be applied on Kosaraju SCC algorithm.\n\n<br />\n\n[1]: https://github.com/scozv/tango\t\"Tango.js\"\n[2]: http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\t\t\"Recursive to Iterative by Tom Moertel\"\n[3]: https://github.com/scozv/algo-js/issues/8\t\t\t\t\t\t\"Issue 8\"\n[4]: {% post_url 2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one %} \"Tarjan, Part II\"\n","slug":"how-to-write-iterative-tarjan-scc-algorithm-part-zero","published":1,"date":"2013-11-09T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrh0001yxcb0u3q6e74"},{"layout":"post","title":"How to Write Iterative Tarjan SCC Algorithm, Part II","description":"","lang":"en","_content":"{% include JB/setup %}\n\n> In [previous part] [4], we talked about iterative DFS, where we use a stack named  __frontier__ to keep the visiting order. This time, we are going to look at the iterative topological sort and Karasoju SCC algorithm.\n>\n>\n> The key idea of my iterative topological sort is use another stack named __head__ to track when we finish visiting all descendant vertex of the head vertex.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## Recursive Topological Sort\nIn the beginning, we introduce the code of recursive topological sort:\n\n{% highlight js %}\nfunction topologicalSortRec(graph) {\n  var n = graph.numberOfVertex,\n  order = [],\n\n  DFS= function(g, i) {\n    // recursive search graph g,\n    // from the initial node i\n    (for x in g.getAdjacentVertex(i)) {\n      if (not g.isVisited(x)) {\n        DFS(g, x);\n      }\n    };\n\n    order[i] = n--;\n    graph.markVisited(i);\n  };\n\n  (for 1 <= i <= n) {\n    if (not graph.isVisited(i)) {\n      DFS(graph, i);\n    }\n  }\n\n  return order;\n}\n{% endhighlight %}\n\nAs we notice, we get the topological order from recursive DFS. The proof of correctness will be found at Wikipedia or online course [_Algorithms: Design and Analysis, Part 1_] [1]\n\n## Call Stack\n\nTake a directed graph represented by adjacency list below for instance.\n\n  1: [2, 4]\n  2: [3]\n  3: [5]\n  4: [3, 5]\n\n(Please draw this simple graph on the paper to help understand. `1: [2, 4]` means there are only two edges from vertex 1, that are 1 → 2 and 1 → 4.)\n\nHere is the call stack of recursive topological sort. In each loop at current `v`, we list its parent vertex in column titled __P__. If all of descendant vertex of `v` which we list in column titled `v.c()` have been visited, we set the `order(v)`.\n\nP | `v` | `v.c()` | Action\n:---:|:---:|:---|:---\n<span></span>| 1 | {2, 4} | initial call\n 1 | 2 | {3} |<span></span>\n 2 | 3 | {5} |<span></span>\n 3 | 5 | empty | order(5) = 5, back to __p__arent `v#3`\n 2 | 3 | empty | order(3) = 4, back to __p__arent `v#2`\n 1 | 2 | empty | order(2) = 3, back to __p__arent `v#1`\n <span></span>| 1 | {4} |<span></span>\n 1 | 4 | empty  | order(4) = 2, back to __p__arent `v#1` (initial call)\n <span></span>| 1 | empty  | order(1) = 1\n\n## Inspiration\n\nAccording to _Part Zero_, we add `frontier` to call stack table as below.\n\nP | `v` | `v.c()` | `frontier` | Action\n:---:|:---:|:---|:---|:---\n<span></span>| 1 | {2, 4} | (1, 4, 2> | initial call\n 1 | 2 | {3} | (1, 4, 2, 3> |<span></span>\n 2 | 3 | {5} | (1, 4, 2, 3, 5> |<span></span>\n 3 | 5 | empty | (1, 4, 2, 3, 5> | order(5) = 5, back to __p__arent `v#3`, pop frontier\n 2 | 3 | empty | (1, 4, 2, 3> | order(3) = 4, back to __p__arent `v#2`, pop frontier\n 1 | 2 | empty | (1, 4, 2>  | order(2) = 3, back to __p__arent `v#1`, pop frontier\n<span></span>| 1 | {4} | (1, 4> |<span></span>\n 1 | 4 | empty  |  (1, 4> | order(4) = 2, back to __p__arent `v#1` (initial call), pop frontier\n<span></span>| 1 | empty  | (1> | order(1) = 1, pop frontier, then frontier is empty\n\nIf we look into the `frontier` and the time when descendant vertex array is empty, we may notice the top of `frontier` is the vertex we visit currently.\n\n## Stack Head\n\nSo we introduce a stack named `head` to track the time when we finish visiting all descendant vertex of the head vertex (current `v`).\n\n{% highlight js %}\nfunction iterTopologicalSort(graph) {\n  var frontier = new Stack(),\n      head = new Stack(),\n      n = graph.numberOfVertex,\n      order = [];\n\n  frontier.push(1);\n    while (not frontier.isEmpty()) {\n      current = frontier.peek();\n      if (current === head.peek() /*head may be empty here*/) {\n          // we hit the time to set order\n          frontier.pop();\n          head.pop();\n          order[current] = n--;\n          graph.markVisited(current);\n      } else {\n          // current is just a child of some v\n          head.push(current);\n          (for x in graph.getAdjacentVertex(current)) {\n            if (not graph.isVisited(x)) {\n              frontier.push(x);\n            }\n          };  // end for\n      } // end else\n    } // end while\n}\n{% endhighlight %}\n\nRunning the iterative code, we update the stack table:\n\n`v` | `head` | `frontier` | Action\n:---:|:---|:---|:---\n 1 | (1> | (1, 4, 2> | initial call\n 2 | (1, 2> | (1, 4, 2, 3> |<span></span>\n 3 | (1, 2, 3> | (1, 4, 2, 3, 5> |<span></span>\n 5 | (1, 2, 3, 5> |(1, 4, 2, 3, 5> | `peek()` eqauls, set order(5), pop two stacks\n 3 | (1, 2, 3> | (1, 4, 2, 3> | `peek()` eqauls, set order(3), pop two stacks\n 2 | (1, 2> | (1, 4, 2>  | `peek()` eqauls, set order(2), pop two stacks\n 1 | (1> | (1, 4> |<span></span>\n 4 | (1, 4> | (1, 4> | `peek()` eqauls, set order(4), pop two stacks\n 1 | (1> | (1> | `peek()` eqauls, set order(1), pop two stacks\n\n As we see, The time of finishing visit all descendant of current `v`, and to set order(current) is when `peek()` eqauls, i.e. `head.peek() == frontier.peek()`.\n\n## Attention\n* __Empty Head__. At line 10, `head.peek()` may throw an exception if `head.isEmpty()`. We can check it before each `peek()`, or we can push `-1` (whatever bottom item) to make sure head is always contains item(s) before `frontier.isEmpty()`.\n* __Vertex Status__. Same issue may be occurred similarly as in iterative DFS we mentioned in last part. (see [issue #20] [2])\n\n## Kosaraju SCC\nKosaraju SCC algorithm, which runs DFS twice, finds some kind of visiting order in the first DFS. So we can find topological sort order as in the first DFS, then use the order for the second DFS.\n\n## Running Time\nRoughly speaking, the running time of iterarive topological sort is same as time of DFS.\nThe time of Kosaraju SCC which runs DFS twice, is still $$O(m+n)$$.\n\n## Next\nSee code on details in `graph.search.js` of [Tango.js] [3]. And next post, I am going to explain iterative Tarjan SCC algorithm, which cost me a few time.\n\n<br />\n\n[1]: https://www.coursera.org/course/algo          \"Online course by Tim Roughgarden\"\n[2]: https://github.com/scozv/algo-js/issues/20        \"Issue 20\"\n[3]: https://github.com/scozv/tango  \"Tango.js\"\n[4]: {% post_url 2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero %} \"Tarjan, Part I\"\n","source":"_posts/2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one.md","raw":"---\nlayout: post\ntitle: \"How to Write Iterative Tarjan SCC Algorithm, Part II\"\ndescription: \"\"\ncategory: \"algo\"\ntags: [\"algorithm\", \"graph\", \"scc\"]\nlang: en\n---\n{% include JB/setup %}\n\n> In [previous part] [4], we talked about iterative DFS, where we use a stack named  __frontier__ to keep the visiting order. This time, we are going to look at the iterative topological sort and Karasoju SCC algorithm.\n>\n>\n> The key idea of my iterative topological sort is use another stack named __head__ to track when we finish visiting all descendant vertex of the head vertex.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## Recursive Topological Sort\nIn the beginning, we introduce the code of recursive topological sort:\n\n{% highlight js %}\nfunction topologicalSortRec(graph) {\n  var n = graph.numberOfVertex,\n  order = [],\n\n  DFS= function(g, i) {\n    // recursive search graph g,\n    // from the initial node i\n    (for x in g.getAdjacentVertex(i)) {\n      if (not g.isVisited(x)) {\n        DFS(g, x);\n      }\n    };\n\n    order[i] = n--;\n    graph.markVisited(i);\n  };\n\n  (for 1 <= i <= n) {\n    if (not graph.isVisited(i)) {\n      DFS(graph, i);\n    }\n  }\n\n  return order;\n}\n{% endhighlight %}\n\nAs we notice, we get the topological order from recursive DFS. The proof of correctness will be found at Wikipedia or online course [_Algorithms: Design and Analysis, Part 1_] [1]\n\n## Call Stack\n\nTake a directed graph represented by adjacency list below for instance.\n\n  1: [2, 4]\n  2: [3]\n  3: [5]\n  4: [3, 5]\n\n(Please draw this simple graph on the paper to help understand. `1: [2, 4]` means there are only two edges from vertex 1, that are 1 → 2 and 1 → 4.)\n\nHere is the call stack of recursive topological sort. In each loop at current `v`, we list its parent vertex in column titled __P__. If all of descendant vertex of `v` which we list in column titled `v.c()` have been visited, we set the `order(v)`.\n\nP | `v` | `v.c()` | Action\n:---:|:---:|:---|:---\n<span></span>| 1 | {2, 4} | initial call\n 1 | 2 | {3} |<span></span>\n 2 | 3 | {5} |<span></span>\n 3 | 5 | empty | order(5) = 5, back to __p__arent `v#3`\n 2 | 3 | empty | order(3) = 4, back to __p__arent `v#2`\n 1 | 2 | empty | order(2) = 3, back to __p__arent `v#1`\n <span></span>| 1 | {4} |<span></span>\n 1 | 4 | empty  | order(4) = 2, back to __p__arent `v#1` (initial call)\n <span></span>| 1 | empty  | order(1) = 1\n\n## Inspiration\n\nAccording to _Part Zero_, we add `frontier` to call stack table as below.\n\nP | `v` | `v.c()` | `frontier` | Action\n:---:|:---:|:---|:---|:---\n<span></span>| 1 | {2, 4} | (1, 4, 2> | initial call\n 1 | 2 | {3} | (1, 4, 2, 3> |<span></span>\n 2 | 3 | {5} | (1, 4, 2, 3, 5> |<span></span>\n 3 | 5 | empty | (1, 4, 2, 3, 5> | order(5) = 5, back to __p__arent `v#3`, pop frontier\n 2 | 3 | empty | (1, 4, 2, 3> | order(3) = 4, back to __p__arent `v#2`, pop frontier\n 1 | 2 | empty | (1, 4, 2>  | order(2) = 3, back to __p__arent `v#1`, pop frontier\n<span></span>| 1 | {4} | (1, 4> |<span></span>\n 1 | 4 | empty  |  (1, 4> | order(4) = 2, back to __p__arent `v#1` (initial call), pop frontier\n<span></span>| 1 | empty  | (1> | order(1) = 1, pop frontier, then frontier is empty\n\nIf we look into the `frontier` and the time when descendant vertex array is empty, we may notice the top of `frontier` is the vertex we visit currently.\n\n## Stack Head\n\nSo we introduce a stack named `head` to track the time when we finish visiting all descendant vertex of the head vertex (current `v`).\n\n{% highlight js %}\nfunction iterTopologicalSort(graph) {\n  var frontier = new Stack(),\n      head = new Stack(),\n      n = graph.numberOfVertex,\n      order = [];\n\n  frontier.push(1);\n    while (not frontier.isEmpty()) {\n      current = frontier.peek();\n      if (current === head.peek() /*head may be empty here*/) {\n          // we hit the time to set order\n          frontier.pop();\n          head.pop();\n          order[current] = n--;\n          graph.markVisited(current);\n      } else {\n          // current is just a child of some v\n          head.push(current);\n          (for x in graph.getAdjacentVertex(current)) {\n            if (not graph.isVisited(x)) {\n              frontier.push(x);\n            }\n          };  // end for\n      } // end else\n    } // end while\n}\n{% endhighlight %}\n\nRunning the iterative code, we update the stack table:\n\n`v` | `head` | `frontier` | Action\n:---:|:---|:---|:---\n 1 | (1> | (1, 4, 2> | initial call\n 2 | (1, 2> | (1, 4, 2, 3> |<span></span>\n 3 | (1, 2, 3> | (1, 4, 2, 3, 5> |<span></span>\n 5 | (1, 2, 3, 5> |(1, 4, 2, 3, 5> | `peek()` eqauls, set order(5), pop two stacks\n 3 | (1, 2, 3> | (1, 4, 2, 3> | `peek()` eqauls, set order(3), pop two stacks\n 2 | (1, 2> | (1, 4, 2>  | `peek()` eqauls, set order(2), pop two stacks\n 1 | (1> | (1, 4> |<span></span>\n 4 | (1, 4> | (1, 4> | `peek()` eqauls, set order(4), pop two stacks\n 1 | (1> | (1> | `peek()` eqauls, set order(1), pop two stacks\n\n As we see, The time of finishing visit all descendant of current `v`, and to set order(current) is when `peek()` eqauls, i.e. `head.peek() == frontier.peek()`.\n\n## Attention\n* __Empty Head__. At line 10, `head.peek()` may throw an exception if `head.isEmpty()`. We can check it before each `peek()`, or we can push `-1` (whatever bottom item) to make sure head is always contains item(s) before `frontier.isEmpty()`.\n* __Vertex Status__. Same issue may be occurred similarly as in iterative DFS we mentioned in last part. (see [issue #20] [2])\n\n## Kosaraju SCC\nKosaraju SCC algorithm, which runs DFS twice, finds some kind of visiting order in the first DFS. So we can find topological sort order as in the first DFS, then use the order for the second DFS.\n\n## Running Time\nRoughly speaking, the running time of iterarive topological sort is same as time of DFS.\nThe time of Kosaraju SCC which runs DFS twice, is still $$O(m+n)$$.\n\n## Next\nSee code on details in `graph.search.js` of [Tango.js] [3]. And next post, I am going to explain iterative Tarjan SCC algorithm, which cost me a few time.\n\n<br />\n\n[1]: https://www.coursera.org/course/algo          \"Online course by Tim Roughgarden\"\n[2]: https://github.com/scozv/algo-js/issues/20        \"Issue 20\"\n[3]: https://github.com/scozv/tango  \"Tango.js\"\n[4]: {% post_url 2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero %} \"Tarjan, Part I\"\n","slug":"how-to-write-iterative-tarjan-scc-algorithm-part-one","published":1,"date":"2013-11-22T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrm0004yxcb8pvqsbnq"},{"layout":"post","title":"How to Make Code of Tango.js Run in Node.js as in Browser","description":"","lang":"en","_content":"{% include JB/setup %}\n\n> I have planed to run unit test by reading file as the input for algorithm like graph algorithm for a few months (see [issue #18] [1]). However, it is not easy or effective to read local file from browser, even using `FileReader` in JavaScript. An alternative way is that we can read file  using the file system of Node.js, where we write JavaScript code as in browser.\n>\n> So the top proiority is __making codes run appropriately in Node.js as they run in browser__, including the codes of unit tests. I am going to tell the details of this process today:\n>\n> * Making codes of algorithm work in Node.js, and\n> * Making codes of unit tests work in Node.js, and\n> * Introduce CI into my project.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## window and global\nIn browser, we have the global variable named `window` , `Array` is `window.Array`, and `Math` is `window.Math`, etc. The __Tango.js__ also plugs object into `window`:\n\n    (function (sorting, undefined) {\n        sorting.mergeSort = function () {};\n    })(window.Sorting = window.Sorting || {})\n\nSo that we can sort an array in browser using the script below:\n\n    Sorting.mergeSort(3, 1, 4, 1, 5, 9, 2, 6);\n\nMore than that, in Tango.js, I extend `Array` and `Math` directly:\n\n    (function (array, undefined) {\n        array.zip = function (a, b) {};\n        array.prototype.clone = function () {};\n    })(window.Array = window.Array || {})\n\nIt is not a good practice that we change the object in `window` directly. But in my opinion, __the most important part in Tango.js is Algo(rithm), not js.__ So I just want to use a simple way, instead of introducing a global module named like `Algo` which we have to write like this:\n\n    Algo.Sorting.mergeSort();\n    Algo.Array.zip();\n    Algo.Array.clone();\n\nFollowing this idea of simplification, I load the code of algorithm into the global variable in Node.js named `global` (see [`./qunit/q.js`] [3]):\n\n    window = global;\n\n    require('../src/t.js')\n    require('../src/x.array.js');\n    require('../src/sorting.js');\n\nLook, we give the `global` an alias name at first, so that we do not need to change any codes of algorithm. Again, my idea of simplification is that:\n\n> It is not a good practice that we change the object in `global` directly. But the most important part in Tango.js is Algo(rithm), not js.\n\n<br />\n\nBy the way, I did try to exposure module using `module.exports`, but I failed to figure out a way, in Node.js, to exposure ONLY one module named `Sorting` from three files: sorting.js, sorting.mergeSort.js, and sorting.quickSort.js as they are something like partial class.\n\n## node-qunit\nAfter loading objects of algorithm into `global`, we are going to find out how to run previous codes of unit test in Node.js without modifying test scripts.\n\nWe use the project [`node-qunit`] [4], which allow us to run unit test like this:\n\n    $ cd algo-js\n    $ npm install node-qunit\n    $ node # or nodejs in ubuntu\n    > require('./qunit/q.js'); /*loading algorithm code into global*/\n    > var qunit = require('qunit');\n    > qunit.run({\n    >>>>> code: './qunit/q.js',\n    >>>>> tests: ['./qunit/q-sorting.js']},\n    >>>>> function (err, report) {\n    >>>>> \tconsole.log(err ? err : report);\n    >>>>> });\n\n## Grunt\nGrunt, as it says, is a JavaScript task runner. If you configure your project, you will run unit test using command below which helps us use Continuous Integration:\n`$ grunt test`.\n\nWe use [`grunt-node-qunit`] [6] plugin for grunt task, which is Grunt task running [node-qunit] [4].\n\nHere is the list of _How to_:\n\n0. configure project's `package.json` file\n\n       $ npm init\n0. install `grunt-cli`\n\n       $ npm i -g grunt-cli\n0. add grunt dependencies into project (see [official docs] [5])\n0. install `grunt`\n\n       $ npm i grunt --save-dev\n0. add `Gruntfile.js` to resister task\n\n       module.exports = function (grunt) {\n          grunt.initConfig({task-name: {}});\n          grunt.loadNpmTasks('grunt-node-qunit');\n          grunt.registerTask('default', ['task-name']);\n       };\n\n0. add test script into `package.json`, which allow us to run `$ npm test`\n0. run `$ grunt` to test the configuration\n0. run `$ grunt --stack` to debug grunt task script\n0. run `$ npm test` to test `package.json` configuration\n\n<br />\n\nA little attention we should pay on is we may face an error on ubuntu says:\n\n\t/usr/bin/env: node: No such file or directory\n\nSee [here] [8] to fix it.\n\n## Drone.io\n[![Build Status](https://drone.io/github.com/scozv/algo-js/status.png)](https://drone.io/github.com/scozv/algo-js/latest)\n\nThe web [drone.io] [7] is an online CI service. There are other options of online CI.\nSome advantages of drone.io are:\n\n* CI for Github, Google Code and Bitbucket\n* CI command is hosted in drone.io, instead of a file in our project folder\n\nThe CI command for Tango.js is:\n\n    npm -d install\n    npm install -g grunt-cli\n    npm test\n\n## Next\nI am going to fix [issue #18] [1].\n\n<br />\n\n[1]: https://github.com/scozv/algo-js/issues/18 \"issue #18\"\n[2]: https://github.com/scozv/tango \"Tango.js\"\n[3]: https://github.com/scozv/algo-js/blob/master/qunit/q.js \"a file named q.js\"\n[4]: https://github.com/kof/node-qunit \"node-qunit, Port of QUnit unit testing framework to nodejs\"\n[5]: http://gruntjs.com/getting-started#package.json \"grunt configuration on package.json\"\n[6]: https://npmjs.org/package/grunt-node-qunit \"Grunt task running node-qnuit\"\n[7]: https://drone.io/ \"drone.io\"\n[8]: https://github.com/joyent/node/issues/3911 \"issue #3911\"\n","source":"_posts/2013-12-21-how-to-make-code-of-algojs-run-in-nodejs-as-in-browser.md","raw":"---\nlayout: post\ntitle: \"How to Make Code of Tango.js Run in Node.js as in Browser\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"ci\", \"unit\", \"grunt\"]\nlang: en\n---\n{% include JB/setup %}\n\n> I have planed to run unit test by reading file as the input for algorithm like graph algorithm for a few months (see [issue #18] [1]). However, it is not easy or effective to read local file from browser, even using `FileReader` in JavaScript. An alternative way is that we can read file  using the file system of Node.js, where we write JavaScript code as in browser.\n>\n> So the top proiority is __making codes run appropriately in Node.js as they run in browser__, including the codes of unit tests. I am going to tell the details of this process today:\n>\n> * Making codes of algorithm work in Node.js, and\n> * Making codes of unit tests work in Node.js, and\n> * Introduce CI into my project.\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n## window and global\nIn browser, we have the global variable named `window` , `Array` is `window.Array`, and `Math` is `window.Math`, etc. The __Tango.js__ also plugs object into `window`:\n\n    (function (sorting, undefined) {\n        sorting.mergeSort = function () {};\n    })(window.Sorting = window.Sorting || {})\n\nSo that we can sort an array in browser using the script below:\n\n    Sorting.mergeSort(3, 1, 4, 1, 5, 9, 2, 6);\n\nMore than that, in Tango.js, I extend `Array` and `Math` directly:\n\n    (function (array, undefined) {\n        array.zip = function (a, b) {};\n        array.prototype.clone = function () {};\n    })(window.Array = window.Array || {})\n\nIt is not a good practice that we change the object in `window` directly. But in my opinion, __the most important part in Tango.js is Algo(rithm), not js.__ So I just want to use a simple way, instead of introducing a global module named like `Algo` which we have to write like this:\n\n    Algo.Sorting.mergeSort();\n    Algo.Array.zip();\n    Algo.Array.clone();\n\nFollowing this idea of simplification, I load the code of algorithm into the global variable in Node.js named `global` (see [`./qunit/q.js`] [3]):\n\n    window = global;\n\n    require('../src/t.js')\n    require('../src/x.array.js');\n    require('../src/sorting.js');\n\nLook, we give the `global` an alias name at first, so that we do not need to change any codes of algorithm. Again, my idea of simplification is that:\n\n> It is not a good practice that we change the object in `global` directly. But the most important part in Tango.js is Algo(rithm), not js.\n\n<br />\n\nBy the way, I did try to exposure module using `module.exports`, but I failed to figure out a way, in Node.js, to exposure ONLY one module named `Sorting` from three files: sorting.js, sorting.mergeSort.js, and sorting.quickSort.js as they are something like partial class.\n\n## node-qunit\nAfter loading objects of algorithm into `global`, we are going to find out how to run previous codes of unit test in Node.js without modifying test scripts.\n\nWe use the project [`node-qunit`] [4], which allow us to run unit test like this:\n\n    $ cd algo-js\n    $ npm install node-qunit\n    $ node # or nodejs in ubuntu\n    > require('./qunit/q.js'); /*loading algorithm code into global*/\n    > var qunit = require('qunit');\n    > qunit.run({\n    >>>>> code: './qunit/q.js',\n    >>>>> tests: ['./qunit/q-sorting.js']},\n    >>>>> function (err, report) {\n    >>>>> \tconsole.log(err ? err : report);\n    >>>>> });\n\n## Grunt\nGrunt, as it says, is a JavaScript task runner. If you configure your project, you will run unit test using command below which helps us use Continuous Integration:\n`$ grunt test`.\n\nWe use [`grunt-node-qunit`] [6] plugin for grunt task, which is Grunt task running [node-qunit] [4].\n\nHere is the list of _How to_:\n\n0. configure project's `package.json` file\n\n       $ npm init\n0. install `grunt-cli`\n\n       $ npm i -g grunt-cli\n0. add grunt dependencies into project (see [official docs] [5])\n0. install `grunt`\n\n       $ npm i grunt --save-dev\n0. add `Gruntfile.js` to resister task\n\n       module.exports = function (grunt) {\n          grunt.initConfig({task-name: {}});\n          grunt.loadNpmTasks('grunt-node-qunit');\n          grunt.registerTask('default', ['task-name']);\n       };\n\n0. add test script into `package.json`, which allow us to run `$ npm test`\n0. run `$ grunt` to test the configuration\n0. run `$ grunt --stack` to debug grunt task script\n0. run `$ npm test` to test `package.json` configuration\n\n<br />\n\nA little attention we should pay on is we may face an error on ubuntu says:\n\n\t/usr/bin/env: node: No such file or directory\n\nSee [here] [8] to fix it.\n\n## Drone.io\n[![Build Status](https://drone.io/github.com/scozv/algo-js/status.png)](https://drone.io/github.com/scozv/algo-js/latest)\n\nThe web [drone.io] [7] is an online CI service. There are other options of online CI.\nSome advantages of drone.io are:\n\n* CI for Github, Google Code and Bitbucket\n* CI command is hosted in drone.io, instead of a file in our project folder\n\nThe CI command for Tango.js is:\n\n    npm -d install\n    npm install -g grunt-cli\n    npm test\n\n## Next\nI am going to fix [issue #18] [1].\n\n<br />\n\n[1]: https://github.com/scozv/algo-js/issues/18 \"issue #18\"\n[2]: https://github.com/scozv/tango \"Tango.js\"\n[3]: https://github.com/scozv/algo-js/blob/master/qunit/q.js \"a file named q.js\"\n[4]: https://github.com/kof/node-qunit \"node-qunit, Port of QUnit unit testing framework to nodejs\"\n[5]: http://gruntjs.com/getting-started#package.json \"grunt configuration on package.json\"\n[6]: https://npmjs.org/package/grunt-node-qunit \"Grunt task running node-qnuit\"\n[7]: https://drone.io/ \"drone.io\"\n[8]: https://github.com/joyent/node/issues/3911 \"issue #3911\"\n","slug":"how-to-make-code-of-algojs-run-in-nodejs-as-in-browser","published":1,"date":"2013-12-20T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryro0005yxcb5qz1qayk"},{"layout":"post","title":"Tips on Basic Personal Finance","description":"","_content":"{% include JB/setup %}\n\n<div id=\"big\" class=\"step\" data-x=\"-1500\" data-y=\"-1600\" data-scale=\"6\" data-rotate=\"-90\">\n        <q>If I ask you ...</q>\n</div>\n\n<div id=\"around\" class=\"step slide point\" data-x=\"-800\" data-y=\"-2500\" date-z=\"0\" data-scale=\"0.5\">\n    <q style=\"font-size: 17em\">&asymp;</q>\n</div>\n\n<div id=\"percise\" class=\"step slide point\" data-x=\"-300\" data-y=\"-2500\" data-scale=\"0.5\">\n    <q style=\"font-size: 17em\">=</q>\n</div>\n\n<div id=\"acc\" class=\"step\" data-x=\"100\" data-y=\"-2200\" data-scale=\"2.5\">\n        <q>Accounting</q>\n</div>\n\n<div id=\"title\" class=\"step\" data-x=\"3000\" data-y=\"-300\"  data-rotate=\"0\" data-scale=\"9\">\n        <q>5 Tips on</q><br />\n        <q><h1>Personal Finance</h1></q>\n</div>\n\n<div id=\"r1\" class=\"step \" data-x=\"1500\" data-y=\"-2000\"\n    data-scale=\"6\" data-rotate=\"-10\">\n        <q>T1, Saving before spending</q>\n</div>\n<div id=\"r2\" class=\"step \" data-x=\"3700\" data-y=\"-1800\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T2, Plan the emergency amount</q>\n</div>\n\n<div id=\"insurance\" class=\"step\" data-x=\"5500\" data-y=\"250\" data-scale=\"5\" data-rotate=\"90\">\n        <q>Insurance</q>\n</div>\n\n<div id=\"r3\" class=\"step \" data-x=\"6000\" data-y=\"700\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T3, Accounting</q>\n</div>\n\n<div id=\"source\" class=\"step \" data-x=\"3500\" data-y=\"-900\" data-scale=\"3\"\n    data-z=\"100\"></div>\n\n<div id=\"r4\" class=\"step \" data-x=\"3000\" data-y=\"900\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T4, Investment / Risk</q>\n</div>\n\n<div id=\"r5\" class=\"step \" data-x=\"0\" data-y=\"800\" data-scale=\"6\"\n    deta-z=\"230\" data-rotate=\"-10\">\n        <q>T5, Stay Healthy / Keep learning ...</q>\n</div>\n\n<!--<div id=\"review\" class=\"step point\" data-x=\"0\" data-y=\"0\" data-scale=\"2\">\n        <q><strong>Review</strong></q>\n</div>-->\n\n<div id=\"overview\" class=\"step\" data-x=\"1700\" data-y=\"-500\" data-scale=\"7\">\n</div>\n\n<div class=\"hint\">\n    <p>Use a spacebar or arrow keys to navigate</p>\n</div>\n<script>\nif (\"ontouchstart\" in document.documentElement) { \n    document.querySelector(\".hint\").innerHTML = \"<p>Tap on the left or right to navigate</p>\";\n}\n</script>\n\n<!--\nHi, everyone. If I ask you a question, that is do you know how much you spend last month, on your food, on your entertainment. And do you know the percise number you spend, and the percise percentages of each part.\n\nAccounting ourself is one of many tips about personal finance. \n\nToday I will share you 5 tips on personal finance.\n\nTip number 1, Saving some money at first. Some people save money after they spend. A better way is spending should depend on how much you want to save at first. Be doing that, we have started a plan on personal finance.\n\n# Rule 1.5, Giving your purchase willingness a frozen time. If I want to buy a new mobile today, I ask myself, whether it is necessary right now. Maybe I can still use my old one for a month. So I hold down my purchase willing, and if 30 days later, I still urge to own the new mobile phone, I will enjoy myself. But sometimes, after 30 days, the willing of purchase will fade out. So we save amount of money, and we can spend it on education or something necessary.\n\nTip #2, Plan some emergency money. If I lose my job tomorrow, I should have some money for my food until next job. And, we use insurance to transfer the loss of risk. If I get injured in accident or face healthy problem, I need the insurance to cover my medical care. (10%)\n\nTip #3, Accounting ourself. Write down the number we spend and catalog our spending. If I find that I spend a lot on entertainment last year, I can make a change on my financial plan.\n# For instance, If you will pay the tuition fee of MSE next month, assuming it is 5000, and you can receive an payback which is 4000. And now you want to buy a new mobile phone cost 2000. According the accounting, you may choose a cheaper mobile cost 1000, and you save another 1000 for further tuition fee.\n\nTip #4, Put some money on investment depending on the risk level we can take. \n# Starting some simple investment. If you have account on bao.alipay.com, you are using an investment named money market fund, which has lower risk. Then, you may try another money market funds. And if you have knowledge on other types of investment, stock funds, bond ... In my opinion, it is worth for learning some knowledge on finance.\n\nTip #5, Keep learning. we use the financial knowledge to improve our financial ability. \n# If a child who commits a crime will cost the parent more than money.\n\nThat's all I want to share, so enjoy money, and enjoy learning. Thanks.\n-->\n","source":"_posts/2014-05-01-tips-on-basic-personal-finance.md","raw":"---\nlayout: post\ntitle: \"Tips on Basic Personal Finance\"\ndescription: \"\"\ncategory: \"slides\"\ntags: []\n---\n{% include JB/setup %}\n\n<div id=\"big\" class=\"step\" data-x=\"-1500\" data-y=\"-1600\" data-scale=\"6\" data-rotate=\"-90\">\n        <q>If I ask you ...</q>\n</div>\n\n<div id=\"around\" class=\"step slide point\" data-x=\"-800\" data-y=\"-2500\" date-z=\"0\" data-scale=\"0.5\">\n    <q style=\"font-size: 17em\">&asymp;</q>\n</div>\n\n<div id=\"percise\" class=\"step slide point\" data-x=\"-300\" data-y=\"-2500\" data-scale=\"0.5\">\n    <q style=\"font-size: 17em\">=</q>\n</div>\n\n<div id=\"acc\" class=\"step\" data-x=\"100\" data-y=\"-2200\" data-scale=\"2.5\">\n        <q>Accounting</q>\n</div>\n\n<div id=\"title\" class=\"step\" data-x=\"3000\" data-y=\"-300\"  data-rotate=\"0\" data-scale=\"9\">\n        <q>5 Tips on</q><br />\n        <q><h1>Personal Finance</h1></q>\n</div>\n\n<div id=\"r1\" class=\"step \" data-x=\"1500\" data-y=\"-2000\"\n    data-scale=\"6\" data-rotate=\"-10\">\n        <q>T1, Saving before spending</q>\n</div>\n<div id=\"r2\" class=\"step \" data-x=\"3700\" data-y=\"-1800\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T2, Plan the emergency amount</q>\n</div>\n\n<div id=\"insurance\" class=\"step\" data-x=\"5500\" data-y=\"250\" data-scale=\"5\" data-rotate=\"90\">\n        <q>Insurance</q>\n</div>\n\n<div id=\"r3\" class=\"step \" data-x=\"6000\" data-y=\"700\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T3, Accounting</q>\n</div>\n\n<div id=\"source\" class=\"step \" data-x=\"3500\" data-y=\"-900\" data-scale=\"3\"\n    data-z=\"100\"></div>\n\n<div id=\"r4\" class=\"step \" data-x=\"3000\" data-y=\"900\" data-scale=\"6\"\n    data-rotate=\"-10\">\n        <q>T4, Investment / Risk</q>\n</div>\n\n<div id=\"r5\" class=\"step \" data-x=\"0\" data-y=\"800\" data-scale=\"6\"\n    deta-z=\"230\" data-rotate=\"-10\">\n        <q>T5, Stay Healthy / Keep learning ...</q>\n</div>\n\n<!--<div id=\"review\" class=\"step point\" data-x=\"0\" data-y=\"0\" data-scale=\"2\">\n        <q><strong>Review</strong></q>\n</div>-->\n\n<div id=\"overview\" class=\"step\" data-x=\"1700\" data-y=\"-500\" data-scale=\"7\">\n</div>\n\n<div class=\"hint\">\n    <p>Use a spacebar or arrow keys to navigate</p>\n</div>\n<script>\nif (\"ontouchstart\" in document.documentElement) { \n    document.querySelector(\".hint\").innerHTML = \"<p>Tap on the left or right to navigate</p>\";\n}\n</script>\n\n<!--\nHi, everyone. If I ask you a question, that is do you know how much you spend last month, on your food, on your entertainment. And do you know the percise number you spend, and the percise percentages of each part.\n\nAccounting ourself is one of many tips about personal finance. \n\nToday I will share you 5 tips on personal finance.\n\nTip number 1, Saving some money at first. Some people save money after they spend. A better way is spending should depend on how much you want to save at first. Be doing that, we have started a plan on personal finance.\n\n# Rule 1.5, Giving your purchase willingness a frozen time. If I want to buy a new mobile today, I ask myself, whether it is necessary right now. Maybe I can still use my old one for a month. So I hold down my purchase willing, and if 30 days later, I still urge to own the new mobile phone, I will enjoy myself. But sometimes, after 30 days, the willing of purchase will fade out. So we save amount of money, and we can spend it on education or something necessary.\n\nTip #2, Plan some emergency money. If I lose my job tomorrow, I should have some money for my food until next job. And, we use insurance to transfer the loss of risk. If I get injured in accident or face healthy problem, I need the insurance to cover my medical care. (10%)\n\nTip #3, Accounting ourself. Write down the number we spend and catalog our spending. If I find that I spend a lot on entertainment last year, I can make a change on my financial plan.\n# For instance, If you will pay the tuition fee of MSE next month, assuming it is 5000, and you can receive an payback which is 4000. And now you want to buy a new mobile phone cost 2000. According the accounting, you may choose a cheaper mobile cost 1000, and you save another 1000 for further tuition fee.\n\nTip #4, Put some money on investment depending on the risk level we can take. \n# Starting some simple investment. If you have account on bao.alipay.com, you are using an investment named money market fund, which has lower risk. Then, you may try another money market funds. And if you have knowledge on other types of investment, stock funds, bond ... In my opinion, it is worth for learning some knowledge on finance.\n\nTip #5, Keep learning. we use the financial knowledge to improve our financial ability. \n# If a child who commits a crime will cost the parent more than money.\n\nThat's all I want to share, so enjoy money, and enjoy learning. Thanks.\n-->\n","slug":"tips-on-basic-personal-finance","published":1,"date":"2014-04-30T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrt0006yxcb64yh6ujt"},{"layout":"post","title":"Understand Monads in C#","description":"An Short Literature Review on Monads in C#","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article is a reading note for _Monads_ [^EL13] by Eric Lippert.\n> And the note is mainly written in Chinese.\n>\n> For me, Monad is a pipe line, transferring the input data,\n> including the operator and sending to the next port. Monad will\n> calculate the input at the end of this pipe line, and will\n> never break this pipe rule, nor throw error out.\n>\n> For more details, please read the English references.\n\n<!--more-->\n\nEric Lippert indicates in his article [^EL13-8]：\n\n> You might have noticed that the asynchronous, lazy, on-demand and sequence monads all have an interesting common property: when you apply a function to any of these monads, what you get back is an object that will perform that function in the future. Essentially, the bind function takes an immutable workflow and its subsequent step, and returns you the resulting new workflow. The bind operator does not execute the workflow; it makes a new workflow out of an old one.\n\nThe bind operator is call `SelectMany` in `C#`, or `flatMap` in `Scala`.\n\nWes Dyer also summarized that we need `Unit`, `Bind` and the Three rules [^WD08]:\n\n    static M<T>  Unit<T>(T value);\n    static M<R>  Bind<T, R>(M<T>, Func<T, M<R>>)\n\n1.  Left Identity\n\n        Bind(Unit(e), k) = k(e)\n\n2.  Right Identity\n\n        Bind(m, Unit) = m\n\n3.  结合律\n\n        Bind(m, x => Bind(k(x), y => h(y)) = Bind(Bind(m, x => k(x)), y => h(y))\n\n\n# References\n\n[^EL13]: Eric Lippert. [Monads](http://ericlippert.com/category/monads)[J/OL] 2013\n\n[^EL13-2]: Eric Lippert. [Monads, Part 2](http://ericlippert.com/2013/02/25/monads-part-two/)[J/OL] 2013.02.25\n\n[^EL13-3]: Eric Lippert. [Monads, Part 3](http://ericlippert.com/2013/02/28/monads-part-three/)[J/OL] 2013.02.28\n\n[^EL13-4]: Eric Lippert. [Monads, Part 4](http://ericlippert.com/2013/03/04/monads-part-four/)[J/OL] 2013.03.04\n\n[^EL13-5]: Eric Lippert. [Monads, Part 5](http://ericlippert.com/2013/03/07/monads-part-five/)[J/OL] 2013.03.07\n\n[^EL13-8]: Eric Lippert. [Monads, Part 8](http://ericlippert.com/2013/03/18/monads-part-eight/)[J/OL] 2013.03.18\n\n[^EL13-10]: Eric Lippert. [Monads, Part 10](http://ericlippert.com/2013/03/25/monads-part-ten/)[J/OL] 2013.03.25\n\n[^EL11]: Eric Lippert. [Answer to _Are there any connections between Haskell and LINQ?_](http://stackoverflow.com/a/4683716)[EB/OL]. StackOverflow.com 2011.01.13\n\n[^WD08]: Wes Dyer. [The Marvels of Monads](http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx)[J/OL] 2008\n\n[^DC13]: Douglas Crockford. Monads and Gonads, in the Speech named _JavaScript the Good Parts_\n\n[^ST13]: Stephen Toub. [Tasks, Monads, and LINQ](http://blogs.msdn.com/b/pfxteam/archive/2013/04/03/tasks-monads-and-linq.aspx)[J/OL] 2013\n\n[^CH13]: 陈浩. [从面向对象的设计模式看软件设计](http://coolshell.cn/articles/8961.html)[J/OL] 2013\n\n[^WL14]: 维基百科. [λ Calculus](https://en.wikipedia.org/wiki/Lambda_calculus)[J/OL] 2014\n","source":"_posts/2014-06-20-understand-monads-in-c.md","raw":"---\nlayout: post\ntitle: \"Understand Monads in C#\"\ndescription: \"An Short Literature Review on Monads in C#\"\ncategory: \"pattern\"\ntags: [\"linq\", \"monad\", \"scala\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article is a reading note for _Monads_ [^EL13] by Eric Lippert.\n> And the note is mainly written in Chinese.\n>\n> For me, Monad is a pipe line, transferring the input data,\n> including the operator and sending to the next port. Monad will\n> calculate the input at the end of this pipe line, and will\n> never break this pipe rule, nor throw error out.\n>\n> For more details, please read the English references.\n\n<!--more-->\n\nEric Lippert indicates in his article [^EL13-8]：\n\n> You might have noticed that the asynchronous, lazy, on-demand and sequence monads all have an interesting common property: when you apply a function to any of these monads, what you get back is an object that will perform that function in the future. Essentially, the bind function takes an immutable workflow and its subsequent step, and returns you the resulting new workflow. The bind operator does not execute the workflow; it makes a new workflow out of an old one.\n\nThe bind operator is call `SelectMany` in `C#`, or `flatMap` in `Scala`.\n\nWes Dyer also summarized that we need `Unit`, `Bind` and the Three rules [^WD08]:\n\n    static M<T>  Unit<T>(T value);\n    static M<R>  Bind<T, R>(M<T>, Func<T, M<R>>)\n\n1.  Left Identity\n\n        Bind(Unit(e), k) = k(e)\n\n2.  Right Identity\n\n        Bind(m, Unit) = m\n\n3.  结合律\n\n        Bind(m, x => Bind(k(x), y => h(y)) = Bind(Bind(m, x => k(x)), y => h(y))\n\n\n# References\n\n[^EL13]: Eric Lippert. [Monads](http://ericlippert.com/category/monads)[J/OL] 2013\n\n[^EL13-2]: Eric Lippert. [Monads, Part 2](http://ericlippert.com/2013/02/25/monads-part-two/)[J/OL] 2013.02.25\n\n[^EL13-3]: Eric Lippert. [Monads, Part 3](http://ericlippert.com/2013/02/28/monads-part-three/)[J/OL] 2013.02.28\n\n[^EL13-4]: Eric Lippert. [Monads, Part 4](http://ericlippert.com/2013/03/04/monads-part-four/)[J/OL] 2013.03.04\n\n[^EL13-5]: Eric Lippert. [Monads, Part 5](http://ericlippert.com/2013/03/07/monads-part-five/)[J/OL] 2013.03.07\n\n[^EL13-8]: Eric Lippert. [Monads, Part 8](http://ericlippert.com/2013/03/18/monads-part-eight/)[J/OL] 2013.03.18\n\n[^EL13-10]: Eric Lippert. [Monads, Part 10](http://ericlippert.com/2013/03/25/monads-part-ten/)[J/OL] 2013.03.25\n\n[^EL11]: Eric Lippert. [Answer to _Are there any connections between Haskell and LINQ?_](http://stackoverflow.com/a/4683716)[EB/OL]. StackOverflow.com 2011.01.13\n\n[^WD08]: Wes Dyer. [The Marvels of Monads](http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx)[J/OL] 2008\n\n[^DC13]: Douglas Crockford. Monads and Gonads, in the Speech named _JavaScript the Good Parts_\n\n[^ST13]: Stephen Toub. [Tasks, Monads, and LINQ](http://blogs.msdn.com/b/pfxteam/archive/2013/04/03/tasks-monads-and-linq.aspx)[J/OL] 2013\n\n[^CH13]: 陈浩. [从面向对象的设计模式看软件设计](http://coolshell.cn/articles/8961.html)[J/OL] 2013\n\n[^WL14]: 维基百科. [λ Calculus](https://en.wikipedia.org/wiki/Lambda_calculus)[J/OL] 2014\n","slug":"understand-monads-in-c","published":1,"date":"2014-06-19T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrw0009yxcbsmv181a1"},{"layout":"post","title":"Introduction of Building Documents with LaTeX","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will give brief introduction for `TeX` and `LaTeX`, then discuss a few issues during using `LaTeX`\n> and how to display `LaTeX` equation on web page.\n>\n> This article is mainly written in Chinese.\n>\n> If you want to know the KaTeX with Jekyll,\n> you can reach [this post](http://xuc.me/blog/KaTeX-and-Jekyll/).\n> A `LaTeX` template will be provided.\n\n<!--more-->\n\n# KaTeX, not MathJax\n\nThe render speed of `MathJax` is too slow,\nwhile the `KaTeX` from [Khan Acedemy](https://khan.github.io/KaTeX/) team,\nwill render all equation with pure `CSS`, and it will render your `LaTeX`\nequation as fast as you can imagine.\n\n$$e^x = \\lim_{n\\rightarrow \\infty} \\sum_{t=0}^{n} ( \\frac{1}{t!}\\cdot x^t )= \\sum_{t=0}^{\\infty} (1 + x + \\frac{1}{2!}x^2+\\frac{1}{3!}x^3+ ... + \\frac{1}{t!}\\cdot x^t)$$\n\nIf you want to know more details with KaTeX for Jekyll,\nyou can read [this post](http://xuc.me/blog/KaTeX-and-Jekyll/).\n\n# A Sample of LaTeX Template\n\n{% highlight tex %}\n\\documentclass[a4paper]{book}\n\n% shortcut for scozv's github homepage\n\\usepackage{hyperref}\n\\newcommand{\\scozv}{https://github.com/scozv}\n\n% shortcut for \\ding{213}\n\\newcommand{\\To}{\\ding{213}}\n\n\\usepackage{listings, color}\n% shortcut for inline code snippet, like `code` in markdown\n% \\newcommand{\\cd}[1]{\\colorbox[rgb]{0.86,0.86,0.86}{\\lstinline$#1$}}\n\\newcommand{\\cd}[1]{\\lstinline$#1$}\n\n% shortcut for section, subsection, subsubsection\n% mb stands for member\n\\newcommand{\\mb}[1]{\\subsection*{#1}}\n\\newcommand{\\mmb}[1]{\\subsubsection*{#1}}\n\n% set style for multiple lines code snippet\n\\lstset{numbers=left, numberstyle=\\tiny\n\t, stepnumber=2, numbersep=5pt\n\t, backgroundcolor=\\color[rgb]{0.86,0.86,0.86}\n\t, basicstyle=\\footnotesize\\ttfamily\n\t, breaklines=true}\n\n% set index\n\\usepackage{multind}\n\\makeindex{idx_finance}\n\\newcommand{\\idxf}[1]{\\index{idx_finance}{#1}}\n% heading\n\\setcounter{secnumdepth}{3}\n\n% set multi-ref\n\\usepackage{multibib}\n\\newcommand{\\bibnamec}{References of Programming}\n\\newcites{c}{\\bibnamec}\n\\newcommand{\\bibnamef}{References of Finance}\n\\newcites{f}{\\bibnamef}\n\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n% http://ctan.org/pkg/xecjk\n\\usepackage{xltxtra, xeCJK}\n\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n% Latin\n\\usepackage{fontspec, pifont}\n\\setmainfont{Gentium Book Basic} %[ItalicFont=Gentium Book Basic Bold]\n\n% intertext, trigleq and proof\n\\usepackage{amsmath, amssymb, amsthm}\n\n% bold emphasized text\n\\makeatletter\n\\DeclareRobustCommand{\\em}{\\%\n  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n  \\normalfont \\else \\bfseries \\fi}\n\\makeatother\n\n% tiny margin note\n\\makeatletter\n  \\long\\def\\@ympar#1{\\%\n  \\@savemarbox\\@marbox{\\small #1}%\n  \\global\\setbox\\@currbox\\copy\\@marbox\n  \\@xympar}\n\\makeatother\n\n% reduce the space of itemize\n\\newlength{\\wideitemsep}%\n\\setlength{\\wideitemsep}{.5\\itemsep}%\n\\addtolength{\\wideitemsep}{-7pt}%\n\\let\\olditem\\item\n\\renewcommand{\\item}{\\setlength{\\itemsep}{\\wideitemsep}\\olditem}\n\n\\begin{document}\n\\title{Introduction of Building Documents with LaTeX}\n\\author{Scott}\n\\date{Aug, 12, 2015}\n\\maketitle\n\n\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n\\begin{quotation}\n\\noindent % abstract text\nThis artical will give brief introduction for TeX and LaTeX,\nthen discuss a few issues during using LaTeX\nand how to display LaTeX eqation on web page.\nFinally, a LaTeX template will be attached in Appendix.\n\\end{quotation}\n\\clearpage\n\n% no indent of second ... paragraphs of each section\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{1.3ex plus 0.5ex minus 0.3ex}\n\\part{Part I}\n  \\chapter{C01-01}\n    \\include{p1_c01}\n\\part{Part II}\n  \\chapter{C02-01}\n    \\include{p2_c01}\n  \\chapter{C02-02}\n    \\include{p2_c02}\n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamec}\n  \\bibliographystylec{GBT7714-2005NLang}\n  \\bibliographyc{code/ref}\n\n  \\makeatletter\n  % Put section depth at the same level as \\chapter.\n  \\renewcommand*{\\toclevel@section}{0}\n  \\printindex{idx_finance}{Index of Finance}\n  % Put section depth back to its default value.\n  \\renewcommand*{\\toclevel@section}{1}\n  \\makeatother  \n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamef}\n  \\bibliographystylef{GBT7714-2005NLang}\n  \\bibliographyf{finance/ref}\n\n\\appendix\n\\part{Appendix}\n\\chapter{Appendix I}\n\\include{appendix}\n\\end{document}\n{% endhighlight %}\n\n\n# References\n\n[^TUG01]: [Pointers to Frequently Asked and Answered Questions](https://tug.org/tex-ptr-faq). tug.org. [OL]\n\n[^WIK01]: [`LaTeX`的趣味应用](https://zh.wikipedia.org/wiki/LaTeX#.E8.B6.A3.E5.91.B3.E6.87.89.E7.94.A8). wikipedia.org. [OL]\n\n\n[1]: https://en.wikipedia.org/wiki/TeX \"TeX Wikipage\"\n[2]: https://github.com/weijianwen/SJTUThesis \"SJTU Thesis LaTeX Template\"\n[3]: http://web.mit.edu/thesis/tex/ \"MIT Thesis LaTeX Template\"\n","source":"_posts/2015-08-12-introduction-of-building-documents-with-latex.md","raw":"---\nlayout: post\ntitle: \"Introduction of Building Documents with LaTeX\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"latex\",\"tex\",\"project\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will give brief introduction for `TeX` and `LaTeX`, then discuss a few issues during using `LaTeX`\n> and how to display `LaTeX` equation on web page.\n>\n> This article is mainly written in Chinese.\n>\n> If you want to know the KaTeX with Jekyll,\n> you can reach [this post](http://xuc.me/blog/KaTeX-and-Jekyll/).\n> A `LaTeX` template will be provided.\n\n<!--more-->\n\n# KaTeX, not MathJax\n\nThe render speed of `MathJax` is too slow,\nwhile the `KaTeX` from [Khan Acedemy](https://khan.github.io/KaTeX/) team,\nwill render all equation with pure `CSS`, and it will render your `LaTeX`\nequation as fast as you can imagine.\n\n$$e^x = \\lim_{n\\rightarrow \\infty} \\sum_{t=0}^{n} ( \\frac{1}{t!}\\cdot x^t )= \\sum_{t=0}^{\\infty} (1 + x + \\frac{1}{2!}x^2+\\frac{1}{3!}x^3+ ... + \\frac{1}{t!}\\cdot x^t)$$\n\nIf you want to know more details with KaTeX for Jekyll,\nyou can read [this post](http://xuc.me/blog/KaTeX-and-Jekyll/).\n\n# A Sample of LaTeX Template\n\n{% highlight tex %}\n\\documentclass[a4paper]{book}\n\n% shortcut for scozv's github homepage\n\\usepackage{hyperref}\n\\newcommand{\\scozv}{https://github.com/scozv}\n\n% shortcut for \\ding{213}\n\\newcommand{\\To}{\\ding{213}}\n\n\\usepackage{listings, color}\n% shortcut for inline code snippet, like `code` in markdown\n% \\newcommand{\\cd}[1]{\\colorbox[rgb]{0.86,0.86,0.86}{\\lstinline$#1$}}\n\\newcommand{\\cd}[1]{\\lstinline$#1$}\n\n% shortcut for section, subsection, subsubsection\n% mb stands for member\n\\newcommand{\\mb}[1]{\\subsection*{#1}}\n\\newcommand{\\mmb}[1]{\\subsubsection*{#1}}\n\n% set style for multiple lines code snippet\n\\lstset{numbers=left, numberstyle=\\tiny\n\t, stepnumber=2, numbersep=5pt\n\t, backgroundcolor=\\color[rgb]{0.86,0.86,0.86}\n\t, basicstyle=\\footnotesize\\ttfamily\n\t, breaklines=true}\n\n% set index\n\\usepackage{multind}\n\\makeindex{idx_finance}\n\\newcommand{\\idxf}[1]{\\index{idx_finance}{#1}}\n% heading\n\\setcounter{secnumdepth}{3}\n\n% set multi-ref\n\\usepackage{multibib}\n\\newcommand{\\bibnamec}{References of Programming}\n\\newcites{c}{\\bibnamec}\n\\newcommand{\\bibnamef}{References of Finance}\n\\newcites{f}{\\bibnamef}\n\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n% http://ctan.org/pkg/xecjk\n\\usepackage{xltxtra, xeCJK}\n\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n% Latin\n\\usepackage{fontspec, pifont}\n\\setmainfont{Gentium Book Basic} %[ItalicFont=Gentium Book Basic Bold]\n\n% intertext, trigleq and proof\n\\usepackage{amsmath, amssymb, amsthm}\n\n% bold emphasized text\n\\makeatletter\n\\DeclareRobustCommand{\\em}{\\%\n  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n  \\normalfont \\else \\bfseries \\fi}\n\\makeatother\n\n% tiny margin note\n\\makeatletter\n  \\long\\def\\@ympar#1{\\%\n  \\@savemarbox\\@marbox{\\small #1}%\n  \\global\\setbox\\@currbox\\copy\\@marbox\n  \\@xympar}\n\\makeatother\n\n% reduce the space of itemize\n\\newlength{\\wideitemsep}%\n\\setlength{\\wideitemsep}{.5\\itemsep}%\n\\addtolength{\\wideitemsep}{-7pt}%\n\\let\\olditem\\item\n\\renewcommand{\\item}{\\setlength{\\itemsep}{\\wideitemsep}\\olditem}\n\n\\begin{document}\n\\title{Introduction of Building Documents with LaTeX}\n\\author{Scott}\n\\date{Aug, 12, 2015}\n\\maketitle\n\n\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n\\begin{quotation}\n\\noindent % abstract text\nThis artical will give brief introduction for TeX and LaTeX,\nthen discuss a few issues during using LaTeX\nand how to display LaTeX eqation on web page.\nFinally, a LaTeX template will be attached in Appendix.\n\\end{quotation}\n\\clearpage\n\n% no indent of second ... paragraphs of each section\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{1.3ex plus 0.5ex minus 0.3ex}\n\\part{Part I}\n  \\chapter{C01-01}\n    \\include{p1_c01}\n\\part{Part II}\n  \\chapter{C02-01}\n    \\include{p2_c01}\n  \\chapter{C02-02}\n    \\include{p2_c02}\n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamec}\n  \\bibliographystylec{GBT7714-2005NLang}\n  \\bibliographyc{code/ref}\n\n  \\makeatletter\n  % Put section depth at the same level as \\chapter.\n  \\renewcommand*{\\toclevel@section}{0}\n  \\printindex{idx_finance}{Index of Finance}\n  % Put section depth back to its default value.\n  \\renewcommand*{\\toclevel@section}{1}\n  \\makeatother  \n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamef}\n  \\bibliographystylef{GBT7714-2005NLang}\n  \\bibliographyf{finance/ref}\n\n\\appendix\n\\part{Appendix}\n\\chapter{Appendix I}\n\\include{appendix}\n\\end{document}\n{% endhighlight %}\n\n\n# References\n\n[^TUG01]: [Pointers to Frequently Asked and Answered Questions](https://tug.org/tex-ptr-faq). tug.org. [OL]\n\n[^WIK01]: [`LaTeX`的趣味应用](https://zh.wikipedia.org/wiki/LaTeX#.E8.B6.A3.E5.91.B3.E6.87.89.E7.94.A8). wikipedia.org. [OL]\n\n\n[1]: https://en.wikipedia.org/wiki/TeX \"TeX Wikipage\"\n[2]: https://github.com/weijianwen/SJTUThesis \"SJTU Thesis LaTeX Template\"\n[3]: http://web.mit.edu/thesis/tex/ \"MIT Thesis LaTeX Template\"\n","slug":"introduction-of-building-documents-with-latex","published":1,"date":"2015-08-11T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryrx000byxcbkvn20zex"},{"layout":"post","title":"How Do We Apply the Hyde Theme to Existing Jekyll Site?","description":"","lang":"en","_content":"{% include JB/setup %}\n\n\n# Abstract\n{:.no_toc}\n\n> This article will describe the process of applying Hyde theme on my existing Jekyll Bootstrap site.\n> And this approach can be used for applying any theme of Jekyll. The main ideas of integrating the 3rd Jekyll Theme\n> are:\n>\n> * knowing the basic structure of Jekyll site,\n> * knowing the basic workflow of rendering HTML from Jekyll scripts,\n> * comparing the code differences between `Hyde` and your site,\n> * replacing code and test.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Before Applying...\n\n## Start a Branch for Hyde\n\nApplying the Hyde to your existing Jekyll site is not a one-click step, so open a branch for Hyde applying,\nIn case when you fail to apply Hyde and you want to revert changes and start over again.\n\n## NO Need to be a Master of CSS or HTML\n\nI have very limited experience on CSS or HTML, so CSS for me is like RegEx, I can always check the CSS references,\nor seek help from stackoverflow when I face a styling problem.\n\n# Introduction of Jekyll\n\n## the Directory Structure of Jekyll\n\nCheck the official document on the folder structure of Jekyll:\n\n__[Directory structure](https://jekyllrb.com/docs/structure/)__\n\nFor me, I used [Jekyll-bootstrap 3](https://github.com/dbtek/jekyll-bootstrap-3) before.\nthe directory structure has a little bit difference comparing with the original Jekyll.\n\n{% highlight sh %}\n.\n├── assets\n|   ├── css\n|   ├── js\n|   ├── img\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n├── _includes\n|   ├── JB\n|   |   ├── comments_render_script\n|   |   ├── pages_list_script\n|   |   ├── analytics_render_script\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n|           ├── default.html\n|           ├── page.html\n|           └── post.html\n├── _layouts\n|   ├── default.html\n|   ├── page.html\n|   └── post.html\n{% endhighlight %}\n\nNotice that there are two folders named `themes`, I will explain more letter.\nThe `Hyde` theme will be installed into these two `themes/` folder.\nYou may read the source code and it's easy to understand their usage.\n\n## HTML Rendering Workflow\n\nThis section will list the steps of rendering HTML by Jekyll.\nAgain, reading the source code is useful, and it can help you apply other plugin / themes\nto your existing Jekyll site.\n\n### `./_layout/*.html`, the Entrance of HTML\n\nthe `_layout` folder is used for:\n\n* configuration of the theme name,\n* including the theme layout files, or installing the __part__ of theme into your site.\n\nRead the source code of any `html` file in `_layout` folder, and notice that:\n\n* a variable named `layout.theme.name` has been defined in these `html` files, and it may be used for Jekyll 3.\n  see [issue #15](https://github.com/scozv/scozv.github.com/issues/15#issuecomment-195689664),\n* make sure the path correct in `{ % include % }`.\n\n### `./_includes/JB/*`, the Utilities Scripts as the HTML Rendering Helper\n\n`JB` stands for `Jekyll Bootstrap`, in this folder, you can find many useful scripts that are used for\nrendering a `part` of HTML:\n\n* How do you want to display the comment section in your post,\n* define some global variable, see `./_includes/JB/setup`.\n\nThe scripts in `JB/` are mainly used in `./_includes/themes/*`,\nYou will figure out the usage of utilities by searching `{ % include _includes/JB/setup % }`\n\n\n### `./_includes/themes/`, the Layout Design of the Theme\n\nThe HTML layout design of theme, Jekyll Bootstrap or Hyde, can be found in this folder.\n\n### `./assets/themes/`, the CSS design, JavaScript or image of the Theme\n\n# Steps of Installing Hyde into Existing Site\n\nComparing the `Hyde` project to your existing site will tell you which files you need\nto install. The steps below based on my previous site.\n\n0. open a branch for Hyde,\n0. put `hyde/public` into your `./assets/themes/hyde/`,\n0. put `hyde/_layout` into your `./_includes/themes/hyde/`,\n0. also put `hyde/_includes` into your `./_includes/themes/hyde/`,\n0. see commit [235f6f6b3039](https://github.com/scozv/scozv.github.com/commit/235f6f6b303988a2208404ea071c9b2c05a97031?diff=split)\n   for files including,\n0. compare the existing theme folder with `hyde` to determine the changes on `hyde` layout, for me,\n   I compared `./_includes/theme/bootstrap` with `./_includes/theme/hyde`,\n0. do a code review of `./_includes/theme/hyde` based on your comparasion, make sure you merge the existing layout and\n   correct path into `Hyde` theme, see my commit\n   [1b2f41a3](https://github.com/scozv/scozv.github.com/commit/1b2f41a34f3a81e7789a4dcaf4750163ef7fda28),\n0. change the theme name in `_config.yml`, see my commit\n   [4743d50a](https://github.com/scozv/scozv.github.com/commit/4743d50aa0a04456005b1ced9c480880e342dd69),\n0. customize your site, see\n   * git commit -m '[change on footer](https://github.com/scozv/scozv.github.com/commit/b3c26850d164f77485e1c3cd041a61680cffc92c)',\n   * git commit -m '[enhanced related_posts](https://github.com/scozv/scozv.github.com/commit/4291fdc0dc42ad18d5fd72c1fbf2fd92d6a60fd9)',\n   * git commit -m '[tags and about](https://github.com/scozv/scozv.github.com/commit/89e9d8fdd22780d714f5fe12ae2180be0e5c1074)'.\n0. test and release.\n\n# Conclusions\n\nFor installing the theme of Jekyll:\n\n* `git flow feature start theme_name`,\n* copy CSS design into `assets` folder,\n* copy layout design into `_inlucdes/themes`,\n* change the configuration,\n* compare code differences for issue solving,\n* test and improving.\n\n\n# Encore\n\nI am not with rich experiences on CSS and Jekyll, even on ruby. I mostly\nwrite `Scala` and `<React.js />`, so I will not spend much time on Jekyll\ntheme unless someday, I have to.\n\nSo, in my opinion, Jekyll is used for writing the posts with coding, not used to\nkeep decorating with Themes, unless designing becomes my major.\n\nSo, is there anyone can help me on a little design requirement below?\n\n* For the post page including a Table of Content, short as `[toc]`,\n* reader scroll down the page, when he or she cannot see the `[toc]`,\n* I want to move the `[toc]` to the left sidebar automaticly,\n* the mobile screen may need for another design,\n* the main idea of this requirement is to select the section easily.\n\nThanks.\n","source":"_posts/2016-03-18-how-do-we-apply-the-hyde-theme-to-existing-jekyll-site.md","raw":"---\nlayout: post\ntitle: \"How Do We Apply the Hyde Theme to Existing Jekyll Site?\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"jekyll\", \"markdown\"]\nlang: en\n---\n{% include JB/setup %}\n\n\n# Abstract\n{:.no_toc}\n\n> This article will describe the process of applying Hyde theme on my existing Jekyll Bootstrap site.\n> And this approach can be used for applying any theme of Jekyll. The main ideas of integrating the 3rd Jekyll Theme\n> are:\n>\n> * knowing the basic structure of Jekyll site,\n> * knowing the basic workflow of rendering HTML from Jekyll scripts,\n> * comparing the code differences between `Hyde` and your site,\n> * replacing code and test.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Before Applying...\n\n## Start a Branch for Hyde\n\nApplying the Hyde to your existing Jekyll site is not a one-click step, so open a branch for Hyde applying,\nIn case when you fail to apply Hyde and you want to revert changes and start over again.\n\n## NO Need to be a Master of CSS or HTML\n\nI have very limited experience on CSS or HTML, so CSS for me is like RegEx, I can always check the CSS references,\nor seek help from stackoverflow when I face a styling problem.\n\n# Introduction of Jekyll\n\n## the Directory Structure of Jekyll\n\nCheck the official document on the folder structure of Jekyll:\n\n__[Directory structure](https://jekyllrb.com/docs/structure/)__\n\nFor me, I used [Jekyll-bootstrap 3](https://github.com/dbtek/jekyll-bootstrap-3) before.\nthe directory structure has a little bit difference comparing with the original Jekyll.\n\n{% highlight sh %}\n.\n├── assets\n|   ├── css\n|   ├── js\n|   ├── img\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n├── _includes\n|   ├── JB\n|   |   ├── comments_render_script\n|   |   ├── pages_list_script\n|   |   ├── analytics_render_script\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n|           ├── default.html\n|           ├── page.html\n|           └── post.html\n├── _layouts\n|   ├── default.html\n|   ├── page.html\n|   └── post.html\n{% endhighlight %}\n\nNotice that there are two folders named `themes`, I will explain more letter.\nThe `Hyde` theme will be installed into these two `themes/` folder.\nYou may read the source code and it's easy to understand their usage.\n\n## HTML Rendering Workflow\n\nThis section will list the steps of rendering HTML by Jekyll.\nAgain, reading the source code is useful, and it can help you apply other plugin / themes\nto your existing Jekyll site.\n\n### `./_layout/*.html`, the Entrance of HTML\n\nthe `_layout` folder is used for:\n\n* configuration of the theme name,\n* including the theme layout files, or installing the __part__ of theme into your site.\n\nRead the source code of any `html` file in `_layout` folder, and notice that:\n\n* a variable named `layout.theme.name` has been defined in these `html` files, and it may be used for Jekyll 3.\n  see [issue #15](https://github.com/scozv/scozv.github.com/issues/15#issuecomment-195689664),\n* make sure the path correct in `{ % include % }`.\n\n### `./_includes/JB/*`, the Utilities Scripts as the HTML Rendering Helper\n\n`JB` stands for `Jekyll Bootstrap`, in this folder, you can find many useful scripts that are used for\nrendering a `part` of HTML:\n\n* How do you want to display the comment section in your post,\n* define some global variable, see `./_includes/JB/setup`.\n\nThe scripts in `JB/` are mainly used in `./_includes/themes/*`,\nYou will figure out the usage of utilities by searching `{ % include _includes/JB/setup % }`\n\n\n### `./_includes/themes/`, the Layout Design of the Theme\n\nThe HTML layout design of theme, Jekyll Bootstrap or Hyde, can be found in this folder.\n\n### `./assets/themes/`, the CSS design, JavaScript or image of the Theme\n\n# Steps of Installing Hyde into Existing Site\n\nComparing the `Hyde` project to your existing site will tell you which files you need\nto install. The steps below based on my previous site.\n\n0. open a branch for Hyde,\n0. put `hyde/public` into your `./assets/themes/hyde/`,\n0. put `hyde/_layout` into your `./_includes/themes/hyde/`,\n0. also put `hyde/_includes` into your `./_includes/themes/hyde/`,\n0. see commit [235f6f6b3039](https://github.com/scozv/scozv.github.com/commit/235f6f6b303988a2208404ea071c9b2c05a97031?diff=split)\n   for files including,\n0. compare the existing theme folder with `hyde` to determine the changes on `hyde` layout, for me,\n   I compared `./_includes/theme/bootstrap` with `./_includes/theme/hyde`,\n0. do a code review of `./_includes/theme/hyde` based on your comparasion, make sure you merge the existing layout and\n   correct path into `Hyde` theme, see my commit\n   [1b2f41a3](https://github.com/scozv/scozv.github.com/commit/1b2f41a34f3a81e7789a4dcaf4750163ef7fda28),\n0. change the theme name in `_config.yml`, see my commit\n   [4743d50a](https://github.com/scozv/scozv.github.com/commit/4743d50aa0a04456005b1ced9c480880e342dd69),\n0. customize your site, see\n   * git commit -m '[change on footer](https://github.com/scozv/scozv.github.com/commit/b3c26850d164f77485e1c3cd041a61680cffc92c)',\n   * git commit -m '[enhanced related_posts](https://github.com/scozv/scozv.github.com/commit/4291fdc0dc42ad18d5fd72c1fbf2fd92d6a60fd9)',\n   * git commit -m '[tags and about](https://github.com/scozv/scozv.github.com/commit/89e9d8fdd22780d714f5fe12ae2180be0e5c1074)'.\n0. test and release.\n\n# Conclusions\n\nFor installing the theme of Jekyll:\n\n* `git flow feature start theme_name`,\n* copy CSS design into `assets` folder,\n* copy layout design into `_inlucdes/themes`,\n* change the configuration,\n* compare code differences for issue solving,\n* test and improving.\n\n\n# Encore\n\nI am not with rich experiences on CSS and Jekyll, even on ruby. I mostly\nwrite `Scala` and `<React.js />`, so I will not spend much time on Jekyll\ntheme unless someday, I have to.\n\nSo, in my opinion, Jekyll is used for writing the posts with coding, not used to\nkeep decorating with Themes, unless designing becomes my major.\n\nSo, is there anyone can help me on a little design requirement below?\n\n* For the post page including a Table of Content, short as `[toc]`,\n* reader scroll down the page, when he or she cannot see the `[toc]`,\n* I want to move the `[toc]` to the left sidebar automaticly,\n* the mobile screen may need for another design,\n* the main idea of this requirement is to select the section easily.\n\nThanks.\n","slug":"how-do-we-apply-the-hyde-theme-to-existing-jekyll-site","published":1,"date":"2016-03-17T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys1000eyxcbepmcgslv"},{"layout":"post","title":"Fully Migrating from Bitbucket Cloud Issue System to JIRA Server","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This post will give a full migration guide from Bitbucket Cloud Issue\n> to JIRA Server, including:\n>\n> * Import legacy Bitbucket Cloud Issue into JIRA Server,\n> * Build Dual-direction connection between Bitbucket Cloud and JIRA Server,\n> * Upgrade the issue ticket number in git commits history,\n> to archive the __FULL__ migration.\n>\n> This post will __NOT__ cover the topics below:\n>\n> * Why I choose JIRA instead of other issue system,\n> * Why I choose Bitbucket Cloud instead of other git server,\n> * Why I choose Ubuntu 14.04 Server instead of other OS.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Core Ideas of My Understanding of a Project\n\n__Loose Coupling__ and __CI__ are two core ideas of my understanding\nof a project.\n\n## Loose Coupling\n\n* A project MUST be separated into a series of INDEPENDENT modules,\n* Each module will be a code repository,\n* The communication among these INDEPENDENT modules is not depended\n  on source code, it is depended on the API docs.\n\n## Continuous Integration\n\n* Each module MUST contains the necessary tests with at least 80%\n  code covered,\n* An infrastructure module MUST satisfy 100% code coverage,\n* A RESTful Service module MUST contain the `FakeRequest` BDD test,\n* A web page module shoud consider the web page test, such as using [Selenium](www.seleniumhq.org),\n* 不写测试的代码就是耍流氓\n* Each module need to satisfy the Commit Acceptance Policy [^CAP01]:\n   * The source commit message must contain a valid issue number(s),\n   * All issues referenced in the commit message must be UNRESOLVED,\n   * All issues referenced in the commit message must be assigned to the committer.\n* Every commit to any module need to be build and tested on CI server,\n* Committer will be noticed when the commit leaded a failure build or test,\n* __Each code commit can be traced to the issue system__,\n* __Each issue can be traced to a series of commits__,\n* The environment of each iterative build should be independent,\n* Continuous build, deployment and more...\n\n# Limitation of Bitbucket Cloud Build-in Issue System\n\nIf we want to build a library system (the project code is `LS`),\nwe may separate the project into a series of repositories (modules) below:\n\n* `ls-core-restful`: A core RESTful service, including user management, book management,\nand borrowing management,\n* `ls-web-user`: A web page system for user to send the borrowing request,\n* `ls-web-admin`: A web page system for library staff to approve the borrowing request,\n* `ls-core-model`: An infrastructure data model in JavaScript (or TypeScript) shared by two web page systems.\n\n(This separation is only used for the example, it may not be a perfect module\n  architecture)\n\nWe create a project with code name `LS` in Bitbucket Cloud.\n\nWe create four repositories under `LS` in Bitbucket Cloud:\n\n{% highlight sh %}\nls-core-restful.git\nls-core-model.git\nls-web-user.git\nls-web-admin.git\n{% endhighlight %}\n\nIf we raise an issue saying:\n{% highlight sh %}\nLogin page should be designed and implemented\n{% endhighlight %}\n\nWhere we open the issue in the Bitbucket Cloud build-in Issue System?\nIn Bitbucket Cloud, the build-in issue system is not share in project,\nwe have to raise an individual issue in each repo:\n{% highlight sh %}\n# ls-core-model.git/issue/1\nImplement the User model\n# ls-core-restful.git/issue/1\nImplement the login with token authentication service\n# ls-web-user/issue/1\nImplement the user login page\n# ls-web-admin/issue/1\nImplement the admin authorization page\n{% endhighlight %}\n\nThe limitation of Bitbucket Cloud build-in Issue System is:\n\n* Not a central issue system,\n* Have to grant access right of `ls-core-restful` to other committers.\n  This has been violating the __Loose Coupling__ principle, cause we just need\n  to expose an API docs of `ls-core-restful`\n  to committers of other repositories,\n* The commit history of \"Login page implementation\" has to be\n  separated into different repositories,\n  violating the __Continuous Integration__ principle.\n\n# JIRA, a Central Issue System\n\nWe need a Central Issue System that can be synced with multiple source code\nrepositories. I choose JIRA 6.4.13 + JIRA Agile deploying on the environment\nbelow:\n\n{% highlight sh %}\nUbuntu 14.04.4 LTS\nmysql  Ver 14.14 Distrib 5.5.47,\n  for debian-linux-gnu (x86_64) using readline 6.3\nopenjdk version \"1.8.0_72-internal\"\nOpenJDK Runtime Environment (build 1.8.0_72-internal-b15)\nOpenJDK 64-Bit Server VM (build 25.72-b15, mixed mode)\nAtlassian JIRA Project Management Software\n  (v6.4.13#64028-sha1:b7939e9)\nJIRA Agile 6.7.12\nJIRA Commit Acceptance Plugin 1.6.0\n{% endhighlight %}\n\nCurrently, my deployment of JIRA 6 + Agile works smoothly with Bitbucket Cloud.\nWe can:\n\n* Raise only one issue that need code changes on multiple repositories,\n* Push code to Bitbucket Cloud,\n  then review the commit history in JIRA issue page,\n* Configure Bitbucket Cloud, so that the commit history page can link to\n  the JIRA issue.\n* [TODO] Reject push that committed to Bitbucket Cloud if this commit violates\n  the JIRA Acceptance Policy.\n\n\n# Full Migration Guide to JIRA Server\n\n## Installing JIRA Server on Ubuntu\n\nAtlassian provides an official installation guide [^ATL_jira_install].\nMeet the system requirement, and pay attention on:\n\n* Neither MariaDB nor PerconaDB are supported [^ATL_maria_null] [^ATL_maria_null_2],\n* Atlassian JIRA Commit Acceptance Plugin is only support for JIRA Server 5.0 - 6.4.13,\n* For JIRA Server 6.1 - 7.1.4, we can use Midori Commit Policy Plugin for JIRA [^CAP02] with a paid license.\n\nI provide a installation `sh` file for quick installation and configuration of MySQL, see appendix below.\n\n## Create a Project in JIRA\n\nSupposing that we have:\n\n* Deployed the JIRA Server, and can access `https://jira.domain.com`,\n* Configured the User and Group,\n* Login as the JIRA administrator.\n\nWe now create a project with the JIRA code `LS`, the ticket number of\neach issue will be prepended with `LS`, such as:\n{% highlight sh %}\nLS-101 Hello JIRA\n{% endhighlight %}\n## Import Legacy Issue from Bitbucket Cloud\n\nJIRA administrator can import the legacy issue from Bitbucket Cloud into JIRA:\n\n{% highlight html %}\nhttp://jira.domain.com/secure/admin/views/ExternalImport1.jspa\n{% endhighlight %}\n\n## Setup the DVCS Accounts in JIRA with Bitbucket Cloud\n\nWhen we push the code to Bitbucket Cloud, we want to disply the commit history\nin JIRA issue page, setting up the OAuth in Bitbucket Cloud and DVCS Accounts\nin JIRA will satisfy our request.\n\nPlease read the official guide [^ATL_dvcs].\n\nAccording to the Atlassian Support, the DVCS will refresh status\nfrom Bitbucket Cloud every 60 minutes [^DCON-379]. That means when we\npush commits to Bitbucket Cloud, the JIRA issue page may not reflect\nthe latest commits immediately.\n\n## Setup the JIRA Link in Bitbucket Cloud\n\nWe want to display the hyperlink in Bitbucket Cloud commit history page.\nAdding a JIRA link in repository setting will satisfy our request.\n\n* Go to repository setting, find the Integrations - Links:\n{% highlight html %}\nhttps://bitbucket.org/scozv/ls-core-restful/admin/links\n{% endhighlight %}\n\n* Click the JIRA icon,\n* Fill the JIRA website and the JIRA project code, such as `LS`\n* Save\n\nFor the new source commit, such as:\n{% highlight sh %}\ngit commit -avm 'LS-101 Hello JIRA'\ngit push\n{% endhighlight %}\n\nwe have the hyperlink in commit history page of Bitbucket Cloud, leading to:\n{% highlight html %}\nhttp://jira.domain.me/browse/LS-101\n{% endhighlight %}\n\n## Change the Legacy Issue Number of Git History, ie. Fully Migrating\n\n> __Attention:__\n>\n> __The `sha1` of all commits will be rewritten (changed) in the step below;__\n>\n> __Make backup and decision.__\n\nIn individual Bitbucket Cloud build-in Issue System, the\nissue number is started from `1`. For Bitbucket Cloud, we commit code\nusing message such as below:\n\n{% highlight sh %}\ngit commit -avm 'fix issue #101 Hello Bitbucket'\n{% endhighlight %}\n\nAfter importing the Bitbucket Issue into JIRA System, issue `101` becomes to\nissue `LS-101`\n\nWe want to change the Legacy git history to:\n{% highlight html %}\nfix issue LS-101 Hello Bitbucket\n{% endhighlight %}\n\nWe need the Message Filter of git command [^GIT]:\n\n> --msg-filter <command>\n>\n> This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.\n\nHere is the script:\n{% highlight sh %}\n# The `sha1` of all commits will be rewritten (changed) in the step below;\n# Make backup and decision.\ngit clone --no-hardlinks git@bitbucket.org:scozv/ls-core-restful.git\ngit filter-branch -f --msg-filter \\\n    'sed \"s/#\\([0-9][0-9]*\\)/LS-\\1/g\"'\ngit reset --hard\ngit gc --aggressive\ngit prune\n{% endhighlight %}\n\n\n# NOT a Fully Migrating\n\nI haven't found the solution for:\n\n* Resolved JIRA issue is not displayed as a <del>deleted HTML element</del> in Bitbucket Cloud,\n* Bitbucket Cloud doesn't reject the bad commit if the commit violates the Acceptance Policy.\n\nFor the 2nd issue, Atlassian Support replied me as:\n\n> Unfortunately, this is not possible to be done on Bitbucket Cloud for now.\n> We have a feature request on this though:\n  https://bitbucket.org/site/master/issues/5658\n\n# Appendix\n\n## JIRA Installation Script\n\n{% highlight sh %}\n# JAVA\nsudo add-apt-repository ppa:openjdk-r/ppa\nsudo apt-get update\nsudo apt-get install -y openjdk-8-jdk openjdk-8-jre openjdk-8-jre-headless\n\n# MySQL\nsudo apt-get install -y mysql-server mysql-client\n\n# JIRA\n# JIRA_BINARY=\"atlassian-jira-software-7.1.2-jira-7.1.2-x64.bin\"\nJIRA_BINARY=\"atlassian-jira-6.4.13-x64.bin\"\nwget -nc -P ~/Downloads/ \\\n  \"https://www.atlassian.com/software/jira/downloads/binary/$JIRA_BINARY\"\n\nchmod a+x ~/Downloads/$JIRA_BINARY\nsudo bash ~/Downloads/$JIRA_BINARY\n\nJIRA_HOME=\"/opt/atlassian/jira\"\n\nsudo vi $JIRA_HOME/bin/setenv.sh\n# JVM_SUPPORT_RECOMMENDED_ARGS=\"-Datlassian.plugins.enable.wait=300 -Xms64m -Xmx256m -Xss2m -XX:MaxPermSize=128m\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n# sudo bash /opt/atlassian/jira/uninstall\n\n# JIRA MySQL\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nMS_JIRA_DB=jiradb\nMS_JIRA_DBUSER=jiradbuser\nMS_JIRA_PWD=\"*ABCDEFJHIGKLMNOPQRSTUVWXYZ\"\nmysql -uroot -p\n> CREATE USER '$MS_JIRA_DBUSER'@'localhost' IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> CREATE DATABASE $MS_JIRA_DB CHARACTER SET utf8 COLLATE utf8_bin;\n> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX\n> | on $MS_JIRA_DB.* TO '$MS_JIRA_DBUSER'@'localhost'\n> | IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> flush privileges;\n> SHOW GRANTS FOR '$MS_JIRA_DBUSER'@'localhost';\n\nMYSQL_CONF=\"/etc/mysql/my.cnf\"\nsudo cp $MYSQL_CONF $MYSQL_CONF.before_JIRA\nsudo sed -i '/^default_storage_engine/c\\default_storage_engine=INNODB' $MYSQL_CONF\nsudo sed -i '/^max_allowed_packet/c\\max_allowed_packet=256M' $MYSQL_CONF\nsudo sed -i '/innodb_log_file_size/c\\innodb_log_file_size=256M' $MYSQL_CONF\nsudo sed -i '/^sql_mode.*=.*NO_AUTO_VALUE_ON_ZERO/c\\#sql_mode = NO_AUTO_VALUE_ON_ZERO' $MYSQL_CONF\nsudo bash /etc/init.d/mysql stop\nsudo bash /etc/init.d/mysql start\n\nJIRA_HOME=\"/opt/atlassian/jira\"\nMYSQL_J_BINARY=\"mysql-connector-java-5.1.38.tar.gz\"\nwget -nc -P ~/Downloads/ \"http://dev.mysql.com/get/Downloads/Connector-J/$MYSQL_J_BINARY\"\nsudo tar zxf ~/Downloads/$MYSQL_J_BINARY -C $JIRA_HOME/lib/\nsudo cp $JIRA_HOME/lib/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar  $JIRA_HOME/lib/\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/\nsudo bash $JIRA_HOME/bin/config.sh\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## JIRA 6 only\n# https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/installation\n# https://confluence.atlassian.com/display/UPM/Installing+Add-ons#Installingadd-ons-installingversion1InstallingPlugins1typeadd-onsinJIRAandBamboo\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nJIRA_CAP_BINARY=\"commitacceptance-1.6.0.jar\"\nJIRA_ADDON_SITE=\"https://marketplace-cdn.atlassian.com/files/artifact/5f9ba63d-ee6c-4633-9b7a-a26c644a2434\"\nwget -nc -P ~/Downloads/ $JIRA_ADDON_SITE/$JIRA_CAP_BINARY\nsudo cp ~/Downloads/$JIRA_CAP_BINARY $JIRA_HOME/atlassian-jira/WEB-INF/lib/\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## stop-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash /etc/init.d/mysql stop\n## start-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash /etc/init.d/mysql start\nsudo bash $JIRA_HOME/bin/start-jira.sh\n{% endhighlight %}\n\n# References\n\n[^CAP01]: [JIRA Commit Acceptance Plugin](https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/overview) by Atlassian, Version 1.6.0 • JIRA Server 5.0 - 6.4.13 • Released 2012-02-22\n[^CAP02]: [Commit Policy Plugin for JIRA](https://marketplace.atlassian.com/plugins/com.midori.jira.plugin.jira-commit-policy-plugin/server/overview) by Midori Global Consulting Kft.\n[^ATL_jira_install]: [Installing JIRA applications on Linux](https://confluence.atlassian.com/adminjiraserver071/installing-jira-applications-on-linux-802592173.html)\n[^ATL_maria_null]: [JIRA Supported Platforms](https://confluence.atlassian.com/adminjiraserver071/supported-platforms-802592168.html)\n[^ATL_maria_null_2]: [JIRA should support MariaDB](https://jira.atlassian.com/browse/JRA-32347)\n[^ATL_dvcs]: [Connect Bitbucket Cloud to JIRA Server applications](https://confluence.atlassian.com/bitbucket/connect-bitbucket-cloud-to-jira-server-applications-814208991.html)\n[^GIT]: [git-filter-branch - Rewrite branches](https://git-scm.com/docs/git-filter-branch)\n[^GIT2]: [Extract to Git submodule](http://will.willandorla.com/extract-to-git-submodule)\n[^DCON-379]: [Allow configurable refresh times for commit checks](https://jira.atlassian.com/browse/DCON-379)\n","source":"_posts/2016-04-05-fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server.md","raw":"---\nlayout: post\ntitle: \"Fully Migrating from Bitbucket Cloud Issue System to JIRA Server\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"markdown\",\"ci\",\"git\", \"jira\", \"project\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This post will give a full migration guide from Bitbucket Cloud Issue\n> to JIRA Server, including:\n>\n> * Import legacy Bitbucket Cloud Issue into JIRA Server,\n> * Build Dual-direction connection between Bitbucket Cloud and JIRA Server,\n> * Upgrade the issue ticket number in git commits history,\n> to archive the __FULL__ migration.\n>\n> This post will __NOT__ cover the topics below:\n>\n> * Why I choose JIRA instead of other issue system,\n> * Why I choose Bitbucket Cloud instead of other git server,\n> * Why I choose Ubuntu 14.04 Server instead of other OS.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Core Ideas of My Understanding of a Project\n\n__Loose Coupling__ and __CI__ are two core ideas of my understanding\nof a project.\n\n## Loose Coupling\n\n* A project MUST be separated into a series of INDEPENDENT modules,\n* Each module will be a code repository,\n* The communication among these INDEPENDENT modules is not depended\n  on source code, it is depended on the API docs.\n\n## Continuous Integration\n\n* Each module MUST contains the necessary tests with at least 80%\n  code covered,\n* An infrastructure module MUST satisfy 100% code coverage,\n* A RESTful Service module MUST contain the `FakeRequest` BDD test,\n* A web page module shoud consider the web page test, such as using [Selenium](www.seleniumhq.org),\n* 不写测试的代码就是耍流氓\n* Each module need to satisfy the Commit Acceptance Policy [^CAP01]:\n   * The source commit message must contain a valid issue number(s),\n   * All issues referenced in the commit message must be UNRESOLVED,\n   * All issues referenced in the commit message must be assigned to the committer.\n* Every commit to any module need to be build and tested on CI server,\n* Committer will be noticed when the commit leaded a failure build or test,\n* __Each code commit can be traced to the issue system__,\n* __Each issue can be traced to a series of commits__,\n* The environment of each iterative build should be independent,\n* Continuous build, deployment and more...\n\n# Limitation of Bitbucket Cloud Build-in Issue System\n\nIf we want to build a library system (the project code is `LS`),\nwe may separate the project into a series of repositories (modules) below:\n\n* `ls-core-restful`: A core RESTful service, including user management, book management,\nand borrowing management,\n* `ls-web-user`: A web page system for user to send the borrowing request,\n* `ls-web-admin`: A web page system for library staff to approve the borrowing request,\n* `ls-core-model`: An infrastructure data model in JavaScript (or TypeScript) shared by two web page systems.\n\n(This separation is only used for the example, it may not be a perfect module\n  architecture)\n\nWe create a project with code name `LS` in Bitbucket Cloud.\n\nWe create four repositories under `LS` in Bitbucket Cloud:\n\n{% highlight sh %}\nls-core-restful.git\nls-core-model.git\nls-web-user.git\nls-web-admin.git\n{% endhighlight %}\n\nIf we raise an issue saying:\n{% highlight sh %}\nLogin page should be designed and implemented\n{% endhighlight %}\n\nWhere we open the issue in the Bitbucket Cloud build-in Issue System?\nIn Bitbucket Cloud, the build-in issue system is not share in project,\nwe have to raise an individual issue in each repo:\n{% highlight sh %}\n# ls-core-model.git/issue/1\nImplement the User model\n# ls-core-restful.git/issue/1\nImplement the login with token authentication service\n# ls-web-user/issue/1\nImplement the user login page\n# ls-web-admin/issue/1\nImplement the admin authorization page\n{% endhighlight %}\n\nThe limitation of Bitbucket Cloud build-in Issue System is:\n\n* Not a central issue system,\n* Have to grant access right of `ls-core-restful` to other committers.\n  This has been violating the __Loose Coupling__ principle, cause we just need\n  to expose an API docs of `ls-core-restful`\n  to committers of other repositories,\n* The commit history of \"Login page implementation\" has to be\n  separated into different repositories,\n  violating the __Continuous Integration__ principle.\n\n# JIRA, a Central Issue System\n\nWe need a Central Issue System that can be synced with multiple source code\nrepositories. I choose JIRA 6.4.13 + JIRA Agile deploying on the environment\nbelow:\n\n{% highlight sh %}\nUbuntu 14.04.4 LTS\nmysql  Ver 14.14 Distrib 5.5.47,\n  for debian-linux-gnu (x86_64) using readline 6.3\nopenjdk version \"1.8.0_72-internal\"\nOpenJDK Runtime Environment (build 1.8.0_72-internal-b15)\nOpenJDK 64-Bit Server VM (build 25.72-b15, mixed mode)\nAtlassian JIRA Project Management Software\n  (v6.4.13#64028-sha1:b7939e9)\nJIRA Agile 6.7.12\nJIRA Commit Acceptance Plugin 1.6.0\n{% endhighlight %}\n\nCurrently, my deployment of JIRA 6 + Agile works smoothly with Bitbucket Cloud.\nWe can:\n\n* Raise only one issue that need code changes on multiple repositories,\n* Push code to Bitbucket Cloud,\n  then review the commit history in JIRA issue page,\n* Configure Bitbucket Cloud, so that the commit history page can link to\n  the JIRA issue.\n* [TODO] Reject push that committed to Bitbucket Cloud if this commit violates\n  the JIRA Acceptance Policy.\n\n\n# Full Migration Guide to JIRA Server\n\n## Installing JIRA Server on Ubuntu\n\nAtlassian provides an official installation guide [^ATL_jira_install].\nMeet the system requirement, and pay attention on:\n\n* Neither MariaDB nor PerconaDB are supported [^ATL_maria_null] [^ATL_maria_null_2],\n* Atlassian JIRA Commit Acceptance Plugin is only support for JIRA Server 5.0 - 6.4.13,\n* For JIRA Server 6.1 - 7.1.4, we can use Midori Commit Policy Plugin for JIRA [^CAP02] with a paid license.\n\nI provide a installation `sh` file for quick installation and configuration of MySQL, see appendix below.\n\n## Create a Project in JIRA\n\nSupposing that we have:\n\n* Deployed the JIRA Server, and can access `https://jira.domain.com`,\n* Configured the User and Group,\n* Login as the JIRA administrator.\n\nWe now create a project with the JIRA code `LS`, the ticket number of\neach issue will be prepended with `LS`, such as:\n{% highlight sh %}\nLS-101 Hello JIRA\n{% endhighlight %}\n## Import Legacy Issue from Bitbucket Cloud\n\nJIRA administrator can import the legacy issue from Bitbucket Cloud into JIRA:\n\n{% highlight html %}\nhttp://jira.domain.com/secure/admin/views/ExternalImport1.jspa\n{% endhighlight %}\n\n## Setup the DVCS Accounts in JIRA with Bitbucket Cloud\n\nWhen we push the code to Bitbucket Cloud, we want to disply the commit history\nin JIRA issue page, setting up the OAuth in Bitbucket Cloud and DVCS Accounts\nin JIRA will satisfy our request.\n\nPlease read the official guide [^ATL_dvcs].\n\nAccording to the Atlassian Support, the DVCS will refresh status\nfrom Bitbucket Cloud every 60 minutes [^DCON-379]. That means when we\npush commits to Bitbucket Cloud, the JIRA issue page may not reflect\nthe latest commits immediately.\n\n## Setup the JIRA Link in Bitbucket Cloud\n\nWe want to display the hyperlink in Bitbucket Cloud commit history page.\nAdding a JIRA link in repository setting will satisfy our request.\n\n* Go to repository setting, find the Integrations - Links:\n{% highlight html %}\nhttps://bitbucket.org/scozv/ls-core-restful/admin/links\n{% endhighlight %}\n\n* Click the JIRA icon,\n* Fill the JIRA website and the JIRA project code, such as `LS`\n* Save\n\nFor the new source commit, such as:\n{% highlight sh %}\ngit commit -avm 'LS-101 Hello JIRA'\ngit push\n{% endhighlight %}\n\nwe have the hyperlink in commit history page of Bitbucket Cloud, leading to:\n{% highlight html %}\nhttp://jira.domain.me/browse/LS-101\n{% endhighlight %}\n\n## Change the Legacy Issue Number of Git History, ie. Fully Migrating\n\n> __Attention:__\n>\n> __The `sha1` of all commits will be rewritten (changed) in the step below;__\n>\n> __Make backup and decision.__\n\nIn individual Bitbucket Cloud build-in Issue System, the\nissue number is started from `1`. For Bitbucket Cloud, we commit code\nusing message such as below:\n\n{% highlight sh %}\ngit commit -avm 'fix issue #101 Hello Bitbucket'\n{% endhighlight %}\n\nAfter importing the Bitbucket Issue into JIRA System, issue `101` becomes to\nissue `LS-101`\n\nWe want to change the Legacy git history to:\n{% highlight html %}\nfix issue LS-101 Hello Bitbucket\n{% endhighlight %}\n\nWe need the Message Filter of git command [^GIT]:\n\n> --msg-filter <command>\n>\n> This is the filter for rewriting the commit messages. The argument is evaluated in the shell with the original commit message on standard input; its standard output is used as the new commit message.\n\nHere is the script:\n{% highlight sh %}\n# The `sha1` of all commits will be rewritten (changed) in the step below;\n# Make backup and decision.\ngit clone --no-hardlinks git@bitbucket.org:scozv/ls-core-restful.git\ngit filter-branch -f --msg-filter \\\n    'sed \"s/#\\([0-9][0-9]*\\)/LS-\\1/g\"'\ngit reset --hard\ngit gc --aggressive\ngit prune\n{% endhighlight %}\n\n\n# NOT a Fully Migrating\n\nI haven't found the solution for:\n\n* Resolved JIRA issue is not displayed as a <del>deleted HTML element</del> in Bitbucket Cloud,\n* Bitbucket Cloud doesn't reject the bad commit if the commit violates the Acceptance Policy.\n\nFor the 2nd issue, Atlassian Support replied me as:\n\n> Unfortunately, this is not possible to be done on Bitbucket Cloud for now.\n> We have a feature request on this though:\n  https://bitbucket.org/site/master/issues/5658\n\n# Appendix\n\n## JIRA Installation Script\n\n{% highlight sh %}\n# JAVA\nsudo add-apt-repository ppa:openjdk-r/ppa\nsudo apt-get update\nsudo apt-get install -y openjdk-8-jdk openjdk-8-jre openjdk-8-jre-headless\n\n# MySQL\nsudo apt-get install -y mysql-server mysql-client\n\n# JIRA\n# JIRA_BINARY=\"atlassian-jira-software-7.1.2-jira-7.1.2-x64.bin\"\nJIRA_BINARY=\"atlassian-jira-6.4.13-x64.bin\"\nwget -nc -P ~/Downloads/ \\\n  \"https://www.atlassian.com/software/jira/downloads/binary/$JIRA_BINARY\"\n\nchmod a+x ~/Downloads/$JIRA_BINARY\nsudo bash ~/Downloads/$JIRA_BINARY\n\nJIRA_HOME=\"/opt/atlassian/jira\"\n\nsudo vi $JIRA_HOME/bin/setenv.sh\n# JVM_SUPPORT_RECOMMENDED_ARGS=\"-Datlassian.plugins.enable.wait=300 -Xms64m -Xmx256m -Xss2m -XX:MaxPermSize=128m\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n# sudo bash /opt/atlassian/jira/uninstall\n\n# JIRA MySQL\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nMS_JIRA_DB=jiradb\nMS_JIRA_DBUSER=jiradbuser\nMS_JIRA_PWD=\"*ABCDEFJHIGKLMNOPQRSTUVWXYZ\"\nmysql -uroot -p\n> CREATE USER '$MS_JIRA_DBUSER'@'localhost' IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> CREATE DATABASE $MS_JIRA_DB CHARACTER SET utf8 COLLATE utf8_bin;\n> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX\n> | on $MS_JIRA_DB.* TO '$MS_JIRA_DBUSER'@'localhost'\n> | IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> flush privileges;\n> SHOW GRANTS FOR '$MS_JIRA_DBUSER'@'localhost';\n\nMYSQL_CONF=\"/etc/mysql/my.cnf\"\nsudo cp $MYSQL_CONF $MYSQL_CONF.before_JIRA\nsudo sed -i '/^default_storage_engine/c\\default_storage_engine=INNODB' $MYSQL_CONF\nsudo sed -i '/^max_allowed_packet/c\\max_allowed_packet=256M' $MYSQL_CONF\nsudo sed -i '/innodb_log_file_size/c\\innodb_log_file_size=256M' $MYSQL_CONF\nsudo sed -i '/^sql_mode.*=.*NO_AUTO_VALUE_ON_ZERO/c\\#sql_mode = NO_AUTO_VALUE_ON_ZERO' $MYSQL_CONF\nsudo bash /etc/init.d/mysql stop\nsudo bash /etc/init.d/mysql start\n\nJIRA_HOME=\"/opt/atlassian/jira\"\nMYSQL_J_BINARY=\"mysql-connector-java-5.1.38.tar.gz\"\nwget -nc -P ~/Downloads/ \"http://dev.mysql.com/get/Downloads/Connector-J/$MYSQL_J_BINARY\"\nsudo tar zxf ~/Downloads/$MYSQL_J_BINARY -C $JIRA_HOME/lib/\nsudo cp $JIRA_HOME/lib/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar  $JIRA_HOME/lib/\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/\nsudo bash $JIRA_HOME/bin/config.sh\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## JIRA 6 only\n# https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/installation\n# https://confluence.atlassian.com/display/UPM/Installing+Add-ons#Installingadd-ons-installingversion1InstallingPlugins1typeadd-onsinJIRAandBamboo\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nJIRA_CAP_BINARY=\"commitacceptance-1.6.0.jar\"\nJIRA_ADDON_SITE=\"https://marketplace-cdn.atlassian.com/files/artifact/5f9ba63d-ee6c-4633-9b7a-a26c644a2434\"\nwget -nc -P ~/Downloads/ $JIRA_ADDON_SITE/$JIRA_CAP_BINARY\nsudo cp ~/Downloads/$JIRA_CAP_BINARY $JIRA_HOME/atlassian-jira/WEB-INF/lib/\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## stop-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash /etc/init.d/mysql stop\n## start-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash /etc/init.d/mysql start\nsudo bash $JIRA_HOME/bin/start-jira.sh\n{% endhighlight %}\n\n# References\n\n[^CAP01]: [JIRA Commit Acceptance Plugin](https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/overview) by Atlassian, Version 1.6.0 • JIRA Server 5.0 - 6.4.13 • Released 2012-02-22\n[^CAP02]: [Commit Policy Plugin for JIRA](https://marketplace.atlassian.com/plugins/com.midori.jira.plugin.jira-commit-policy-plugin/server/overview) by Midori Global Consulting Kft.\n[^ATL_jira_install]: [Installing JIRA applications on Linux](https://confluence.atlassian.com/adminjiraserver071/installing-jira-applications-on-linux-802592173.html)\n[^ATL_maria_null]: [JIRA Supported Platforms](https://confluence.atlassian.com/adminjiraserver071/supported-platforms-802592168.html)\n[^ATL_maria_null_2]: [JIRA should support MariaDB](https://jira.atlassian.com/browse/JRA-32347)\n[^ATL_dvcs]: [Connect Bitbucket Cloud to JIRA Server applications](https://confluence.atlassian.com/bitbucket/connect-bitbucket-cloud-to-jira-server-applications-814208991.html)\n[^GIT]: [git-filter-branch - Rewrite branches](https://git-scm.com/docs/git-filter-branch)\n[^GIT2]: [Extract to Git submodule](http://will.willandorla.com/extract-to-git-submodule)\n[^DCON-379]: [Allow configurable refresh times for commit checks](https://jira.atlassian.com/browse/DCON-379)\n","slug":"fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server","published":1,"date":"2016-04-04T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys2000gyxcbvt350ic9"},{"layout":"post","title":"A Version Controlled Project Workflow for Requirement, Coding and Continuous Integration","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article introduces a project workflow based on VCS\n> (Version Controll System). The principle of this workflow is\n> **Put everything into VCS**.\n>\n> For documents, Word or PDF files are not recommended in this workflow,\n> just because they are difficult to be compared (such as, by `git diff`).\n> So we write the documents in Markdown or LaTeX.\n>\n> Besides, this article will cover, but it is mainly written in Chinese:\n>\n> * Issue system for tracking task\n> * Bitbucket\n> * c9.io\n> * Markdown in 5 minutes\n\n<!--more-->\n\n# References\n[^pro_git2]: Chacon, S. and Straub, B. (2014). Pro Git, Second Edition.: NY. Apress.\n[^gb_undo]: [Git Basics - Undoing Things](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things)\n[^st_checkout]: [Temporarily switch to a different commit](http://stackoverflow.com/a/4114122)\n\n[1]: https://tortoisegit.org/ \"TortoiseGit\"\n[2]: https://git-for-windows.github.io/ \"Git for Windows\"\n","source":"_posts/2015-09-04-a-vcs-project-workflow-for-requirement-coding-and-ci.md","raw":"---\nlayout: post\ntitle: \"A Version Controlled Project Workflow for Requirement, Coding and Continuous Integration\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"latex\",\"markdown\",\"ci\",\"git\", \"jira\",\"project\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article introduces a project workflow based on VCS\n> (Version Controll System). The principle of this workflow is\n> **Put everything into VCS**.\n>\n> For documents, Word or PDF files are not recommended in this workflow,\n> just because they are difficult to be compared (such as, by `git diff`).\n> So we write the documents in Markdown or LaTeX.\n>\n> Besides, this article will cover, but it is mainly written in Chinese:\n>\n> * Issue system for tracking task\n> * Bitbucket\n> * c9.io\n> * Markdown in 5 minutes\n\n<!--more-->\n\n# References\n[^pro_git2]: Chacon, S. and Straub, B. (2014). Pro Git, Second Edition.: NY. Apress.\n[^gb_undo]: [Git Basics - Undoing Things](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things)\n[^st_checkout]: [Temporarily switch to a different commit](http://stackoverflow.com/a/4114122)\n\n[1]: https://tortoisegit.org/ \"TortoiseGit\"\n[2]: https://git-for-windows.github.io/ \"Git for Windows\"\n","slug":"a-vcs-project-workflow-for-requirement-coding-and-ci","published":1,"date":"2015-09-03T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys4000jyxcb68ar7lf2"},{"layout":"post","title":"A Loose Coupling Architecture of the Web Solution with Continuous Integration","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will discuss two core ideas for a Architecture of the Web Solution,\n> that are Loose Coupling and Continuous Integration.\n>\n> The article is mainly written in Chinese, while the\n> English post has not been started yet.\n> However, I provide a drawing for indicating the Loose Coupling Architecture.\n\n<!--more-->\n\n\nThe Loose Coupling Architecture can be explained as below:\n\n    ####################################  scenario 01, entire node\n\n    +------------+              +-----------------+\n    | you and me |              | IIS / tomcat    |\n    | Chromium   +------------> | ASP .NET MVC    |\n    |            |              | Database        |\n    | mobile     |              |                 |\n    | device     |              |                 |\n    +------------+              +-----------------+\n\n\n    ####################################  scenario 02, separating View from MV+C\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      | Database           |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +--------------------+\n\n\n    ####################################  scenario 03, separating Database from MV\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      |                    |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                                                           |\n                                                                           |  connection\n                                                                           |  string\n                                                                           |\n                                                                           |\n                                                                         +-+------------------+\n                                                                         | PaaS               |\n                                                                         | Database+aaS       |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         +--------------------+\n\n\n\n\n    ####################################  scenario 04, multiple Databases\n\n\n                                                                          +--------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | Core Business      |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n     +-------------+             +-----------------+                      +-+------------------+\n     | you and me  |             | View            |    HTTP Request      | RESTful API        |\n     | Chromium    +-----------> | React.js        +--------------------> | http://spray.io/   |\n     |             |             | static HTML page|                      |                    |\n     | mobile      |             | mobile App      |                      |                    |\n     | device      |             |                 |                      |                    |\n     |             |             |                 | <--------------------+                    |\n     +-------------+             +-----------------+    HTTP Response     +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n                                                                          +-+------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | user-agent data    |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +--------------------+\n\n\n\n\n     ####################################  scenario 05, separating and combination\n\n     +------------+              +-----------------+                      +--------------------+\n     | you and me |              | View            |    HTTP Request      | RESTful API        |\n     | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n     |            |              | static HTML page|                      |                    |\n     | mobile     |              | mobile App      |                      |                    |\n     | device     |              |                 |                      |                    |\n     |            |              |                 | <--------------------+                    |\n     +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                 | Database        |                        |\n                                 |                 |                        | connection\n                                 | user-agent data |                        | string\n                                 |                 |                        |\n                                 |                 |                        |\n                                 |                 |                        |\n                                 +-----------------+                      +-+-------------------+\n                                                                          | PaaS                |\n                                                                          | Database+aaS        |\n                                                                          |                     |\n                                                                          | Core Business       |\n                                                                          |                     |\n                                                                          |                     |\n                                                                          +---------------------+\n","source":"_posts/2016-05-05-a-low-coupling-architecture-of-the-web-solution-with-continuous-integration.md","raw":"---\nlayout: post\ntitle: \"A Loose Coupling Architecture of the Web Solution with Continuous Integration\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"ci\", \"project\",\"architecture\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will discuss two core ideas for a Architecture of the Web Solution,\n> that are Loose Coupling and Continuous Integration.\n>\n> The article is mainly written in Chinese, while the\n> English post has not been started yet.\n> However, I provide a drawing for indicating the Loose Coupling Architecture.\n\n<!--more-->\n\n\nThe Loose Coupling Architecture can be explained as below:\n\n    ####################################  scenario 01, entire node\n\n    +------------+              +-----------------+\n    | you and me |              | IIS / tomcat    |\n    | Chromium   +------------> | ASP .NET MVC    |\n    |            |              | Database        |\n    | mobile     |              |                 |\n    | device     |              |                 |\n    +------------+              +-----------------+\n\n\n    ####################################  scenario 02, separating View from MV+C\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      | Database           |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +--------------------+\n\n\n    ####################################  scenario 03, separating Database from MV\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      |                    |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                                                           |\n                                                                           |  connection\n                                                                           |  string\n                                                                           |\n                                                                           |\n                                                                         +-+------------------+\n                                                                         | PaaS               |\n                                                                         | Database+aaS       |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         +--------------------+\n\n\n\n\n    ####################################  scenario 04, multiple Databases\n\n\n                                                                          +--------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | Core Business      |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n     +-------------+             +-----------------+                      +-+------------------+\n     | you and me  |             | View            |    HTTP Request      | RESTful API        |\n     | Chromium    +-----------> | React.js        +--------------------> | http://spray.io/   |\n     |             |             | static HTML page|                      |                    |\n     | mobile      |             | mobile App      |                      |                    |\n     | device      |             |                 |                      |                    |\n     |             |             |                 | <--------------------+                    |\n     +-------------+             +-----------------+    HTTP Response     +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n                                                                          +-+------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | user-agent data    |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +--------------------+\n\n\n\n\n     ####################################  scenario 05, separating and combination\n\n     +------------+              +-----------------+                      +--------------------+\n     | you and me |              | View            |    HTTP Request      | RESTful API        |\n     | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n     |            |              | static HTML page|                      |                    |\n     | mobile     |              | mobile App      |                      |                    |\n     | device     |              |                 |                      |                    |\n     |            |              |                 | <--------------------+                    |\n     +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                 | Database        |                        |\n                                 |                 |                        | connection\n                                 | user-agent data |                        | string\n                                 |                 |                        |\n                                 |                 |                        |\n                                 |                 |                        |\n                                 +-----------------+                      +-+-------------------+\n                                                                          | PaaS                |\n                                                                          | Database+aaS        |\n                                                                          |                     |\n                                                                          | Core Business       |\n                                                                          |                     |\n                                                                          |                     |\n                                                                          +---------------------+\n","slug":"a-low-coupling-architecture-of-the-web-solution-with-continuous-integration","published":1,"date":"2016-05-04T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys5000lyxcbi7r8mhe6"},{"layout":"post","title":"A Linear Branch Management With Git","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n>\n> This article publishes a Git branch management workflow, that is brief and linear,\n> inspired by `GitFlow` [^gitflow] and `Anti-GitFlow` [^gitflow_anti_01] [^gitflow_anti_02].\n>\n> The `gitl`, that has not been implemented yet, is not just interface-simplified,\n> but also manages the underlying branches in plain.\n>\n> This article is mainly written in Chinese, but I still give you the\n> branches drawing to illustrate this `gitl` workflow.\n>\n> However, the Chinese article is still not finished yet, a few points need to be\n> figured out.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Principles\n\n* Branches is plain, or linear,\n* An interface need to be provided,\n* Interface is simple, easy to invoke,\n* Release branch will not include the release configuration,\n* A build-in version naming rule is embedded in this workflow.\n\n# Branches within Linear Git\n\nNotice the branch named `/release/3.2.0` is a `sprint release` (see **Term**).\nThis kind of release may be removed in practice.\n\n{% highlight raw %}\n\n                             ^\n                             |\n                             |\n                             |                    \n                             |\n                             |                                                ^\n      ^   OR abort feature   |                                                |\n      | XXXXXXXXXXXXXXXXXXX> |                                                |\n      |                      |                                                |\n      |                      |  /release/3.0.0                                |\n      |                      +------------------->                            |\n      |                      |                                                |\n      |                      |                                                |\n      |  /feature/JIRA-404   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |             /release/2.0.1                     |\n                             |                   ^                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   | bugfix                     |\n                             |                   | on /2.0.0                  |\n      ^   accept feature     |                   | release                    |\n      | +------------------> |                   |                            |\n      |                      |  /release/2.0.0   |                            |\n      |                      +-------------------+                            |\n      |                      |                                                |\n      |  /feature/JIRA-200   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |  /release/1.0.0                                |\n                             +-------------------+                            +\n\n                          /master                                 /release/3.2.0\n                                                            [will explain later]\n{% endhighlight %}\n\n\n# `gitl`, An Interface for Linear GitFlow Workflow\n\nThis interface has not implemented yet, and the specification of this interface\nis inspired by `GitFlow`.\n\n## `gitl develop`, Developing in `master`\n\n{% highlight bash %}\ngitl develop { nil | start }\n{% endhighlight %}\n\n## `gitl feature` , Handling the `feature`\n\n定义了开始、放弃和接受feature。\n\n{% highlight bash %}\ngitl feature start [feature_name] { master | [branch_based_on] }\ngitl feature abort [feature_name]\ngitl feature finish [feature_name]\n{% endhighlight %}\n\n## `gitl bugfix` , Fixing Bug in `bugfix`\n\n{% highlight bash %}\ngitl bugfix start [bugfix_name] { master | [branch_based_on] }\ngitl bugfix abort [bugfix_name]\ngitl bugfix finish [bugfix_name]\n{% endhighlight %}\n\n## `gitl release` , For Our Three Kind of `release`\n\n该接口需要控制权限。\n\n如果`[release_number]`为空，则基于默认的版本命名规则。\n\n不建议传递版本编号，建议使用默认的版本命名规则。\n\n{% highlight bash %}\ngitl release { -P | -S | -B } start { [release_number] }\ngitl release { -P | -S | -B } abort { [release_number] }\ngitl release { -P | -S | -B } finish { [release_number] }\n{% endhighlight %}\n\n# Scenario that need different branches\n\n## Branch Management for 3 Kind of Releases\n\nWe name our version as `n.m.k`, where:\n\n* `n`, indicates the public release,\n* `m`, for sprint release, and\n* `k`, for bugfix release, that is only applied for previous public release.\n\n### Public Release\n\nAfter one or two mouth, we release to public.\n\n\n{% highlight raw %}\n  step 1                                  step 2\n\n    ^                                       ^\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       | rebase back\n    |             ^                         | to master   ^\n    |             |                         | <-----------# tag n.0.0\n    |             # release                 |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             # bump version            |             # bump version\n    |             |                         |             |\n    |             |                         |             |\n    +-------------+                         +-------------+\n    |                                       |\n    |      /release/n.0.0                   |      /release/n.0.0\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    +                                       +\n\n /master                                 /master\n\n{% endhighlight %}\n\n### Sprint Release\n\nAt each end of sprint, we release the sprint for internal demo.\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n. m+1 .0\n  |                            |             |              |             |\n  | rebase to                  |             # bump         |             # bump version\n  | sprint release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.m+1.0        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.m.0            | /n.m.0                     |     /release/n. m+1 .0\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n### Bugfix Release\n\nWill fix some bug in specific public release.\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n.0.k+1\n  | bugfix release             |             |              |             |\n  | is ONLY for                |             # bump         |             # bump version\n  | public release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.0.k+1        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 2                |             # bugfix 2\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 1                |             # bugfix 1\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.0.k            | /n.0.k                     |     /release/n.0.k+1\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n## Scenario\n\n### Regular Developing in `master`\n\n{% highlight bash %}\ngit checkout master\n# coding\ngit commit -avm 'JIRA-404 regular development'\ngit push\n{% endhighlight %}\n\n### Opening a `feature` for experiment\n\n{% highlight bash %}\ngit checkout master\ngit branch feature/JIRA-404\ngit checkout feature/JIRA-404\n# coding\ngit commit -avm 'JIRA-404 feature development'\ngit push\n# git push --set-upstream origin feature/JIRA-404\n{% endhighlight %}\n\n如果放弃feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\n# `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n{% endhighlight %}\n\n如果接受feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\ngit checkout master\ngit merge -m 'JIRA-404 accept feature' feature/JIRA-404\ngit tag -a feature/JIRA-404 -m 'JIRA-404 brief description of this feature'\ngit branch -d feature/JIRA-404\ngit push origin :feature/JIRA-404\n{% endhighlight %}\n\n### Doing `bugfix` in `master`\n\n{% highlight bash %}\n# 默认基于`master`\n# 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n# 完成修复之后\n# 合并bugfix分支到`fork-repo`的master上面， 删除本地的bugfix分支\n{% endhighlight %}\n\n### public release\n\n{% highlight bash %}\ngit checkout master\ngit branch release/n.m.0\ngit checkout release/n.m.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m.0'\ngit tag -a n.m.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m.0\n{% endhighlight %}\n\n###  sprint release\n\n{% highlight bash %}\ngit checkout release/n.m.0\ngit rebase master\ngit branch release/n.m+1.0\ngit checkout release/n.m+1.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m+1.0'\ngit tag -a n.m+1.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m+1.0\ngit branch -d release/n.m.0\ngit push origin :release/n.m.0\n{% endhighlight %}\n\n### bugfix release\n\n{% highlight bash %}\ngit checkout release/n.m.k\ngit branch bugfix/JIRA-404\ngit checkout bugfix/JIRA-404\n# fix and test\ngit checkout release/n.m.k\ngit merge bugfix/JIRA-404\ngit branch -d bugfix/JIRA-404\ngit push origin :bugfix/JIRA-404\n{% endhighlight %}\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n{% highlight bash %}\ngit checkout release/n.0.k\ngit branch release/n.0.k+1\ngit checkout release/n.0.k+1\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.0.k+1'\ngit tag -a n.0.k+1 -m 'JIRA-404 release of n.0.k+1'\ngit checkout master\ngit rebase release/n.0.k+1\ngit branch -d release/n.0.k\ngit push origin :release/n.0.k\n{% endhighlight %}\n\n### Apply `bugfix` to `master`\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n\n# Linear Git Workflow with CI\n\n<!-- ## 提交并测试 -->\n\n<!-- ## 提交并发布 -->\n\n# More\n\nThese problems need to be fix：\n\n* Is `gitl` complicated under Microservices ?\n* Is `gitl` conflicted with git fork, see Atlassian's _Comparing Workflows_ [^atl_comp_workf] ？\n\n# References\n\n[^gitflow]: [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) by Vincent Driessen, Jan 05, 2010\n[^gitflow_anti_01]: [GitFlow considered harmful](http://endoflineblog.com/gitflow-considered-harmful) by Adam Ruka, May 03, 2015\n[^gitflow_anti_02]: [Follow-up to 'GitFlow considered harmful'](http://endoflineblog.com/follow-up-to-gitflow-considered-harmful) by Adam Ruka, Jun 20, 2015\n[^atl_comp_workf]: [Comparing Workflows](https://www.atlassian.com/git/tutorials/comparing-workflows/) by Atlassian\n","source":"_posts/2016-05-18-a-linear-branch-management-with-git.md","raw":"---\nlayout: post\ntitle: \"A Linear Branch Management With Git\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"git\",\"branch\",\"rebase\",\"merge\",\"version\"]\nlang: \"en\"\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n>\n> This article publishes a Git branch management workflow, that is brief and linear,\n> inspired by `GitFlow` [^gitflow] and `Anti-GitFlow` [^gitflow_anti_01] [^gitflow_anti_02].\n>\n> The `gitl`, that has not been implemented yet, is not just interface-simplified,\n> but also manages the underlying branches in plain.\n>\n> This article is mainly written in Chinese, but I still give you the\n> branches drawing to illustrate this `gitl` workflow.\n>\n> However, the Chinese article is still not finished yet, a few points need to be\n> figured out.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Principles\n\n* Branches is plain, or linear,\n* An interface need to be provided,\n* Interface is simple, easy to invoke,\n* Release branch will not include the release configuration,\n* A build-in version naming rule is embedded in this workflow.\n\n# Branches within Linear Git\n\nNotice the branch named `/release/3.2.0` is a `sprint release` (see **Term**).\nThis kind of release may be removed in practice.\n\n{% highlight raw %}\n\n                             ^\n                             |\n                             |\n                             |                    \n                             |\n                             |                                                ^\n      ^   OR abort feature   |                                                |\n      | XXXXXXXXXXXXXXXXXXX> |                                                |\n      |                      |                                                |\n      |                      |  /release/3.0.0                                |\n      |                      +------------------->                            |\n      |                      |                                                |\n      |                      |                                                |\n      |  /feature/JIRA-404   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |             /release/2.0.1                     |\n                             |                   ^                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   | bugfix                     |\n                             |                   | on /2.0.0                  |\n      ^   accept feature     |                   | release                    |\n      | +------------------> |                   |                            |\n      |                      |  /release/2.0.0   |                            |\n      |                      +-------------------+                            |\n      |                      |                                                |\n      |  /feature/JIRA-200   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |  /release/1.0.0                                |\n                             +-------------------+                            +\n\n                          /master                                 /release/3.2.0\n                                                            [will explain later]\n{% endhighlight %}\n\n\n# `gitl`, An Interface for Linear GitFlow Workflow\n\nThis interface has not implemented yet, and the specification of this interface\nis inspired by `GitFlow`.\n\n## `gitl develop`, Developing in `master`\n\n{% highlight bash %}\ngitl develop { nil | start }\n{% endhighlight %}\n\n## `gitl feature` , Handling the `feature`\n\n定义了开始、放弃和接受feature。\n\n{% highlight bash %}\ngitl feature start [feature_name] { master | [branch_based_on] }\ngitl feature abort [feature_name]\ngitl feature finish [feature_name]\n{% endhighlight %}\n\n## `gitl bugfix` , Fixing Bug in `bugfix`\n\n{% highlight bash %}\ngitl bugfix start [bugfix_name] { master | [branch_based_on] }\ngitl bugfix abort [bugfix_name]\ngitl bugfix finish [bugfix_name]\n{% endhighlight %}\n\n## `gitl release` , For Our Three Kind of `release`\n\n该接口需要控制权限。\n\n如果`[release_number]`为空，则基于默认的版本命名规则。\n\n不建议传递版本编号，建议使用默认的版本命名规则。\n\n{% highlight bash %}\ngitl release { -P | -S | -B } start { [release_number] }\ngitl release { -P | -S | -B } abort { [release_number] }\ngitl release { -P | -S | -B } finish { [release_number] }\n{% endhighlight %}\n\n# Scenario that need different branches\n\n## Branch Management for 3 Kind of Releases\n\nWe name our version as `n.m.k`, where:\n\n* `n`, indicates the public release,\n* `m`, for sprint release, and\n* `k`, for bugfix release, that is only applied for previous public release.\n\n### Public Release\n\nAfter one or two mouth, we release to public.\n\n\n{% highlight raw %}\n  step 1                                  step 2\n\n    ^                                       ^\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       | rebase back\n    |             ^                         | to master   ^\n    |             |                         | <-----------# tag n.0.0\n    |             # release                 |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             # bump version            |             # bump version\n    |             |                         |             |\n    |             |                         |             |\n    +-------------+                         +-------------+\n    |                                       |\n    |      /release/n.0.0                   |      /release/n.0.0\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    +                                       +\n\n /master                                 /master\n\n{% endhighlight %}\n\n### Sprint Release\n\nAt each end of sprint, we release the sprint for internal demo.\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n. m+1 .0\n  |                            |             |              |             |\n  | rebase to                  |             # bump         |             # bump version\n  | sprint release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.m+1.0        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.m.0            | /n.m.0                     |     /release/n. m+1 .0\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n### Bugfix Release\n\nWill fix some bug in specific public release.\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n.0.k+1\n  | bugfix release             |             |              |             |\n  | is ONLY for                |             # bump         |             # bump version\n  | public release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.0.k+1        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 2                |             # bugfix 2\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 1                |             # bugfix 1\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.0.k            | /n.0.k                     |     /release/n.0.k+1\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n## Scenario\n\n### Regular Developing in `master`\n\n{% highlight bash %}\ngit checkout master\n# coding\ngit commit -avm 'JIRA-404 regular development'\ngit push\n{% endhighlight %}\n\n### Opening a `feature` for experiment\n\n{% highlight bash %}\ngit checkout master\ngit branch feature/JIRA-404\ngit checkout feature/JIRA-404\n# coding\ngit commit -avm 'JIRA-404 feature development'\ngit push\n# git push --set-upstream origin feature/JIRA-404\n{% endhighlight %}\n\n如果放弃feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\n# `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n{% endhighlight %}\n\n如果接受feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\ngit checkout master\ngit merge -m 'JIRA-404 accept feature' feature/JIRA-404\ngit tag -a feature/JIRA-404 -m 'JIRA-404 brief description of this feature'\ngit branch -d feature/JIRA-404\ngit push origin :feature/JIRA-404\n{% endhighlight %}\n\n### Doing `bugfix` in `master`\n\n{% highlight bash %}\n# 默认基于`master`\n# 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n# 完成修复之后\n# 合并bugfix分支到`fork-repo`的master上面， 删除本地的bugfix分支\n{% endhighlight %}\n\n### public release\n\n{% highlight bash %}\ngit checkout master\ngit branch release/n.m.0\ngit checkout release/n.m.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m.0'\ngit tag -a n.m.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m.0\n{% endhighlight %}\n\n###  sprint release\n\n{% highlight bash %}\ngit checkout release/n.m.0\ngit rebase master\ngit branch release/n.m+1.0\ngit checkout release/n.m+1.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m+1.0'\ngit tag -a n.m+1.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m+1.0\ngit branch -d release/n.m.0\ngit push origin :release/n.m.0\n{% endhighlight %}\n\n### bugfix release\n\n{% highlight bash %}\ngit checkout release/n.m.k\ngit branch bugfix/JIRA-404\ngit checkout bugfix/JIRA-404\n# fix and test\ngit checkout release/n.m.k\ngit merge bugfix/JIRA-404\ngit branch -d bugfix/JIRA-404\ngit push origin :bugfix/JIRA-404\n{% endhighlight %}\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n{% highlight bash %}\ngit checkout release/n.0.k\ngit branch release/n.0.k+1\ngit checkout release/n.0.k+1\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.0.k+1'\ngit tag -a n.0.k+1 -m 'JIRA-404 release of n.0.k+1'\ngit checkout master\ngit rebase release/n.0.k+1\ngit branch -d release/n.0.k\ngit push origin :release/n.0.k\n{% endhighlight %}\n\n### Apply `bugfix` to `master`\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n\n# Linear Git Workflow with CI\n\n<!-- ## 提交并测试 -->\n\n<!-- ## 提交并发布 -->\n\n# More\n\nThese problems need to be fix：\n\n* Is `gitl` complicated under Microservices ?\n* Is `gitl` conflicted with git fork, see Atlassian's _Comparing Workflows_ [^atl_comp_workf] ？\n\n# References\n\n[^gitflow]: [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) by Vincent Driessen, Jan 05, 2010\n[^gitflow_anti_01]: [GitFlow considered harmful](http://endoflineblog.com/gitflow-considered-harmful) by Adam Ruka, May 03, 2015\n[^gitflow_anti_02]: [Follow-up to 'GitFlow considered harmful'](http://endoflineblog.com/follow-up-to-gitflow-considered-harmful) by Adam Ruka, Jun 20, 2015\n[^atl_comp_workf]: [Comparing Workflows](https://www.atlassian.com/git/tutorials/comparing-workflows/) by Atlassian\n","slug":"a-linear-branch-management-with-git","published":1,"date":"2016-05-17T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys7000oyxcbqiznc5ko"},{"layout":"post","title":"Design a Cashier Microservice with Ping++ SDK","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Ping++ [^pingpp] provides a facade implementation for multiple payments.\n> Usually, each application we create needs a corresponding Ping++ application.\n>\n> In this article, I try to design a cashier microservice where only one\n> Ping++ application is needed.\n>\n> This article is mainly written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# Term\n\n## Application\n\nApplication is an abstract word, it can be a tiny calculation executable, or\na huge system, such as personal finance management system.\n\nApplication has different representation, like a `.exe` file, a Website or an\nApp installed in smart devices.\n\nIn this article, the term **Application**:\n\n* is a system with a complete workflow,\n* has a `View` as the user interface,\n* has a `Server` layer,\n＊is independent from each other Application.\n\n## View layer\n\nI suggest to separate the `View` layer from the business server.\n\nHere, the `View`:\n\n* accepts the user's interaction,\n* sometimes, it is also called Client side.\n\n## RESTful Server layer\n\nI suggest that all business servers are represented as `RESTful API`,\nin this article, the terms below are all equivalent:\n\n* Server side,\n* RESTful Server\n* Backend server.\n\n\n## Ping++ Application\n\nIn Ping++ console page, developer can create one or more **Ping++ Application**.\nEach Ping++ application has a unique `app_id`.\n\n\n## Cashier\n\nIn this article, I try to design a cashier microservice where only one\nPing++ application is needed, but multiple applications can use this\ncashier microservice.\n\n# Design\n\n## General Payment Process with Ping++ [^pingpp_charge]\n\n{% highlight raw %}\n\n+------------------------------------------+----------------+\n|                                          |                |\n|    STEP 1                                |   Client Side  |\n|    put product into cart                 |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  + ^                  + ^\n  | |                  | |\n  | | STEP 2 & 3       | | STEP 4                STEP 5\n  | |                  | |                       (Ping++ Server SDK)\n  | | apply an order   | | apply for Charge\n  | |                  | |\n  | | RESPONSE the     | | payload with          apply for Charge\n  | | Order {_id, ...} | | previous Order data   from Ping++ Server\n  | |                  | |                           +\n  v +                  v +                           |\n+-------------------------------------+              |     +--------+\n|                                     | STEP 5       |     |        |\n|                  STEP 6             | +------------+---> |        |\n|                                     | <----------------+ |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n{% endhighlight %}\n\n## Decompressing One `RESTful Server` into Multiple Services\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n +                                   +  ^\n |                                   |  | STEP 2 & 3\n | STEP 1                            |  |\n | put product into cart             |  | apply an order\n |                                   |  |\n |                                   |  | RESPONSE the\n v                                   v  + Order {_id, ...}\n+------------------------------------------+----------------+\n|                                          |                |\n|                                          |   Client Side  |\n|                                          |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n{% endhighlight %}\n\n## Cashier Microservice Design\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n   +                                   +  ^\n   |                                   |  | STEP 2 & 3\n   | STEP 1                            |  |\n   | put product into cart             |  | apply an order\n   |                                   |  |\n   |                                   |  | RESPONSE the\n   v                                   v  + Order {_id, ...}\n +------------------------------------------+----------------+\n |                                          |                |\n |                                          |   Client Side  |\n |                                          |                |\n |                                          +----------------+\n |    STEP 4                             STEP 7              | STEP 8\n |                                       (Ping++ Client SDK) |         +--------+\n |    use Order data                                         | finish  |        |\n |    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n |                                       request a payment   | +-----> |        |\n +-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n+  ^                            +  ^\n|  |  apply for Charge          |  |  apply for Charge\n|  |                            |  |\n|  |  payload with              |  |  payload with\n|  |  GenericOrder data         |  |  GenericOrder data\n|  |                            |  |\nv  +                            v  +\n+---------+     +---------+     +---------+\n|         |     |         |     |         |\n| App 1   |     | App 2   |     | App 3   |\n|         |     |         |     |         |\n+---------+     +---------+     +---------+\n\n{% endhighlight %}\n\n\n## RESTful API of Cashier Microservice\n\n{% highlight scala %}\n\n// STEP 4 apply for Charge data\nPOST /cashier/charge\n\npayload: {\n  order: Order { _id, ...}\n}\n\n// STEP 6\nRESPONSE: {\n  data: Ping++ Charge data\n}\n\n// STEP 9\nPOST /cashier/webhook\n\n{% endhighlight %}\n\n\n# References\n\n[^pingpp]: https://www.pingxx.com\n[^pingpp_charge]: https://www.pingxx.com/docs/overview/flow/charge\n","source":"_posts/2016-07-11-designing-cashier-microservice-with-ping-sdk.md","raw":"---\nlayout: post\ntitle: \"Design a Cashier Microservice with Ping++ SDK\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"ping++\",\"microservice\",\"scala\",\"restful\",\"payment\"]\nlang: \"en\"\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Ping++ [^pingpp] provides a facade implementation for multiple payments.\n> Usually, each application we create needs a corresponding Ping++ application.\n>\n> In this article, I try to design a cashier microservice where only one\n> Ping++ application is needed.\n>\n> This article is mainly written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# Term\n\n## Application\n\nApplication is an abstract word, it can be a tiny calculation executable, or\na huge system, such as personal finance management system.\n\nApplication has different representation, like a `.exe` file, a Website or an\nApp installed in smart devices.\n\nIn this article, the term **Application**:\n\n* is a system with a complete workflow,\n* has a `View` as the user interface,\n* has a `Server` layer,\n＊is independent from each other Application.\n\n## View layer\n\nI suggest to separate the `View` layer from the business server.\n\nHere, the `View`:\n\n* accepts the user's interaction,\n* sometimes, it is also called Client side.\n\n## RESTful Server layer\n\nI suggest that all business servers are represented as `RESTful API`,\nin this article, the terms below are all equivalent:\n\n* Server side,\n* RESTful Server\n* Backend server.\n\n\n## Ping++ Application\n\nIn Ping++ console page, developer can create one or more **Ping++ Application**.\nEach Ping++ application has a unique `app_id`.\n\n\n## Cashier\n\nIn this article, I try to design a cashier microservice where only one\nPing++ application is needed, but multiple applications can use this\ncashier microservice.\n\n# Design\n\n## General Payment Process with Ping++ [^pingpp_charge]\n\n{% highlight raw %}\n\n+------------------------------------------+----------------+\n|                                          |                |\n|    STEP 1                                |   Client Side  |\n|    put product into cart                 |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  + ^                  + ^\n  | |                  | |\n  | | STEP 2 & 3       | | STEP 4                STEP 5\n  | |                  | |                       (Ping++ Server SDK)\n  | | apply an order   | | apply for Charge\n  | |                  | |\n  | | RESPONSE the     | | payload with          apply for Charge\n  | | Order {_id, ...} | | previous Order data   from Ping++ Server\n  | |                  | |                           +\n  v +                  v +                           |\n+-------------------------------------+              |     +--------+\n|                                     | STEP 5       |     |        |\n|                  STEP 6             | +------------+---> |        |\n|                                     | <----------------+ |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n{% endhighlight %}\n\n## Decompressing One `RESTful Server` into Multiple Services\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n +                                   +  ^\n |                                   |  | STEP 2 & 3\n | STEP 1                            |  |\n | put product into cart             |  | apply an order\n |                                   |  |\n |                                   |  | RESPONSE the\n v                                   v  + Order {_id, ...}\n+------------------------------------------+----------------+\n|                                          |                |\n|                                          |   Client Side  |\n|                                          |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n{% endhighlight %}\n\n## Cashier Microservice Design\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n   +                                   +  ^\n   |                                   |  | STEP 2 & 3\n   | STEP 1                            |  |\n   | put product into cart             |  | apply an order\n   |                                   |  |\n   |                                   |  | RESPONSE the\n   v                                   v  + Order {_id, ...}\n +------------------------------------------+----------------+\n |                                          |                |\n |                                          |   Client Side  |\n |                                          |                |\n |                                          +----------------+\n |    STEP 4                             STEP 7              | STEP 8\n |                                       (Ping++ Client SDK) |         +--------+\n |    use Order data                                         | finish  |        |\n |    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n |                                       request a payment   | +-----> |        |\n +-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n+  ^                            +  ^\n|  |  apply for Charge          |  |  apply for Charge\n|  |                            |  |\n|  |  payload with              |  |  payload with\n|  |  GenericOrder data         |  |  GenericOrder data\n|  |                            |  |\nv  +                            v  +\n+---------+     +---------+     +---------+\n|         |     |         |     |         |\n| App 1   |     | App 2   |     | App 3   |\n|         |     |         |     |         |\n+---------+     +---------+     +---------+\n\n{% endhighlight %}\n\n\n## RESTful API of Cashier Microservice\n\n{% highlight scala %}\n\n// STEP 4 apply for Charge data\nPOST /cashier/charge\n\npayload: {\n  order: Order { _id, ...}\n}\n\n// STEP 6\nRESPONSE: {\n  data: Ping++ Charge data\n}\n\n// STEP 9\nPOST /cashier/webhook\n\n{% endhighlight %}\n\n\n# References\n\n[^pingpp]: https://www.pingxx.com\n[^pingpp_charge]: https://www.pingxx.com/docs/overview/flow/charge\n","slug":"designing-cashier-microservice-with-ping-sdk","published":1,"date":"2016-07-10T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrys9000qyxcbz050v59u"},{"layout":"post","title":"DO NOT Prepare the Development Environment by Click and Click","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will give you an `installation.sh` script, that\n> can be used to prepare the development environment. Instead of click and click,\n> we just simply run this command in bash：\n>\n>       wget -qO- path/to/installation.sh | bash\n>\n>\n> This article will describe the process of `installation.sh`, besides, I want to express:\n>\n>\n> * Use code, not mouse,\n> * Use git, when we use code,\n> * Bring the wonderful Development Experience to developers.\n>\n> The `installation.sh` will only apply for `Ubuntu 14.04+`.\n>\n> And, the article will mention `dotfiles` [^dotfiles], but will not cover the details of it。\n>\n> This article is mainly written in Chinese, you may read the source code [^scozv_dotfiles] for help.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `installation.sh`\n\nRead the source of `installation.sh`（[Link](https://github.com/scozv/dotfiles/blob/master/os/ubuntu-server.sh)）。\nOr have a try on the VM：\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n{% endhighlight %}\n\nAttentions\n\n* Run this script on `Ubuntu 14.04+`,\n* Run this script on VM, NOT on your own development environment,\n* Read the source before running any unknown `sh` file.\n\n# Bash Scripts, the Basis of CI\n\nUsually, the CI configuration includes:\n\n* Environment preparing\n* Tests that will run\n* Any release\n* Clean\n\nThe 1st step is what the `installation.sh` will do.\n\nI almost write script (code) as many places any I could:\n\n* This blog site [^scozv_blog]\n* dotfiles [^scozv_dotfiles]\n* Notes（LaTeX）\n* Deployment script\n* API documents [^algo-wiki]\n* Internal documents\n\n# References\n\n[^dotfiles]: [Your unofficial guide to dotfiles on GitHub](https://dotfiles.github.io/)\n[^nvm]: [Node Version Manager](https://github.com/creationix/nvm)\n[^scozv_blog]: https://github.com/scozv/blog\n[^scozv_dotfiles]: https://github.com/scozv/dotfiles\n[^algo-wiki]: https://github.com/scozv/algo-wiki\n[^gitl]: [一套简洁的基于Git的线性分支管理工作流](https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git)\n","source":"_posts/2016-07-22-donot-ask-the-devs-to-prepare-env-by-click.md","raw":"---\nlayout: post\ntitle: \"DO NOT Prepare the Development Environment by Click and Click\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"bash\",\"ci\"]\nlang: en\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This article will give you an `installation.sh` script, that\n> can be used to prepare the development environment. Instead of click and click,\n> we just simply run this command in bash：\n>\n>       wget -qO- path/to/installation.sh | bash\n>\n>\n> This article will describe the process of `installation.sh`, besides, I want to express:\n>\n>\n> * Use code, not mouse,\n> * Use git, when we use code,\n> * Bring the wonderful Development Experience to developers.\n>\n> The `installation.sh` will only apply for `Ubuntu 14.04+`.\n>\n> And, the article will mention `dotfiles` [^dotfiles], but will not cover the details of it。\n>\n> This article is mainly written in Chinese, you may read the source code [^scozv_dotfiles] for help.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `installation.sh`\n\nRead the source of `installation.sh`（[Link](https://github.com/scozv/dotfiles/blob/master/os/ubuntu-server.sh)）。\nOr have a try on the VM：\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n{% endhighlight %}\n\nAttentions\n\n* Run this script on `Ubuntu 14.04+`,\n* Run this script on VM, NOT on your own development environment,\n* Read the source before running any unknown `sh` file.\n\n# Bash Scripts, the Basis of CI\n\nUsually, the CI configuration includes:\n\n* Environment preparing\n* Tests that will run\n* Any release\n* Clean\n\nThe 1st step is what the `installation.sh` will do.\n\nI almost write script (code) as many places any I could:\n\n* This blog site [^scozv_blog]\n* dotfiles [^scozv_dotfiles]\n* Notes（LaTeX）\n* Deployment script\n* API documents [^algo-wiki]\n* Internal documents\n\n# References\n\n[^dotfiles]: [Your unofficial guide to dotfiles on GitHub](https://dotfiles.github.io/)\n[^nvm]: [Node Version Manager](https://github.com/creationix/nvm)\n[^scozv_blog]: https://github.com/scozv/blog\n[^scozv_dotfiles]: https://github.com/scozv/dotfiles\n[^algo-wiki]: https://github.com/scozv/algo-wiki\n[^gitl]: [一套简洁的基于Git的线性分支管理工作流](https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git)\n","slug":"donot-ask-the-devs-to-prepare-env-by-click","published":1,"date":"2016-07-21T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysa000vyxcbpp36kqmd"},{"layout":"post","title":"Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Bolero is a `RESTful` Scaffold with `Scala`, `Play!` and `ReactiveMongo`.\n>\n> `Play!` handles the HTTP Request and Response, while the `ReactiveMongo`\n> reads and write with `MongoDB`. This article will introduce a few ideas in Bolero, including:\n>\n> * `Model` naming and Jsonfying,\n> * `RESTful API` design,\n> * `CORS` configuration,\n> * Token based authentication,\n> * `EitherOrError`, a Monad class for global rules,\n> * Webhook handling,\n> * `FakeApplication` for HTTP Request mock,\n> * Deploy with `sbt-native`.\n>\n> You may find the source code of `Bolero` on [scozv/bolero](https://github.com/scozv/bolero).\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Principles of `Bolero`\n\nI will introduce a `RESTful` Server code scaffold named `Bolero`.\nThe source code of it can be checked in [github](https://github.com/scozv/bolero).\n\nLet's look at the principles of `Bolero`.\n\n## Loose Coupling\n\nLoose Coupling is a very important idea of `Bolero`, I develop and deploy the\nView (web page) and `RESTful` Server individually:\n\n* `Bolero` only provides the `RESTful` Server, the view engine of `Play !` is\n  not used in `Bolero`. I am planning to replace `Play!` with `Spary.io`,\n* As the `RESTful` Server, `Bolero` ensures that all data returned is `JSON` format.\n\nWe can apply `Bolero` for multiple `RESTful` Server, however, `Bolero` is NOT\na Microservices Framework. Currently, the `Scala` version of `Lagom` Framework\nprovided by Lightbend\nis under development [^lagom_issue1].\n\n## Modeling, the Name, Polymorphism, and the JSON Formats\n\nData (`models`) has two paths of transferring in `Bolero`.\n\nOne path is that HTTP Request sends\ndata contained in `payload` to `models` in `Scala`,\nand finally persists the data into `MongoDB`.\n\nAnother path is from `MongoDB` to `models`, and then to `JSON` in web page.\n\nSo we need to build the model in 3 places:\n\n* `JSON` model in web page, `TypeScript` is recommanded for `JSON` modeling,\n* `Scala` model in `RESTful` Server, `trait` or `case`,\n* `JSON` model in `MongoDB`.\n\nIn order to keep consistency in 3 places, the naming convention is:\n\n* `_id` is used for all primary fields,\n* `NameOfModel` is camel-casing, with initial letter Uppercase,\n* `propertyOfModel` is camel-casing, with initial letter lowercase.\n\n> Attentions:\n>\n> The naming conventions above is not a best practice.\n> And, I am considering to convert the camel-case to underline_case in `JSON` and `MongoDB`.\n> Considering means just-considering, NOT decided-yet.\n\n`Play!` provides `Reads` and `Writes` [^play_json] for\n`JSON` serialization and deserialization:\n\n* It `Writes` code model to `JSON`, while,\n* `Reads` data as strong-typed model from `JSON`.\n\nAlso, `Play!` contains `Formats` for `JSON` automated mapping [^play_json_auto].\n\n{% highlight scala %}\nimport play.api.libs.json._\n\nimplicit val autoReads = Json.reads[T]\nimplicit val autoWrites = Json.writes[T]\n\n// format = reads + writes\nimplicit val autoFormat = Json.format[T]\n{% endhighlight %}\n\n> Tips:\n>\n> `Play!` provides automated mapping, however, using `Reads` and `Writes`\n> is recommanded, especially for complex `models`, assuming we have the\n> high percentage of APIs test coverage.\n>\n> The reason of NOT using `Formats[T]` is:\n>\n> * When any changes happen in any places, we have to update the code of `Reads` and `Writes`,\n>   otherwise, an error will be thrown:\n>   \n>        play.api.libs.json.JsResultException: \"obj.field_name\":{\"msg\":[\"error.path.missing\"]\n> * `JSON` formatting will be more flexible, such as `Writing` empty when `Option[T]` is `None`,\n> * We can use different naming conventions in different places.\n\nPolymorphism is the core idea of OOP, when using the `Reads` and `Writes`,\nwe may encounter the compile error saying:\n\n{% highlight scala %}\nambiguous reference to overloaded definition\n{% endhighlight %}\n\nThat means code has the conflict overrides,\nif you have the same issue,\nplease read the source code of [`Bolero`]((https://github.com/scozv/bolero)),\nor drop me a message.\n\n## Tips on `RESTful API` Design\n\n`Bolero` only provides the `RESTful` Server returning the `JSON` data,\nwill NOT provide the View page.\n\n### Factors in `RESTful API`\n\nGenerally, factors below should be considered during the `RESTful API` design:\n\n* HTTP Method, such as `GET`, `POST`, `PUT`, etc [^rest_http_method],\n* `URI`, like `/user/:id/profile`, parameters can be used for sorting, pagination or filtering,\n* `payload` data that is usually used in `POST` or `PUT`, it will be transferred to `RESTful` Server from Client side,\n* HTTP Header, metadata of HTTP Request, we can add authentication token in Header,\n* HTTP Response data, the returning value of `RESTful API`.\n\n### Consistency in payload and Response\n\nConsistency is not a new idea, especially, when you\nare familier with `map()` in `Scala`:\n\n{% highlight scala %}\nT.map(): T\n// such as\nList[A].map(): List[B]\nFuture[A].map(): Future[B]\n{% endhighlight %}\n\nAccording to this consistency principle,\nthe data structure of HTTP Response data is same as\nthe data structure of `payload` in Request:\n\n{% highlight HTML %}\nPOST /checkout\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Order\"\n\n// Response\ndata: \"Bolero.models.Order\"\n{% endhighlight %}\n\nConsistency principle of Request and Response\nmakes the API easy to remember and invoke.\n\n### Be CORS or NOT\n\nCORS stands for Cross Origin Resource Sharing [^mdn_cors].\n\nAt the very beginning of `Bolero`, I restricted the\naccess origin of `RESTful API`, and I allowed only one\nspecific client (web page server) to access the `RESTful` Server.\n\nHowever, restricting of access origin is helpless for a `RESTful` Server,\nespecially, when we need to interact with 3rd party Server.\nFor instance, the `Bolero` Server receives the Webhook from Ping++ payment server,\nwhich is a `POST` request actually, so that it need to open its access origin.\n\nAttention, `Access-Control-Allow-Origin` doesn't support\nthe so-called _multipal origin_ [^w3_cors_multi_issue],\nwe need to open our access origin widely (`*`):\n\n> In practice the `origin-list-or-null` production is more constrained.\n> Rather than allowing a space-separated list of origins,\n> **it is either a single origin or the string \"null\"**.\n\nAlso, restriction of access origin is NOT appropriate\nunder Loose Coupling principle and multiple instance deployment.\n\nAnd, If we need the access origin control, or to monitor the\nHTTP Request, we can:\n\n* use `Filters` of `Play!` [^play_filter],\n* use `origin` of HTTP Request to restrict origin source,\n* limit the abnormal high frequency sending of HTTP Request in client side.\n\n### URI, the Plurals, and the Order\n\n`Bolero` has the naming conventions of `URI` below:\n\n* using simple nouns in `URI`,\n* NOT using any symbol except the `/`,\n* NOT using camel-case,\n* using ONLY singular form of nouns in `URI`, even the Response data is `List`:\n\n      // get the list of user\n      GET /user\n      // get a user with specific id\n      GET /user/:id\n\n  If we treat a user as a file named `:id`, we also treat the `List[user]` as the folder\n  named `user`, when we need a file, or need to access the entire folder, we will also access\n  the path named `/user`. We don't use path `/user` for a single user,\n  and use path `/users` for a gourp of user at same time,\n* the sorting rules of `Bolero`'s HTTP Response data:\n    * returning sorted data if HTTP Request has the specific sorting rule,\n    * returning sorted data if the biz requirement needs,\n    * otherwise, `Bolero` will not ensure the order of list.\n\n# Details in Codes\n\nThe source code of `Bolero` is hosted as open source\nin [github](https://github.com/scozv/bolero).\n\nThe brief structure of `Bolero` code is:\n\n{% highlight sh %}\n.\n├── app\n|   ├── base                // utils function\n|   ├── biz                 // business implement, ONLY access MongoDB here\n|   ├── contollers          // controll of MVC\n|   └── models              \n|       ├── interop         // models used for interact with 3rd party API\n|       └── model.scala     // modeling data in Scala\n|\n├── conf                    // Play! configuration\n|   ├── application.conf\n|   ├── play.plugins\n|   ├── release.conf\n|   └── routes\n|\n├── project                  // project configuration\n|   ├── build.properties\n|   └── plugin.sbt\n|\n├── test                     // test case\n|\n└── build.sbt\n{% endhighlight %}\n\n## Ability of Model\n\nIn `Scala`, `trait` means an ability,\n`Bolero` names `trait` as `CanHaveSpecificAbility`.\n\n### `CanBeHierarchic`, building the hierarchical model(s)\n\nHierarchical model(s) is (are) conntected with each other.\nWe can use `union-find` to maintain the relationship:\n\n* the `rootId` of root object is its own `_id`,\n* for any two instances, if they have the same `rootId`, they are connected.\n\n### `CanBeJsonfied`, reading and writing `JSON`\n\nPlease read the source code of `CanBeJsonfied` [^scozv_git_goods].\n\n### `CanBeMasked`, removing the sensitive data\n\n`Bolero` will put a mask on the sensitive data, such as\nunderlying unique `_id`, cost of a product.\n\nThen, using `T.asMasked()` will be remove the sensitive data.\n\nNaming as `Mask`, is inspired from Oracle Data Masking [^oracle_mask].\n\n## `OrderOrError`, a Monad Pattern for Global Validation\n\nBefore creating an `Order`, we need validate a serial of rules on this `Order`:\n\n* does the user have the privilege of creating order,\n* is there enough inventory for this order,\n* is price valid,\n* is the coupon of order valid,\n* etc.\n\n`Bolero` provides a Monad Pattern named `OrderOrError`,\nit accepts an `OrderOrError`, and will\n\n* return `Order`, if previous order valid, otherwise,\n* return `Error`.\n\nLearning from the `Try` of `Scala` [^scala_try] , I designed\n`OrderOrError` as below:\n\n{% highlight scala %}\n\ntype OrderOrError = Either[Order, Error]\n\ndef genericValidation(order: Order, db: DB): Future[OrderOrError] = {\n  ???\n  /*\n  * we connect DB and validate the order,\n  * so a Future[T] will be returned\n  * */\n}\n\ndef genericRule\n(order: Future[OrderOrError], db: => DB)\n(implicit ec: ExecutionContext): Future[OrderOrError] =\n  order.flatMap {\n    case Right(e) => Future.successful(Right(e))\n    case Left(o) => genericValidation(o, db)\n  }\n{% endhighlight %}\n\n> Attention:\n>\n> Strictly speaking, `OrderOrError` above is not a Monad.\n> Two primary methods haven't been implemented [^scozv_bolero_issue1]:\n>\n>       ModelOrError[A].map(A => B): ModelOrError[B]\n>       ModelOrError[A].flatMap(A => ModelOrError[B]): ModelOrError[B]\n\n\n## `CanCrossOrigin`, handling the `OPTION` Request\n\n`OPTION` Request is used for `POST` or `PUT` of CORS, we need to:\n\n* define the `OPTION` router, and,\n* return `HTTP 200` after accepting the `OPTION` Request.\n\n{% highlight scala %}\n// routes\n// OPTIONS       /*path        controllers.CORSController.preFlight(path)\n// controllers\nclass CORSController\n  extends Controller\n  with CanCrossOrigin {\n  def preFlight(path: String) = Action { request =>\n    corsOPTION(path)\n  }\n}\n\n// CanCrossOrigin\ntrait CanCrossOrigin {\n  self: Controller =>\n\n  def corsOPTION(from: String = \"...\"): Result = {\n    ???\n    // add Access-Control-Allow-Origin to header\n  }\n}\n{% endhighlight %}\n\n## `CanConnectDB2[T]`, making code easy to I/O `MongoDB`\n\n`CanConnectDB2[T]` will replace the original `CanConnectDB` soon.\nIt will make code easy to read and write `MongoDB`.\n\nThe code changes\ncould be found at\n[git diff](https://github.com/scozv/bolero/commit/b0a5fd3c3ab58159305711e6e0f742786fccc30b).\n\nCurrently, methods below are provided:\n\n{% highlight scala %}\ntrait CanConnectDB2[T] {\n  // Lists all T\n  def list(db: DB): Future[Seq[T]] = ???\n  // Quereis one T with specific _id\n  def one(db: DB, id: String): Future[Option[T]] = ???\n  // Gets the value of specific field of one T\n  def field[B](db: DB, id: String, fieldName: String): Future[Option[B]] = ???\n  // Lists the specific field values\n  def sequence(db: DB, selector: JsObject, fieldName: String): Future[Seq[B]] = ???\n  // Inserts one T\n  def insert(db: DB, document: T): Future[WriteResult] = ???\n  // Updates T(s) when selector holds\n  def update(db: DB, selector: JsObject, update: T): Future[UpdateWriteResult] = ???\n  // Edits one T with specific _id\n  def edit(db: DB, id: String, update: T):Future[UpdateWriteResult] = ???\n}\n{% endhighlight %}\n\n## Token Based Authentication\n\nAll `RESTful` API are stateless in `Bolero`.\nToken based authentication can be used for\nuser identification. A post [^auth0_token] from `auth0`\nis recommanded.\n\nAlso, I am writing a post on token authentication,\nthe source code of this draft is in github [^scozv_blog_auth_token].\n\n> Attention:\n>\n> I am not a expert on Web Security.\n> `Bolero` cannot ensure the 100% security of authentication.\n> I am still improving it.\n\nCurrently, `Bolero` uses Action composition [^play_composition]\nfor authentication.\nYou can read the source code of `controllers.CanAuthenticate.scala`.\n\n# Test, Refactor and CI\n\n> **Test is very important [^scozv_blog_jira], it is key to Refactor and CI.**\n>\n> **Test is very important, it is key to Refactor and CI.**\n>\n> **Test is very important, it is key to Refactor and CI.**\n\nThe source code of `test`\nis located in [`test`](https://github.com/scozv/bolero/tree/master/test) folder.\n\n## The Structure of Test\n\n{% highlight sh %}\n.\n├── test\n|   |                               // still use previous release file,\n|   ├── WithApplication.scala       //   instead of WithApplication from Play! 2.4\n|   ├── CanConnectDB.scala          // connect to test database\n|   ├── CanFakeHTTP.scala           // fake HTTP Request\n|   └── BoleroApplicationSpec.scala // test files, can be separated\n\n{% endhighlight %}\n\n## Begin and End of Test\n\nIn order to keep independency of database,\n`Bolero` will prepare data before test, and clean up data after test.\n\n## `CanFakeHTTP`, HTTP Request Mocking\n\nBased on the Loose Coupling principle,\nthe development process of `RESTful` Server\nshould be independent with the development process\nof web page. So that `Bolero` use `CanFakeHTTP`\nto mock the HTTP Request.\n\n# Deployment\n\nI use `Bolero` and host the project on `Ubuntu 14.04`.\n\nFor deployment, you can read the `deploy.sh`, which uses\n`sbt-native-packager` [^scala_sbt_native] for packaging.\n\nDO NOT host the deployment script or\nproduction configuration in development code.\n\nSupposing we have a huge project (codename: PJ), and we separate\nthis project into different code repositories:\n\n{% highlight bash %}\npj-docs                 # documentation center, using Markdown\npj-core-restful         # this is where the Bolero use\npj-core-web             # Web models, using TypeScript\npj-client-web           # View, the user interface, using `pj-core-web`\npj-client-device        # View, application\npj-client-console       # View, core management system, still using `pj-core-web`\npj-deploy               # deploy configuration, NOT open to developers\npj-data                 # production data backup, NOT open to developers\n{% endhighlight %}\n\n# References\n\n[^play_json]: [`Play!` JSON Reads/Writes/Format Combinators](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators)\n[^play_json_auto]: [`Play!` JSON automated mapping](https://www.playframework.com/documentation/2.5.x/ScalaJsonAutomated)\n[^rest_http_method]: [Using HTTP Methods for RESTful Services](http://www.restapitutorial.com/lessons/httpmethods.html)\n[^mdn_cors]: [HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n[^w3_cors_multi_issue]: [5.1 Access-Control-Allow-Origin Response Header](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header) from w3.org\n[^play_filter]: [`Play!` Filters](https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters)\n[^play_rqst_header]: [`play.api.mvc.RequestHeader`](https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.mvc.RequestHeader)\n[^auth0_token]: [Cookies vs Tokens. Getting auth right with Angular.JS](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\n[^scozv_blog_auth_token]: [Understanding of Token Authentication (Draft, in Chinese)](https://github.com/scozv/blog/blob/master/_drafts/2016-05-12-understanding-of-login-and-the-token-based-authentication.md)\n[^oracle_mask]: [Oracle Data Masking and Subsetting Pack](http://www.oracle.com/technetwork/database/options/data-masking-subsetting/overview/index.html)\n[^scala_try]: [`scala.util.Try`](http://www.scala-lang.org/api/2.9.3/scala/util/Try.html)\n[^play_composition]: [`Play!` Action composition](https://www.playframework.com/documentation/2.5.x/ScalaActionsComposition)\n[^scozv_blog_jira]: [Fully Migrating from Bitbucket Cloud Issue System to JIRA Server](https://scozv.github.io/blog/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server)\n[^scala_sbt_native]: [Debian Plugin]([^scala_sbt_native])\n[^scozv_git_goods]: [`models.Goods`](https://github.com/scozv/bolero/blob/master/app/models/Goods.scala#L28)\n[^scozv_bolero_issue1]: [`Bolero` issue #1 monad ModelOrError needed](https://github.com/scozv/bolero/issues/1)\n","source":"_posts/2016-07-27-bolero-a-restful-scaffold-with-scala.md","raw":"---\nlayout: post\ntitle: \"Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\",\"scaffold\",\"project\",\"architecture\",\"restful\"]\nlang: \"en\"\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Bolero is a `RESTful` Scaffold with `Scala`, `Play!` and `ReactiveMongo`.\n>\n> `Play!` handles the HTTP Request and Response, while the `ReactiveMongo`\n> reads and write with `MongoDB`. This article will introduce a few ideas in Bolero, including:\n>\n> * `Model` naming and Jsonfying,\n> * `RESTful API` design,\n> * `CORS` configuration,\n> * Token based authentication,\n> * `EitherOrError`, a Monad class for global rules,\n> * Webhook handling,\n> * `FakeApplication` for HTTP Request mock,\n> * Deploy with `sbt-native`.\n>\n> You may find the source code of `Bolero` on [scozv/bolero](https://github.com/scozv/bolero).\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Principles of `Bolero`\n\nI will introduce a `RESTful` Server code scaffold named `Bolero`.\nThe source code of it can be checked in [github](https://github.com/scozv/bolero).\n\nLet's look at the principles of `Bolero`.\n\n## Loose Coupling\n\nLoose Coupling is a very important idea of `Bolero`, I develop and deploy the\nView (web page) and `RESTful` Server individually:\n\n* `Bolero` only provides the `RESTful` Server, the view engine of `Play !` is\n  not used in `Bolero`. I am planning to replace `Play!` with `Spary.io`,\n* As the `RESTful` Server, `Bolero` ensures that all data returned is `JSON` format.\n\nWe can apply `Bolero` for multiple `RESTful` Server, however, `Bolero` is NOT\na Microservices Framework. Currently, the `Scala` version of `Lagom` Framework\nprovided by Lightbend\nis under development [^lagom_issue1].\n\n## Modeling, the Name, Polymorphism, and the JSON Formats\n\nData (`models`) has two paths of transferring in `Bolero`.\n\nOne path is that HTTP Request sends\ndata contained in `payload` to `models` in `Scala`,\nand finally persists the data into `MongoDB`.\n\nAnother path is from `MongoDB` to `models`, and then to `JSON` in web page.\n\nSo we need to build the model in 3 places:\n\n* `JSON` model in web page, `TypeScript` is recommanded for `JSON` modeling,\n* `Scala` model in `RESTful` Server, `trait` or `case`,\n* `JSON` model in `MongoDB`.\n\nIn order to keep consistency in 3 places, the naming convention is:\n\n* `_id` is used for all primary fields,\n* `NameOfModel` is camel-casing, with initial letter Uppercase,\n* `propertyOfModel` is camel-casing, with initial letter lowercase.\n\n> Attentions:\n>\n> The naming conventions above is not a best practice.\n> And, I am considering to convert the camel-case to underline_case in `JSON` and `MongoDB`.\n> Considering means just-considering, NOT decided-yet.\n\n`Play!` provides `Reads` and `Writes` [^play_json] for\n`JSON` serialization and deserialization:\n\n* It `Writes` code model to `JSON`, while,\n* `Reads` data as strong-typed model from `JSON`.\n\nAlso, `Play!` contains `Formats` for `JSON` automated mapping [^play_json_auto].\n\n{% highlight scala %}\nimport play.api.libs.json._\n\nimplicit val autoReads = Json.reads[T]\nimplicit val autoWrites = Json.writes[T]\n\n// format = reads + writes\nimplicit val autoFormat = Json.format[T]\n{% endhighlight %}\n\n> Tips:\n>\n> `Play!` provides automated mapping, however, using `Reads` and `Writes`\n> is recommanded, especially for complex `models`, assuming we have the\n> high percentage of APIs test coverage.\n>\n> The reason of NOT using `Formats[T]` is:\n>\n> * When any changes happen in any places, we have to update the code of `Reads` and `Writes`,\n>   otherwise, an error will be thrown:\n>   \n>        play.api.libs.json.JsResultException: \"obj.field_name\":{\"msg\":[\"error.path.missing\"]\n> * `JSON` formatting will be more flexible, such as `Writing` empty when `Option[T]` is `None`,\n> * We can use different naming conventions in different places.\n\nPolymorphism is the core idea of OOP, when using the `Reads` and `Writes`,\nwe may encounter the compile error saying:\n\n{% highlight scala %}\nambiguous reference to overloaded definition\n{% endhighlight %}\n\nThat means code has the conflict overrides,\nif you have the same issue,\nplease read the source code of [`Bolero`]((https://github.com/scozv/bolero)),\nor drop me a message.\n\n## Tips on `RESTful API` Design\n\n`Bolero` only provides the `RESTful` Server returning the `JSON` data,\nwill NOT provide the View page.\n\n### Factors in `RESTful API`\n\nGenerally, factors below should be considered during the `RESTful API` design:\n\n* HTTP Method, such as `GET`, `POST`, `PUT`, etc [^rest_http_method],\n* `URI`, like `/user/:id/profile`, parameters can be used for sorting, pagination or filtering,\n* `payload` data that is usually used in `POST` or `PUT`, it will be transferred to `RESTful` Server from Client side,\n* HTTP Header, metadata of HTTP Request, we can add authentication token in Header,\n* HTTP Response data, the returning value of `RESTful API`.\n\n### Consistency in payload and Response\n\nConsistency is not a new idea, especially, when you\nare familier with `map()` in `Scala`:\n\n{% highlight scala %}\nT.map(): T\n// such as\nList[A].map(): List[B]\nFuture[A].map(): Future[B]\n{% endhighlight %}\n\nAccording to this consistency principle,\nthe data structure of HTTP Response data is same as\nthe data structure of `payload` in Request:\n\n{% highlight HTML %}\nPOST /checkout\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Order\"\n\n// Response\ndata: \"Bolero.models.Order\"\n{% endhighlight %}\n\nConsistency principle of Request and Response\nmakes the API easy to remember and invoke.\n\n### Be CORS or NOT\n\nCORS stands for Cross Origin Resource Sharing [^mdn_cors].\n\nAt the very beginning of `Bolero`, I restricted the\naccess origin of `RESTful API`, and I allowed only one\nspecific client (web page server) to access the `RESTful` Server.\n\nHowever, restricting of access origin is helpless for a `RESTful` Server,\nespecially, when we need to interact with 3rd party Server.\nFor instance, the `Bolero` Server receives the Webhook from Ping++ payment server,\nwhich is a `POST` request actually, so that it need to open its access origin.\n\nAttention, `Access-Control-Allow-Origin` doesn't support\nthe so-called _multipal origin_ [^w3_cors_multi_issue],\nwe need to open our access origin widely (`*`):\n\n> In practice the `origin-list-or-null` production is more constrained.\n> Rather than allowing a space-separated list of origins,\n> **it is either a single origin or the string \"null\"**.\n\nAlso, restriction of access origin is NOT appropriate\nunder Loose Coupling principle and multiple instance deployment.\n\nAnd, If we need the access origin control, or to monitor the\nHTTP Request, we can:\n\n* use `Filters` of `Play!` [^play_filter],\n* use `origin` of HTTP Request to restrict origin source,\n* limit the abnormal high frequency sending of HTTP Request in client side.\n\n### URI, the Plurals, and the Order\n\n`Bolero` has the naming conventions of `URI` below:\n\n* using simple nouns in `URI`,\n* NOT using any symbol except the `/`,\n* NOT using camel-case,\n* using ONLY singular form of nouns in `URI`, even the Response data is `List`:\n\n      // get the list of user\n      GET /user\n      // get a user with specific id\n      GET /user/:id\n\n  If we treat a user as a file named `:id`, we also treat the `List[user]` as the folder\n  named `user`, when we need a file, or need to access the entire folder, we will also access\n  the path named `/user`. We don't use path `/user` for a single user,\n  and use path `/users` for a gourp of user at same time,\n* the sorting rules of `Bolero`'s HTTP Response data:\n    * returning sorted data if HTTP Request has the specific sorting rule,\n    * returning sorted data if the biz requirement needs,\n    * otherwise, `Bolero` will not ensure the order of list.\n\n# Details in Codes\n\nThe source code of `Bolero` is hosted as open source\nin [github](https://github.com/scozv/bolero).\n\nThe brief structure of `Bolero` code is:\n\n{% highlight sh %}\n.\n├── app\n|   ├── base                // utils function\n|   ├── biz                 // business implement, ONLY access MongoDB here\n|   ├── contollers          // controll of MVC\n|   └── models              \n|       ├── interop         // models used for interact with 3rd party API\n|       └── model.scala     // modeling data in Scala\n|\n├── conf                    // Play! configuration\n|   ├── application.conf\n|   ├── play.plugins\n|   ├── release.conf\n|   └── routes\n|\n├── project                  // project configuration\n|   ├── build.properties\n|   └── plugin.sbt\n|\n├── test                     // test case\n|\n└── build.sbt\n{% endhighlight %}\n\n## Ability of Model\n\nIn `Scala`, `trait` means an ability,\n`Bolero` names `trait` as `CanHaveSpecificAbility`.\n\n### `CanBeHierarchic`, building the hierarchical model(s)\n\nHierarchical model(s) is (are) conntected with each other.\nWe can use `union-find` to maintain the relationship:\n\n* the `rootId` of root object is its own `_id`,\n* for any two instances, if they have the same `rootId`, they are connected.\n\n### `CanBeJsonfied`, reading and writing `JSON`\n\nPlease read the source code of `CanBeJsonfied` [^scozv_git_goods].\n\n### `CanBeMasked`, removing the sensitive data\n\n`Bolero` will put a mask on the sensitive data, such as\nunderlying unique `_id`, cost of a product.\n\nThen, using `T.asMasked()` will be remove the sensitive data.\n\nNaming as `Mask`, is inspired from Oracle Data Masking [^oracle_mask].\n\n## `OrderOrError`, a Monad Pattern for Global Validation\n\nBefore creating an `Order`, we need validate a serial of rules on this `Order`:\n\n* does the user have the privilege of creating order,\n* is there enough inventory for this order,\n* is price valid,\n* is the coupon of order valid,\n* etc.\n\n`Bolero` provides a Monad Pattern named `OrderOrError`,\nit accepts an `OrderOrError`, and will\n\n* return `Order`, if previous order valid, otherwise,\n* return `Error`.\n\nLearning from the `Try` of `Scala` [^scala_try] , I designed\n`OrderOrError` as below:\n\n{% highlight scala %}\n\ntype OrderOrError = Either[Order, Error]\n\ndef genericValidation(order: Order, db: DB): Future[OrderOrError] = {\n  ???\n  /*\n  * we connect DB and validate the order,\n  * so a Future[T] will be returned\n  * */\n}\n\ndef genericRule\n(order: Future[OrderOrError], db: => DB)\n(implicit ec: ExecutionContext): Future[OrderOrError] =\n  order.flatMap {\n    case Right(e) => Future.successful(Right(e))\n    case Left(o) => genericValidation(o, db)\n  }\n{% endhighlight %}\n\n> Attention:\n>\n> Strictly speaking, `OrderOrError` above is not a Monad.\n> Two primary methods haven't been implemented [^scozv_bolero_issue1]:\n>\n>       ModelOrError[A].map(A => B): ModelOrError[B]\n>       ModelOrError[A].flatMap(A => ModelOrError[B]): ModelOrError[B]\n\n\n## `CanCrossOrigin`, handling the `OPTION` Request\n\n`OPTION` Request is used for `POST` or `PUT` of CORS, we need to:\n\n* define the `OPTION` router, and,\n* return `HTTP 200` after accepting the `OPTION` Request.\n\n{% highlight scala %}\n// routes\n// OPTIONS       /*path        controllers.CORSController.preFlight(path)\n// controllers\nclass CORSController\n  extends Controller\n  with CanCrossOrigin {\n  def preFlight(path: String) = Action { request =>\n    corsOPTION(path)\n  }\n}\n\n// CanCrossOrigin\ntrait CanCrossOrigin {\n  self: Controller =>\n\n  def corsOPTION(from: String = \"...\"): Result = {\n    ???\n    // add Access-Control-Allow-Origin to header\n  }\n}\n{% endhighlight %}\n\n## `CanConnectDB2[T]`, making code easy to I/O `MongoDB`\n\n`CanConnectDB2[T]` will replace the original `CanConnectDB` soon.\nIt will make code easy to read and write `MongoDB`.\n\nThe code changes\ncould be found at\n[git diff](https://github.com/scozv/bolero/commit/b0a5fd3c3ab58159305711e6e0f742786fccc30b).\n\nCurrently, methods below are provided:\n\n{% highlight scala %}\ntrait CanConnectDB2[T] {\n  // Lists all T\n  def list(db: DB): Future[Seq[T]] = ???\n  // Quereis one T with specific _id\n  def one(db: DB, id: String): Future[Option[T]] = ???\n  // Gets the value of specific field of one T\n  def field[B](db: DB, id: String, fieldName: String): Future[Option[B]] = ???\n  // Lists the specific field values\n  def sequence(db: DB, selector: JsObject, fieldName: String): Future[Seq[B]] = ???\n  // Inserts one T\n  def insert(db: DB, document: T): Future[WriteResult] = ???\n  // Updates T(s) when selector holds\n  def update(db: DB, selector: JsObject, update: T): Future[UpdateWriteResult] = ???\n  // Edits one T with specific _id\n  def edit(db: DB, id: String, update: T):Future[UpdateWriteResult] = ???\n}\n{% endhighlight %}\n\n## Token Based Authentication\n\nAll `RESTful` API are stateless in `Bolero`.\nToken based authentication can be used for\nuser identification. A post [^auth0_token] from `auth0`\nis recommanded.\n\nAlso, I am writing a post on token authentication,\nthe source code of this draft is in github [^scozv_blog_auth_token].\n\n> Attention:\n>\n> I am not a expert on Web Security.\n> `Bolero` cannot ensure the 100% security of authentication.\n> I am still improving it.\n\nCurrently, `Bolero` uses Action composition [^play_composition]\nfor authentication.\nYou can read the source code of `controllers.CanAuthenticate.scala`.\n\n# Test, Refactor and CI\n\n> **Test is very important [^scozv_blog_jira], it is key to Refactor and CI.**\n>\n> **Test is very important, it is key to Refactor and CI.**\n>\n> **Test is very important, it is key to Refactor and CI.**\n\nThe source code of `test`\nis located in [`test`](https://github.com/scozv/bolero/tree/master/test) folder.\n\n## The Structure of Test\n\n{% highlight sh %}\n.\n├── test\n|   |                               // still use previous release file,\n|   ├── WithApplication.scala       //   instead of WithApplication from Play! 2.4\n|   ├── CanConnectDB.scala          // connect to test database\n|   ├── CanFakeHTTP.scala           // fake HTTP Request\n|   └── BoleroApplicationSpec.scala // test files, can be separated\n\n{% endhighlight %}\n\n## Begin and End of Test\n\nIn order to keep independency of database,\n`Bolero` will prepare data before test, and clean up data after test.\n\n## `CanFakeHTTP`, HTTP Request Mocking\n\nBased on the Loose Coupling principle,\nthe development process of `RESTful` Server\nshould be independent with the development process\nof web page. So that `Bolero` use `CanFakeHTTP`\nto mock the HTTP Request.\n\n# Deployment\n\nI use `Bolero` and host the project on `Ubuntu 14.04`.\n\nFor deployment, you can read the `deploy.sh`, which uses\n`sbt-native-packager` [^scala_sbt_native] for packaging.\n\nDO NOT host the deployment script or\nproduction configuration in development code.\n\nSupposing we have a huge project (codename: PJ), and we separate\nthis project into different code repositories:\n\n{% highlight bash %}\npj-docs                 # documentation center, using Markdown\npj-core-restful         # this is where the Bolero use\npj-core-web             # Web models, using TypeScript\npj-client-web           # View, the user interface, using `pj-core-web`\npj-client-device        # View, application\npj-client-console       # View, core management system, still using `pj-core-web`\npj-deploy               # deploy configuration, NOT open to developers\npj-data                 # production data backup, NOT open to developers\n{% endhighlight %}\n\n# References\n\n[^play_json]: [`Play!` JSON Reads/Writes/Format Combinators](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators)\n[^play_json_auto]: [`Play!` JSON automated mapping](https://www.playframework.com/documentation/2.5.x/ScalaJsonAutomated)\n[^rest_http_method]: [Using HTTP Methods for RESTful Services](http://www.restapitutorial.com/lessons/httpmethods.html)\n[^mdn_cors]: [HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n[^w3_cors_multi_issue]: [5.1 Access-Control-Allow-Origin Response Header](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header) from w3.org\n[^play_filter]: [`Play!` Filters](https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters)\n[^play_rqst_header]: [`play.api.mvc.RequestHeader`](https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.mvc.RequestHeader)\n[^auth0_token]: [Cookies vs Tokens. Getting auth right with Angular.JS](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\n[^scozv_blog_auth_token]: [Understanding of Token Authentication (Draft, in Chinese)](https://github.com/scozv/blog/blob/master/_drafts/2016-05-12-understanding-of-login-and-the-token-based-authentication.md)\n[^oracle_mask]: [Oracle Data Masking and Subsetting Pack](http://www.oracle.com/technetwork/database/options/data-masking-subsetting/overview/index.html)\n[^scala_try]: [`scala.util.Try`](http://www.scala-lang.org/api/2.9.3/scala/util/Try.html)\n[^play_composition]: [`Play!` Action composition](https://www.playframework.com/documentation/2.5.x/ScalaActionsComposition)\n[^scozv_blog_jira]: [Fully Migrating from Bitbucket Cloud Issue System to JIRA Server](https://scozv.github.io/blog/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server)\n[^scala_sbt_native]: [Debian Plugin]([^scala_sbt_native])\n[^scozv_git_goods]: [`models.Goods`](https://github.com/scozv/bolero/blob/master/app/models/Goods.scala#L28)\n[^scozv_bolero_issue1]: [`Bolero` issue #1 monad ModelOrError needed](https://github.com/scozv/bolero/issues/1)\n","slug":"bolero-a-restful-scaffold-with-scala","published":1,"date":"2016-07-26T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysd000xyxcb1k5zw0me"},{"layout":"post","title":"Scala Quick Tour Part I","description":"","lang":"en","_content":"\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Three years ago, I learn the _Functional Programming Principles in Scala_ [^open_progfun1]\n> from Coursera.org. After that I wrote `Scala` and finished `Bolero` [^blog_bolero].\n>\n> In the serial of _Scala Quick Tour_, I would like to give you:\n>\n> * Part 1, Basis, Functional Type and Type Inference\n> * Part 2, Tail Recursion and `List[T]`\n> * Part 3, OOP in `Scala`\n> * Part 4, Pattern Match\n> * Part 5, Collections\n> * Part 6, Lazy Evaluation, Monad, `map` and `flatMap`\n> * Part 7, `Future[T]`, For Comprehension\n> * Part 8, Deep in `Bolero` [^github_bolero]\n>\n> This article is Part I, and covers:\n>\n> * Basis in Functional Programming,\n> * Two Evaluation Mode, Call By-Value and Call By-Name,\n> * Functional Type,\n> * Type Inference.\n>\n> Currently, This article (Part I) is only written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, the Source Code](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","source":"_posts/2016-08-21-scala-quick-tour-part-i.md","raw":"---\nlayout: post\ntitle: \"Scala Quick Tour Part I\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\"]\nlang: en\n---\n\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> Three years ago, I learn the _Functional Programming Principles in Scala_ [^open_progfun1]\n> from Coursera.org. After that I wrote `Scala` and finished `Bolero` [^blog_bolero].\n>\n> In the serial of _Scala Quick Tour_, I would like to give you:\n>\n> * Part 1, Basis, Functional Type and Type Inference\n> * Part 2, Tail Recursion and `List[T]`\n> * Part 3, OOP in `Scala`\n> * Part 4, Pattern Match\n> * Part 5, Collections\n> * Part 6, Lazy Evaluation, Monad, `map` and `flatMap`\n> * Part 7, `Future[T]`, For Comprehension\n> * Part 8, Deep in `Bolero` [^github_bolero]\n>\n> This article is Part I, and covers:\n>\n> * Basis in Functional Programming,\n> * Two Evaluation Mode, Call By-Value and Call By-Name,\n> * Functional Type,\n> * Type Inference.\n>\n> Currently, This article (Part I) is only written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, the Source Code](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","slug":"scala-quick-tour-part-i","published":1,"date":"2016-08-20T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysf0012yxcb20mdl9rs"},{"layout":"post","title":"Scala Quick Tour Part II","description":"","lang":"en","_content":"\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This is the second part of _Scala Quick Tour_,\n> in the [previous part](https://scozv.github.io/blog/guide/2016/08/21/scala-quick-tour-part-i),\n> we talked about Functional Programming Basis, Functional Type and the Type Inference.\n>\n> In this article, I will give you a precise introduction of **Tail Recursion**,\n> which is a very important conception of Functional Programming.\n> After this introduction, I will explain the construction and operations of `List[T]`, using\n> Tail Recursion.\n>\n> Briefly, the part II will cover:\n>\n> * Iteration to Recursion,\n> * Recursion vs Tail Recursion,\n> * First Glance of Type Parameterization and Pattern Match,\n> * Recursion Construction of `List[T]`,\n> * `head` and `tail`,\n> * `take` and `reverse`,\n> * `append` and `prepend`,\n> * `map` and `foreach`,\n> * `map` and `reduce`,\n> * Read the Source of `List.scala`. \n>\n> Currently, This article (Part II) is only written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, the Source Code](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","source":"_posts/2016-08-22-scala-quick-tour-part-ii.md","raw":"---\nlayout: post\ntitle: \"Scala Quick Tour Part II\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\"]\nlang: en\n---\n\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> This is the second part of _Scala Quick Tour_,\n> in the [previous part](https://scozv.github.io/blog/guide/2016/08/21/scala-quick-tour-part-i),\n> we talked about Functional Programming Basis, Functional Type and the Type Inference.\n>\n> In this article, I will give you a precise introduction of **Tail Recursion**,\n> which is a very important conception of Functional Programming.\n> After this introduction, I will explain the construction and operations of `List[T]`, using\n> Tail Recursion.\n>\n> Briefly, the part II will cover:\n>\n> * Iteration to Recursion,\n> * Recursion vs Tail Recursion,\n> * First Glance of Type Parameterization and Pattern Match,\n> * Recursion Construction of `List[T]`,\n> * `head` and `tail`,\n> * `take` and `reverse`,\n> * `append` and `prepend`,\n> * `map` and `foreach`,\n> * `map` and `reduce`,\n> * Read the Source of `List.scala`. \n>\n> Currently, This article (Part II) is only written in Chinese.\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, the Source Code](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","slug":"scala-quick-tour-part-ii","published":1,"date":"2016-08-21T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysg0014yxcb7w1l19ia"},{"layout":"post","title":"Bolero, Cumulative Update (Sep 04, 2016)","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> This article gives a short description on cumulative update of `Bolero`.\n> For the entire project details, please read previous post [^blog_bolero]。\n>\n>\n> You may find the source code of `Bolero` on [scozv/bolero](https://github.com/scozv/bolero).\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Conventions and Rules\n\nThe conventions or rules in `Bolero` may not be the best practice:\n\n* Naming most `trait` with the initial `Can`, in order to state it has some sort of ability,\n* `interop` directory was used for inter-operating between 3rd party API, at beginning,\n* `_id` means primary key, and it is `String`.\n\n## Uniform HTTP Response\n\nAll HTTP Response return uniform `JSON` as below:\n\n{% highlight raw %}\n{\n  ok: Boolean,\n  data: T,\n  error: String\n}\n{% endhighlight %}\n\n## Consistency in payload and Response\n\nInspired by `map()`, `Bolero` keeps consistence between `payload`\nand Response data.\n\nFor instance:\n\n{% highlight raw %}\nPUT /transaction\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Transaction\"\n\n// Response\ndata: \"Bolero.models.Transaction\"\n{% endhighlight %}\n\nOnly difference is `_id` in `payload` is empty, while `_id` in Response\nwill be generated.\n\n# Refactor and Enhancement\n\n## `CanConnectDB2`\n\n`CanConnectDB2` provides more generic `MongoDB` I/O abilities with `implicit`.\n\n## Separated `CanBeHierarchic`\n\n`Hierarchic` handles the connection relationship with `union-find` algorithm。\n\n`CanBeHierarchic` has been separated into `CanBeHierarchicInstance` and `CanBeHierarchicObject`.\n\nSee:\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/ea24ab2c443a802145488b81c15e2fa7266492ae\n{% endhighlight %}\n\n## Global Setting for `Action Not Found`\n\n`Bolero` will return `{ok: false, error: '100'}`\nwhen `Action Not Found`\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/e8991bc146adeabaf5d5f713f253a2a6fa1fe950\n{% endhighlight %}\n\n## Improvement of `ResponseOk`\n\n`Bolero` uses `implicit writes`, in order to avoid\n`Json.toJson` manually of parameters.\n\n## Clear `unused import`\n\n`unused import` has been cleared.\n\n# Unsolved Issue\n\n## Compiling Triggered After Service Started\n\nWhen `output` (`activator run` or from IntelliJ IDEA) said _service has been running on `9000`_,\nthe refresh compile will still be invoked at the firstly API access.\n\n## Test Failed After Many Codes Changed\n\nWhen many codes have been changed, test will be failed\nunless we `run` a service to trigger a refresh compile.\n\n## Test DB and Development DB\n\nThe `FakeHTTPRequest` of `WithApplication` may use the `DB` connection in `application.conf`.\nSo that we cannot reconfigure the `DB` in our test case.\n\n# References\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n","source":"_posts/2016-09-05-bolero-cumulative-update-on-sep-04-2016.md","raw":"---\nlayout: post\ntitle: \"Bolero, Cumulative Update (Sep 04, 2016)\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\",\"scaffold\",\"project\",\"architecture\",\"restful\"]\nlang: \"en\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> This article gives a short description on cumulative update of `Bolero`.\n> For the entire project details, please read previous post [^blog_bolero]。\n>\n>\n> You may find the source code of `Bolero` on [scozv/bolero](https://github.com/scozv/bolero).\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Conventions and Rules\n\nThe conventions or rules in `Bolero` may not be the best practice:\n\n* Naming most `trait` with the initial `Can`, in order to state it has some sort of ability,\n* `interop` directory was used for inter-operating between 3rd party API, at beginning,\n* `_id` means primary key, and it is `String`.\n\n## Uniform HTTP Response\n\nAll HTTP Response return uniform `JSON` as below:\n\n{% highlight raw %}\n{\n  ok: Boolean,\n  data: T,\n  error: String\n}\n{% endhighlight %}\n\n## Consistency in payload and Response\n\nInspired by `map()`, `Bolero` keeps consistence between `payload`\nand Response data.\n\nFor instance:\n\n{% highlight raw %}\nPUT /transaction\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Transaction\"\n\n// Response\ndata: \"Bolero.models.Transaction\"\n{% endhighlight %}\n\nOnly difference is `_id` in `payload` is empty, while `_id` in Response\nwill be generated.\n\n# Refactor and Enhancement\n\n## `CanConnectDB2`\n\n`CanConnectDB2` provides more generic `MongoDB` I/O abilities with `implicit`.\n\n## Separated `CanBeHierarchic`\n\n`Hierarchic` handles the connection relationship with `union-find` algorithm。\n\n`CanBeHierarchic` has been separated into `CanBeHierarchicInstance` and `CanBeHierarchicObject`.\n\nSee:\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/ea24ab2c443a802145488b81c15e2fa7266492ae\n{% endhighlight %}\n\n## Global Setting for `Action Not Found`\n\n`Bolero` will return `{ok: false, error: '100'}`\nwhen `Action Not Found`\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/e8991bc146adeabaf5d5f713f253a2a6fa1fe950\n{% endhighlight %}\n\n## Improvement of `ResponseOk`\n\n`Bolero` uses `implicit writes`, in order to avoid\n`Json.toJson` manually of parameters.\n\n## Clear `unused import`\n\n`unused import` has been cleared.\n\n# Unsolved Issue\n\n## Compiling Triggered After Service Started\n\nWhen `output` (`activator run` or from IntelliJ IDEA) said _service has been running on `9000`_,\nthe refresh compile will still be invoked at the firstly API access.\n\n## Test Failed After Many Codes Changed\n\nWhen many codes have been changed, test will be failed\nunless we `run` a service to trigger a refresh compile.\n\n## Test DB and Development DB\n\nThe `FakeHTTPRequest` of `WithApplication` may use the `DB` connection in `application.conf`.\nSo that we cannot reconfigure the `DB` in our test case.\n\n# References\n\n[^blog_bolero]: [Bolero, a RESTful Scaffold with Scala, Play! and ReactiveMongo](https://scozv.github.io/blog/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n","slug":"bolero-cumulative-update-on-sep-04-2016","published":1,"date":"2016-09-04T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysi0017yxcbp2dv3k29"},{"layout":"post","title":"Design Test Cases Before Write Implementation If the Former Is Easier","description":"","lang":"en","_content":"{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> If we want to map the domain according to the defined rules, and：\n>\n> * store the mapping rules in database, such as `*a.com`，\n> * for input `s1.a.com`，it can be matched by this rule, while, `a.com` cannot.\n>\n> This article will introduce two implementations for this requirement, however,\n> in specific case, implementation detail sometimes is not as important as the test cases.\n\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Requirement\n\nWe have four rules for pattern match：\n\n{% highlight bash %}\na.*       -> 1\na-*       -> 2\n*.a.com   -> 3\n*.a.*     -> 4\n{% endhighlight %}\n\nThe left side of arrow is the wildcard matching rule, while,\nthe right side is the return result when the input parameter matches\nthis rule.\n\nFor instance, the input parameters in the left side will get\nthe result value in right side:\n\n{% highlight bash %}\nz.a.com   -> 3\nz.a.io    -> 4\n{% endhighlight %}\n\n# Implementations\n\nWe cannot use `substring` directly, since we have the wildcard in\nthe rules.\n\nA plain solution is using the idea of `substring` after we extract\nthe main keyword in our parameters (such as `a` in the example above).\n\n\n## `InternetDomainName` for Keyword in Domain\n\nWe can use `InternetDomainName` [^_guava_int_dn] to extract the root domain from the\nparameters, then we can use the keyword (root domain) to build our matching rules\nwhich include the wildcard.\n\nThe function extracting the root domain can be defined as below:\n\n{% highlight JavaScript %}\nfunction getRootDomain(domain) {\n  // ...\n}\n{% endhighlight %}\n\n## Rebuild the Matching Rules\n\nNow we have:\n\n* 4 matching rules,\n* the keyword (root domain) from the input.\n\nWe can rebuild the matching rules containing the wildcard,\nthen do our comparison.\n\nThe demonstration code is listed below:\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`)) return 1\n  if (db.find(`$rootDomain-*`)) return 2\n  if (db.find(`*.$rootDomain.com`)) return 3\n  if (db.find(`*.$rootDomain.*`)) return 4\n}\n{% endhighlight %}\n\nHowever, we may easily find the potential issue\nin our implementation, just write some test cases, such as:\n\n\n{% highlight JavaScript %}\nmatchAndGetResult('z.a.com') should equal to 3\n{% endhighlight %}\n\nThe result value of this test is `1` actually.\n\nSo we fix the issue:\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`) && domain.startWith(`$rootDomain.`))\n    return 1\n  // ...\n}\n{% endhighlight %}\n\nWe still have 2 cons in this implementation:\n\n* some rules need the `startWith`, while, some need the `contains()`;\n* the number of `if-else` will be increased with the number of matching rules.\n\n\n## Regex\n\nWe consider the 2 cons as:\n\n* how do we match the `begin` or `middle` position of string,\n* how do we provide the generic solution to decrease the number of `if-return`?\n\nRegex is an powerful tool to cover these 2 cons:\n\n* Regex has `^` for `begin`,\n* Regex is generic.\n\nSo we have an alternative solution as below：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n\n  if (var dbResult = db.find(`$rootDomain.*`)) {\n    // build the regex\n    var regex = dbResult\n      .string\n      .replace('*', '[\\\\S]*')\n      .replace('.', '\\\\.')\n\n    if (/^$regex/g).test(domain) {\n      return dbResult.value\n    }\n  }\n}\n{% endhighlight %}\n\n# Write Test Cases At First\n\nThese two solutions are not the best solutions.\n\nIn this scenario, writing the test cases should be\nput as the first priority.\n\n**Simple I/O for Test Cases**\n\nWe can write the test cases quickly after read this\nrequirement. The input and output can be easily figured out\neven we don't have any solution.\n\n**Private Function and Short Implementation**\n\nUsually, this function should be private and the number of code lines is short.\n\n**Different Ideas from Different Programmers**\n\nThere is no need to argue with different solutions.\nJust make sure the solution can pass all the tests.\n\n# Summary\n\n\"Put Tests at First\" doesn't mean:\n\n* Put the tests at first for all the time,\n* No needs to follow the code style or conventions from team or community.\n\n\"Put Tests at First\" just wants to express the idea that there are\nmore things important than the \"Put the Solution at First\":\n\n\n* Make the implementation correctly,\n* Figure out the solution quickly,\n* Cover the cases for further refactor,\n* etc.\n\n# References\n\n[^_guava_int_dn]: [Explanation of `InternetDomainName`](https://github.com/google/guava/wiki/InternetDomainNameExplained)\n","source":"_posts/2017-03-23-use-minimum-matched-string-and-extended-regex-for-wildcard-matching.md","raw":"---\nlayout: post\ntitle: \"Design Test Cases Before Write Implementation If the Former Is Easier\"\ndescription: \"\"\ncategory: \"algo\"\ntags: [\"algorithm\",\"regex\",\"string\",\"pattern\"]\nlang: \"en\"\n---\n{% include JB/setup %}\n\n# Abstract\n{:.no_toc}\n\n> If we want to map the domain according to the defined rules, and：\n>\n> * store the mapping rules in database, such as `*a.com`，\n> * for input `s1.a.com`，it can be matched by this rule, while, `a.com` cannot.\n>\n> This article will introduce two implementations for this requirement, however,\n> in specific case, implementation detail sometimes is not as important as the test cases.\n\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# Requirement\n\nWe have four rules for pattern match：\n\n{% highlight bash %}\na.*       -> 1\na-*       -> 2\n*.a.com   -> 3\n*.a.*     -> 4\n{% endhighlight %}\n\nThe left side of arrow is the wildcard matching rule, while,\nthe right side is the return result when the input parameter matches\nthis rule.\n\nFor instance, the input parameters in the left side will get\nthe result value in right side:\n\n{% highlight bash %}\nz.a.com   -> 3\nz.a.io    -> 4\n{% endhighlight %}\n\n# Implementations\n\nWe cannot use `substring` directly, since we have the wildcard in\nthe rules.\n\nA plain solution is using the idea of `substring` after we extract\nthe main keyword in our parameters (such as `a` in the example above).\n\n\n## `InternetDomainName` for Keyword in Domain\n\nWe can use `InternetDomainName` [^_guava_int_dn] to extract the root domain from the\nparameters, then we can use the keyword (root domain) to build our matching rules\nwhich include the wildcard.\n\nThe function extracting the root domain can be defined as below:\n\n{% highlight JavaScript %}\nfunction getRootDomain(domain) {\n  // ...\n}\n{% endhighlight %}\n\n## Rebuild the Matching Rules\n\nNow we have:\n\n* 4 matching rules,\n* the keyword (root domain) from the input.\n\nWe can rebuild the matching rules containing the wildcard,\nthen do our comparison.\n\nThe demonstration code is listed below:\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`)) return 1\n  if (db.find(`$rootDomain-*`)) return 2\n  if (db.find(`*.$rootDomain.com`)) return 3\n  if (db.find(`*.$rootDomain.*`)) return 4\n}\n{% endhighlight %}\n\nHowever, we may easily find the potential issue\nin our implementation, just write some test cases, such as:\n\n\n{% highlight JavaScript %}\nmatchAndGetResult('z.a.com') should equal to 3\n{% endhighlight %}\n\nThe result value of this test is `1` actually.\n\nSo we fix the issue:\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`) && domain.startWith(`$rootDomain.`))\n    return 1\n  // ...\n}\n{% endhighlight %}\n\nWe still have 2 cons in this implementation:\n\n* some rules need the `startWith`, while, some need the `contains()`;\n* the number of `if-else` will be increased with the number of matching rules.\n\n\n## Regex\n\nWe consider the 2 cons as:\n\n* how do we match the `begin` or `middle` position of string,\n* how do we provide the generic solution to decrease the number of `if-return`?\n\nRegex is an powerful tool to cover these 2 cons:\n\n* Regex has `^` for `begin`,\n* Regex is generic.\n\nSo we have an alternative solution as below：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n\n  if (var dbResult = db.find(`$rootDomain.*`)) {\n    // build the regex\n    var regex = dbResult\n      .string\n      .replace('*', '[\\\\S]*')\n      .replace('.', '\\\\.')\n\n    if (/^$regex/g).test(domain) {\n      return dbResult.value\n    }\n  }\n}\n{% endhighlight %}\n\n# Write Test Cases At First\n\nThese two solutions are not the best solutions.\n\nIn this scenario, writing the test cases should be\nput as the first priority.\n\n**Simple I/O for Test Cases**\n\nWe can write the test cases quickly after read this\nrequirement. The input and output can be easily figured out\neven we don't have any solution.\n\n**Private Function and Short Implementation**\n\nUsually, this function should be private and the number of code lines is short.\n\n**Different Ideas from Different Programmers**\n\nThere is no need to argue with different solutions.\nJust make sure the solution can pass all the tests.\n\n# Summary\n\n\"Put Tests at First\" doesn't mean:\n\n* Put the tests at first for all the time,\n* No needs to follow the code style or conventions from team or community.\n\n\"Put Tests at First\" just wants to express the idea that there are\nmore things important than the \"Put the Solution at First\":\n\n\n* Make the implementation correctly,\n* Figure out the solution quickly,\n* Cover the cases for further refactor,\n* etc.\n\n# References\n\n[^_guava_int_dn]: [Explanation of `InternetDomainName`](https://github.com/google/guava/wiki/InternetDomainNameExplained)\n","slug":"use-minimum-matched-string-and-extended-regex-for-wildcard-matching","published":1,"date":"2017-03-22T16:00:00.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrysl001byxcb95w2k6fj"},{"layout":"post","title":"使用Heap数据结构将Dijkstra最短路算法的时间复杂度降到O(n ln m)","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n> 为了将Dijkstra最短路径算法的时间复杂度从 $$O(nm)$$ 降低到 $$O(n \\ln m)$$ ，\n> 我们可以使用 __heap__ 。不过迭代中的每一次更新heap的过程，我们需要一些技巧来保持heap的有序性。\n> 本文就会指出该技巧，并且解释我在算法代码中的一些[变动] [3]。\n>\n> 本文大部分的解释需要阅读英文版本。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n\n简言之，算法的每次迭代，都是用较小的值去更新原来的heap，\n所以我们应该调用 <code>heap.swim()</code> 来维持heap的有序性。\n\n</div>\n\n<br />\n\n[1]: http://en.wikipedia.org/wiki/Heap_(data_structure)#Applications\t\"Wikipedia\"\n[2]: https://www.coursera.org/course/algo \t\t\t\t\t\t\t\t\"Algorithms: Design and Analysis, Part 1\"\n[3]: https://goo.gl/NssHNy                                              \"Diff of Tango.js\"\n","source":"_posts/zh/2013-11-03-how-to-update-heap-in-dijkstra-shortest-path.md","raw":"---\nlayout: post\ntitle: \"使用Heap数据结构将Dijkstra最短路算法的时间复杂度降到O(n ln m)\"\ndescription: \"\"\ncategory : \"algo\"\ntags: [\"algorithm\", \"graph\", \"dijkstra\", \"heap\"]\nlang: zh\n---\n{% include JB/setup %}\n\n> 为了将Dijkstra最短路径算法的时间复杂度从 $$O(nm)$$ 降低到 $$O(n \\ln m)$$ ，\n> 我们可以使用 __heap__ 。不过迭代中的每一次更新heap的过程，我们需要一些技巧来保持heap的有序性。\n> 本文就会指出该技巧，并且解释我在算法代码中的一些[变动] [3]。\n>\n> 本文大部分的解释需要阅读英文版本。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n\n简言之，算法的每次迭代，都是用较小的值去更新原来的heap，\n所以我们应该调用 <code>heap.swim()</code> 来维持heap的有序性。\n\n</div>\n\n<br />\n\n[1]: http://en.wikipedia.org/wiki/Heap_(data_structure)#Applications\t\"Wikipedia\"\n[2]: https://www.coursera.org/course/algo \t\t\t\t\t\t\t\t\"Algorithms: Design and Analysis, Part 1\"\n[3]: https://goo.gl/NssHNy                                              \"Diff of Tango.js\"\n","slug":"zh-2013-11-03-how-to-update-heap-in-dijkstra-shortest-path","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkrytz004wyxcbk6u1m0cs"},{"layout":"post","title":"迭代版本的Tarjan强连通算法（一）","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n> 上个月我完成了迭代版的Tarjan强连通算法（参见 [Tango.js] [1] ） 。这一个系列的文章将解释这一过程和相关代码——包括迭代图遍历、迭代拓扑排序和Kosaraju强连通算法以及最后的迭代Tarjan算法三部分。本文先讲迭代图遍历。\n>\n> 本文大部分的解释（以及伪代码）需要阅读英文版本。\n\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n\n递归在某些程度上来说，很适合理解（只要找出递推公式），写起来也简单（因为它是递归）。我看过Erlang的一些介绍，这门函数式编程语言，在编译器的支持与优化下，很适合用递归。\n<br />\n<br />\n递归的调用需要栈（Call Stack）来维护。碰到一些栈上有容量限制的语言，比如Python、JavaScript等，要么扩大栈的容量，或者如本系列文章这样，尝试将递归转化成迭代。\n<br />\n<br />\n上面提到的深度优先查找（DFS），转化起来比较容易；而在我们第三部分将要提到的Tarjan强连通算法，转化起来就费了不少的心思（参见 <a href=\"https://github.com/scozv/algo-js/issues/14\" target=\"_blank\">issue #14</a>）。\n<br />\n<br />\n当然，我认为，能够用递归的地方应该尽量用，尤其在函数式编程语言中。本系列的递归到迭代的转化，一来解决JavaScript的函数栈的容量问题，二来可以帮助我理解强连通算法。\n<br />\n<br />\n下一篇我会整理一下拓扑排序的迭代转化，并将其应用到Kosaraju强连通算法中。\n\n</div>\n\n<br />\n\n[1]: https://github.com/scozv/tango\t\"Tango.js\"\n[2]: http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\t\t\"Recursive to Iterative by Tom Moertel\"\n[3]: https://github.com/scozv/algo-js/issues/8\t\t\t\t\t\t\"Issue 8\"\n[4]: {% post_url 2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one %} \"Tarjan, Part II\"\n","source":"_posts/zh/2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero.md","raw":"---\nlayout: post\ntitle: \"迭代版本的Tarjan强连通算法（一）\"\ndescription: \"\"\ncategory : \"algo\"\ntags: [\"algorithm\", \"graph\", \"dfs\"]\nlang: zh\n---\n{% include JB/setup %}\n\n> 上个月我完成了迭代版的Tarjan强连通算法（参见 [Tango.js] [1] ） 。这一个系列的文章将解释这一过程和相关代码——包括迭代图遍历、迭代拓扑排序和Kosaraju强连通算法以及最后的迭代Tarjan算法三部分。本文先讲迭代图遍历。\n>\n> 本文大部分的解释（以及伪代码）需要阅读英文版本。\n\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n\n递归在某些程度上来说，很适合理解（只要找出递推公式），写起来也简单（因为它是递归）。我看过Erlang的一些介绍，这门函数式编程语言，在编译器的支持与优化下，很适合用递归。\n<br />\n<br />\n递归的调用需要栈（Call Stack）来维护。碰到一些栈上有容量限制的语言，比如Python、JavaScript等，要么扩大栈的容量，或者如本系列文章这样，尝试将递归转化成迭代。\n<br />\n<br />\n上面提到的深度优先查找（DFS），转化起来比较容易；而在我们第三部分将要提到的Tarjan强连通算法，转化起来就费了不少的心思（参见 <a href=\"https://github.com/scozv/algo-js/issues/14\" target=\"_blank\">issue #14</a>）。\n<br />\n<br />\n当然，我认为，能够用递归的地方应该尽量用，尤其在函数式编程语言中。本系列的递归到迭代的转化，一来解决JavaScript的函数栈的容量问题，二来可以帮助我理解强连通算法。\n<br />\n<br />\n下一篇我会整理一下拓扑排序的迭代转化，并将其应用到Kosaraju强连通算法中。\n\n</div>\n\n<br />\n\n[1]: https://github.com/scozv/tango\t\"Tango.js\"\n[2]: http://blog.moertel.com/posts/2013-05-11-recursive-to-iterative.html\t\t\"Recursive to Iterative by Tom Moertel\"\n[3]: https://github.com/scozv/algo-js/issues/8\t\t\t\t\t\t\"Issue 8\"\n[4]: {% post_url 2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one %} \"Tarjan, Part II\"\n","slug":"zh-2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu1004xyxcb9ny5rpv1"},{"layout":"post","title":"迭代版本的Tarjan强连通算法（二）","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n> 上一次，我们提到了迭代深度优先查找（DFS）——用一个叫frontier的栈来保持访问顺序。今天，我们将看到迭代拓扑排序以及Karasoju强连通算法。\n>\n>\n> 今天的重点在于，我们会增加一个栈，名为head。当父节点的所有后代都访问过之后，应该满足head.peek() === frontier.peek()。\n>\n> 本文大部分的解释（以及伪代码）需要阅读英文版本。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n拓扑排序的时候，需要记录当前访问的点，是从哪个父节点下来的。所以我们增加了一个叫head的栈，用来记录这个信息——当两个栈（frontier和head）的peek元素相同时，就意味着，父节点下面已经没有节点可以继续访问了，此时相当于一层递归的DFS结束。\n<br />\n<br />\n需要留意的是，同一个节点可能来自不同的父节点：比如有两条边3 &#8594; 2和5 &#8594; 2。那么节点2可能有两次push进frontier，所以在处理的时候需要留意节点的状态。显而易见地，如果某一个节点已经被标记了拓扑顺序，那么它就不应该再次被标记，也就是说，它就不应该再次进入head栈。\n</div>\n\n<br />\n\n[1]: https://www.coursera.org/course/algo          \"Online course by Tim Roughgarden\"\n[2]: https://github.com/scozv/algo-js/issues/20        \"Issue 20\"\n[3]: https://github.com/scozv/tango  \"Tango.js\"\n[4]: {% post_url 2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero %} \"Tarjan, Part I\"\n","source":"_posts/zh/2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one.md","raw":"---\nlayout: post\ntitle: \"迭代版本的Tarjan强连通算法（二）\"\ndescription: \"\"\ncategory: \"algo\"\ntags: [\"algorithm\", \"graph\", \"scc\"]\nlang: zh\n---\n{% include JB/setup %}\n\n> 上一次，我们提到了迭代深度优先查找（DFS）——用一个叫frontier的栈来保持访问顺序。今天，我们将看到迭代拓扑排序以及Karasoju强连通算法。\n>\n>\n> 今天的重点在于，我们会增加一个栈，名为head。当父节点的所有后代都访问过之后，应该满足head.peek() === frontier.peek()。\n>\n> 本文大部分的解释（以及伪代码）需要阅读英文版本。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n<div class=\"post-content lang zh-cn\">\n拓扑排序的时候，需要记录当前访问的点，是从哪个父节点下来的。所以我们增加了一个叫head的栈，用来记录这个信息——当两个栈（frontier和head）的peek元素相同时，就意味着，父节点下面已经没有节点可以继续访问了，此时相当于一层递归的DFS结束。\n<br />\n<br />\n需要留意的是，同一个节点可能来自不同的父节点：比如有两条边3 &#8594; 2和5 &#8594; 2。那么节点2可能有两次push进frontier，所以在处理的时候需要留意节点的状态。显而易见地，如果某一个节点已经被标记了拓扑顺序，那么它就不应该再次被标记，也就是说，它就不应该再次进入head栈。\n</div>\n\n<br />\n\n[1]: https://www.coursera.org/course/algo          \"Online course by Tim Roughgarden\"\n[2]: https://github.com/scozv/algo-js/issues/20        \"Issue 20\"\n[3]: https://github.com/scozv/tango  \"Tango.js\"\n[4]: {% post_url 2013-11-10-how-to-write-iterative-tarjan-scc-algorithm-part-zero %} \"Tarjan, Part I\"\n","slug":"zh-2013-11-23-how-to-write-iterative-tarjan-scc-algorithm-part-one","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu3004zyxcbkj5n5llo"},{"layout":"post","title":"将网页版的QUnit.js测试移植到Node.js","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n>  本文描述了我让代码在浏览器和Node.js两边都能运行的过程，略属娱乐。\n> 因为就项目 [Tango.js] [2] 而言，我认为，重点在算法（ *Algo*rithm ）。\n> 至于引入大文本输入测试（参见 [issue #18] [1] ），是为了保证算法的正确和高效，以及今后的重构，\n> 当然这也很重要。引入持续集成，是尽可能想让一切都是自动化。\n>\n> 对于已经完成了成套测试的网页版QUnit.js环境，要想移至到Node.js上运行，\n> 并且重构的代码要尽可能的少，测试代码最好不要有任何变化。\n>\n> 需要注意，全局变量在浏览器和Node.js的环境下的名称不一样，完整的迁移\n> 方法请参考英文版本。\n>\n> （2016年更新）让我们使用Webpack吧。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n浏览器下，全局变量叫  `window`，大量的代码可能使用了这个变量:\n\n    (function (sorting, undefined) {\n        sorting.mergeSort = function () {};\n    })(window.Sorting = window.Sorting || {})\n\nNode.js下面，全局变量叫`global` ，我们可以赋值（参考 [`./qunit/q.js`] [3]）：\n\n    window = global;\n\n    require('../src/t.js')\n    require('../src/x.array.js');\n    require('../src/sorting.js');\n\n更多内容，请参考英文版本。\n\n[1]: https://github.com/scozv/algo-js/issues/18 \"issue #18\"\n[2]: https://github.com/scozv/tango \"Tango.js\"\n[3]: https://github.com/scozv/algo-js/blob/master/qunit/q.js \"a file named q.js\"\n[4]: https://github.com/kof/node-qunit \"node-qunit, Port of QUnit unit testing framework to nodejs\"\n[5]: http://gruntjs.com/getting-started#package.json \"grunt configuration on package.json\"\n[6]: https://npmjs.org/package/grunt-node-qunit \"Grunt task running node-qnuit\"\n[7]: https://drone.io/ \"drone.io\"\n[8]: https://github.com/joyent/node/issues/3911 \"issue #3911\"\n","source":"_posts/zh/2013-12-21-how-to-make-code-of-algojs-run-in-nodejs-as-in-browser.md","raw":"---\nlayout: post\ntitle: \"将网页版的QUnit.js测试移植到Node.js\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"ci\", \"unit\", \"grunt\"]\nlang: zh\n---\n{% include JB/setup %}\n\n>  本文描述了我让代码在浏览器和Node.js两边都能运行的过程，略属娱乐。\n> 因为就项目 [Tango.js] [2] 而言，我认为，重点在算法（ *Algo*rithm ）。\n> 至于引入大文本输入测试（参见 [issue #18] [1] ），是为了保证算法的正确和高效，以及今后的重构，\n> 当然这也很重要。引入持续集成，是尽可能想让一切都是自动化。\n>\n> 对于已经完成了成套测试的网页版QUnit.js环境，要想移至到Node.js上运行，\n> 并且重构的代码要尽可能的少，测试代码最好不要有任何变化。\n>\n> 需要注意，全局变量在浏览器和Node.js的环境下的名称不一样，完整的迁移\n> 方法请参考英文版本。\n>\n> （2016年更新）让我们使用Webpack吧。\n\n<!--more-->\n\n<a name=\"pi\">\n</a>\n\n浏览器下，全局变量叫  `window`，大量的代码可能使用了这个变量:\n\n    (function (sorting, undefined) {\n        sorting.mergeSort = function () {};\n    })(window.Sorting = window.Sorting || {})\n\nNode.js下面，全局变量叫`global` ，我们可以赋值（参考 [`./qunit/q.js`] [3]）：\n\n    window = global;\n\n    require('../src/t.js')\n    require('../src/x.array.js');\n    require('../src/sorting.js');\n\n更多内容，请参考英文版本。\n\n[1]: https://github.com/scozv/algo-js/issues/18 \"issue #18\"\n[2]: https://github.com/scozv/tango \"Tango.js\"\n[3]: https://github.com/scozv/algo-js/blob/master/qunit/q.js \"a file named q.js\"\n[4]: https://github.com/kof/node-qunit \"node-qunit, Port of QUnit unit testing framework to nodejs\"\n[5]: http://gruntjs.com/getting-started#package.json \"grunt configuration on package.json\"\n[6]: https://npmjs.org/package/grunt-node-qunit \"Grunt task running node-qnuit\"\n[7]: https://drone.io/ \"drone.io\"\n[8]: https://github.com/joyent/node/issues/3911 \"issue #3911\"\n","slug":"zh-2013-12-21-how-to-make-code-of-algojs-run-in-nodejs-as-in-browser","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu40052yxcblgxcm96f"},{"layout":"post","title":"对Eric Lippert所著的Monads系列文章的综述","description":"An Short Literature Review on Monads in C#","lang":"zh","_content":"\n{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n\n> 本文主要对几篇讨论Monad的文献进行综述，文中的大部分代码都来自参考文献（我会指明参考来源）。本文有几处地方提出了几个思考题，这些思考题也来自参考文献，建议先尝试写写这些思考题，再去阅读参考文献。这一份综述尝试抛开函数编程的背景，去看看我们平时已经在使用但却没有留意的一些Monad。文章主要涉及到C#这门语言，但是不同的语言背景并不会有太多的影响。\n>\n> 我推荐阅读参考文献中的英文原文。虽然中文意合英文形合[^G08]，但是本文的综述将使用中文，除了部分程序代码，和一些术语、人名 that 我不打算翻译的。\n>\n> 本文对Haskell和.NET中异步Task的理解不够，如果需要了解Task这个Monad的话，请参考Stephen Toub的文章[^ST13]。另外，本文对Monad的综述都建立在强类型系统的基础上，关于JavaScript中的Monad，请观看Douglas Crockford的演讲。Douglas说“假如你理解了Monad，你就失去了用语言来解释它的能力”[^DC13]。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 一个略微复杂的思考题\n假如我们有如下这样一个委托，称其为K：\n\n\tdelegate Answer K<T,Answer>(Func<T,Answer> k);\n\n其中，T、Answer都是泛型类型。这个委托等价于：\n\n\tFunc<Func<T, Answer>, Answer> K;\n\n也就是说，K这个类型是一类函数签名，这类函数返回一个值Answer，接收一个参数，而接收的参数又是一类函数Func<T, Answer\\>。\n\n另外，给出K的构造方法：\n\n\tpublic static K<T, Answer> ToContinuation<T, Answer>(this T value)\n\t{\n\t\treturn (Func<T, Answer> solve) => solve(value);\n\t}\n\n现在的问题是，参考K的构造方法，如何实现下面这个方法，保证它能够编译通过，即方法的返回类型和方法签名匹配？\n\n\tpublic static K<U, Answer> SelectMany<T, U, Answer>(this K<T, Answer> m, Func<T, K<U, Answer>> k)\n\n这个问题来自Wes Dyer文章的最后一部分[^WD08]，我认为，如果能在看懂题意的基础上，尝试写一写内部实现，将有助于理解Monad。如果对题目有些费解，请先往下看。本文的最后会再次提到这个题目。\n\n# 身边的几个泛型类\nEric Lippert在他的Monad系列[^EL13]中，给出了如下几个泛型类，并借助这几个泛型类，由浅入深地揭示了Monad的性质。\n\n\tNullable<T>\n\tIEnumerable<T>\n\tLazy<T>\n\tOnDemand<T>\n\tTask<T>\n\n其中，OnDemand<T\\>本质上是Func<T\\>，指的是一类无参有返回值的函数，Eric这样做，是为了和更一般的Func<V, U\\>加以区别。\n\n这几个泛型类的特点是，它们都赋予了T新的能力：\n\n* Nullable<T\\> 使得T可空；\n* IEnumerable<T\\> 使得T可以被遍历；\n* Lazy<T\\> 使得T只在第一次需要的时候才计算，之后都从cache中获取；\n* OnDemand<T\\> 使得T只有在需要的时候才被调用；\n* Task<T\\> 使得...\n\n因为这些泛型类扩展了T的能力，所以，我们称它们为Amplifier，对于这一类扩展后的类型，我们统一用M<T\\>来表示。\n\n# 数学理论中的复合映射\n抛开计算机语言或者函数编程的思维，我们先来回顾一下高等数学中复合函数的概念。为了和计算机程序设计中的函数加以区别，我们使用映射这个术语。\n\n给定如下两个映射：\n\n$$g(x) =  x^2-4x, f(x) = \\ln (x+4)$$\n\n令复合映射：\n\n$$p(x) = f(g(x)) $$\n\n符号计算得知：\n\n$$ p(x)= \\ln (x^2-4x+4) = \\ln [(x-2)^2] = 2 \\ln (x-2) $$\n\n我们可以看到，复合映射之后，新的映射计算过程被重新组合，我们并不需要先计算出$$x^2-4x$$的值，再代入第二层函数。\n\n我们思考，假如：\n\n0. 令$$x=e+2=4.718281828459045$$，我们是计算$$(4.718281828459045)^2-4*4.718281828459045$$容易呢，还是计算$$2 \\ln (e+2-2)=2\\ln e = 2$$容易？\n1. 或者，运算器不支持平方运算，却有一张对数表，那么我们通过符号运算化简得到$$p(x)$$，才能计算出结果；\n2. 又或者，在程序语言中，传入的参数是Int.MaxValue，平方运算很可能超出存储的范围，那么我们也最好到最后再去用新的映射加以计算。\n\n所以，有些事儿不要急着去处理。后面我们还会看到这句话。\n\n# 从复合映射到复合函数\nWes Dyer在他的文章中用程序语言的方式来描述复合映射这样的概念[^WD08]，Wes Dyer首先给出对一般类型T的函数复合：\n\n\tpublic static Func<T, V> Compose<T, U, V>(this Func<U, V> f, Func<T, U> g)\n\t{\n\t    return x => f(g(x));\n\t}\n\n在前面的小节里，我们提到，诸如Nullable<T\\>这些泛型类，它们扩展了T的能力，对于这一类扩展后的类型，我们统一用M<T>来表示。\n\n如果我们用M<V\\>和M<U\\>来替换上面的签名，比如用Nullable<V\\>和Nullable<U\\>来替换：\n\n\tpublic static Func<T, Nullable<V>> Compose<T, U, V>(this Func<U, Nullable<V>> f, Func<T, Nullable<U>> g)\n\t{\n\t    return x => f(g(x)); // 编译错误，g(x)返回一个Nullable<U>，但是f只接收U作为传入参数\n\t}\n\n简单的替换导致编译错误，因此Wes Dyer在文中引入了一个中间函数Bind，用来解决值域属于M<T\\>复合函数的绑定：\n\n\tpublic static M<V> Bind<U, V>(this M<U> m, Func<U, M<V>> k);\n\n\tpublic static Func<T, M<V>> Compose<T, U, V>(this Func<U, M<V>> f, Func<T, M<U>> g)\n\t{\n\t    return x => Bind(g(x), f);\n\t}\n\n那么，前文提到的那些M<T\\>：Nullable<T\\>, Lazy<T\\>, OnDemand<T\\>, Task<T\\>, IEnumerable<T\\>，这些类型的Bind函数分别应该如何实现呢？\n\n# 一个简单的加法运算\n\n扩展了一个T之后，我们现在有了增强版的类型M<T\\>。一个类型，总会有一些动态的行为。Eric Lippert在他的Monads系列中的第三部分，为上述的一些M<int\\>增加了一个加法运算[^EL13-3]：\n\n\tstatic Nullable<int> AddOne(Nullable<int> nullable)\n\t{\n\t  if (nullable.HasValue)\n\t  {\n\t    int unwrapped = nullable.Value;\n\t    int result = unwrapped + 1;\n\t    return CreateSimpleNullable(result);\n\t  }\n\t  else  \n\t    return new Nullable<int>();\n\t}\n\n以及OnDemand<T\\>的加法运算：\n\n\tstatic OnDemand<int> AddOne(OnDemand<int> onDemand)\n\t{\n\t  return ()=>\n\t  {\n\t    int unwrapped = onDemand();\n\t    int result = unwrapped + 1;\n\t    return result;\n\t  };\n\t}\n\n注意，我们前面提到，有些事儿不要着急去处理，OnDemand<int\\>的加法运算为什么不这样写呢？\n\n\t// 不要采用这样的实现方式\n\tstatic OnDemand<int> AddOne(OnDemand<int> onDemand)\n\t{\n\t  int unwrapped = onDemand();\n\t  int result = unwrapped + 1;\n\t  return ()=>{return result;}\n\t}\n\n因为我们过早地计算了最初的onDemand承载的值。\n\n现在，参考上面两个实现，请写出其它M<T\\>的加法运算：\n\n\tstatic Lazy<int> AddOne(Lazy<int> lazy)\n\tstatic IEnumerable<int> AddOne(IEnumerable<int> sequence)\n\tasync static Task<int> AddOne(Task<int> task)\n\n答案在Eric的Monads系列中，请阅读参考文献。\n\n# 更一般化的加法运算\n如何我们仔细地阅读上面的两个加法运算，我们会发现，加法这个操作，只出现在一个地方：\n\n\tint result = unwrapped + 1;\n\nEric在他的Monads系列的第四部分，将加法运算更一般化了[^EL13-4]：\n\n\tstatic Nullable<R> ApplyFunction<A, R>(Nullable<A> nullable, Func<A, R> function)\n\t{\n\t  if (nullable.HasValue)\n\t  {\n\t    A unwrapped = nullable.Value;\n\t    R result = function(unwrapped);\n\t    return new Nullable<R>(result);\n\t  }\n\t  else\n\t    return new Nullable<R>();\n\t}\n\n    // 使用ApplyFunction构造具体的复合函数\n\tstatic Nullable<int> AddOne(Nullable<int> nullable)\n\t{\n\t  return ApplyFunction(nullable, (int x) => x + 1);\n\t}\n\n我们可以看到，加法运算只是ApplyFunction的一个特例。\n\n同样的，参考上面的实现，请思考其它几个M<T\\>的ApplyFunction应该如何实现：\n\n\tstatic Lazy<R> ApplyFunction<A, R>(Lazy<A> lazy, Func<A, R> function);\n\tstatic OnDemand<R> ApplyFunction<A, R>(OnDemand<A> onDemand, Func<A, R> function);\n\tstatic IEnumerable<R> ApplyFunction<A, R>(IEnumerable<A> sequence, Func<A, R> function);\n\tasync static Task<R> ApplyFunction<A, R>(Task<A> sequence, Func<A, R> function);\n\n# 平面化\n设想，我们有如下一个方法，它计算一个整数的对数，当x小于零的时候，$$\\log$$函数没有意义，将返回一个空：\n\n    Nullable<int> SaftLog(int x) {return x > 0 ? Math.Log(x) : null;}\n\n如果把这个函数传给上一节给出的ApplyFunction，会有什么问题呢？\n\n    static Nullable<R> ApplyFunction<A, R>(Nullable<A> nullable, Func<A, R> function);\n\n通过依次比对类型签名，我们发现，R对应的是Nullable<int\\>，也就是说，ApplyFunction返回的类型是：\n\n    Nullable<Nullable<int>>\n\n首先，这在C#是不合法的，Nullable只能用在值类型上面。其次，就算合法，但也过多嵌套。同样的，Lazy<Lazy<int\\>\\>，OnDemand<OnDemand<T\\>\\>等都是不合适的。我们需要将其平面化。\n\nEric在他Monads系列的第五部分给出了新的一个函数签名[^EL13-5]：\n\n    static Nullable<R> ApplySpecialFunction<A, R>(Nullable<A> nullable, Func<A, Nullable<R>> function)\n\n回忆，在复合函数那一小节，Wes Dyer给出了如下的函数签名：\n\n    public static M<V> Bind<U, V>(this M<U> m, Func<U, M<V>> k);\n\n我们看到，这两个签名本质上是相同的。\n\n同样的，作为辅助思考的练习，请写出如下签名的实现：\n\n    static Nullable<R> ApplySpecialFunction<A, R>(Nullable<A> nullable, Func<A, Nullable<R>> function);\n    static OnDemand<R> ApplySpecialFunction<A, R>(OnDemand<A> onDemand, Func<A, OnDemand<R>> function);\n    static Lazy<R> ApplySpecialFunction<A, R>(Lazy<A> lazy, Func<A, Lazy<R>> function);\n    static async Task<R> ApplySpecialFunction<A, R>(Task<A> task, Func<A, Task<R>> function);\n    static IEnumerable<R> ApplySpecialFunction<A, R>(IEnumerable<A> sequence, Func<A, IEnumerable<R>> function);\n\n# Monad的历史\nWes Dyer在他的文章中简述了Monad的历史[^WD08]。他指出，Monad这个概念来自理论数学的范畴论，Eugenio Moggi在其文章《Notions of computation and monads》将Monad引入了计算机科学领域。Philip Wadler在其著作《The essence of functional programming》探讨了Monad的应用。Haskell中更是大量的使用了Monad。\n\n这样一来，使得我们一说到Moand就和函数编程扯上关系。就好比面向对象、UML的特性容易表达设计模式那样，我们常常一说到设计模式，就往OOP上面靠[^CH13]。\n\n要知道，函数编程里面的匿名函数λ表达式，也是从理论数学中发展过来的[^WL14]。Eric也多次提及LINQ的设计者之一Erik Meijer正是Haskell的设计参与者，比如他在StackOverflow上对LINQ与Haskell关系的回答[^EL11]。\n\n# Monad的性质\nEric指出Monad是类型（Type）的一种设计模式，是对现有Type的能力的一种放大（amplifier），或者是对T的一种wrapper，借助之前提到的几个M<T\\>，我们很容易地设计出一种“asynchronously-computed sequence of nullable bytes”[^EL13-2]类型：\n\n    Task<IEnumerable<Nullable<int>>>\n\n所以我们需要一个构造器将T转化为M<T\\>，这就是下面我们会看到的Unit。\n\n另外，Moanded类型还需要定义一个操作，用来复合函数。该放大器不会改变底层（Underlying）类型的原有特性。更重要的是，诸如OnDemand的复合，我们只有在最后invoke函数的时候，才去计算，不能过早。诸如IEnumerable<T\\>的复合，只有最终需要内部元素的时候，才去遍历，不能过早。诸如IQueryable<T\\>，只有最终需要拿回查询结果的时候，再去连接数据源，也不能过早。\n\n一个直观的例子就是：\n\n    // C#\n    IEnumerabe<T>.Select().Where().FirstOrDefault();\n    // Scala\n    Seq[T].map().filter().firstOrDefault();\n\n我们可以看到，在这样一条复合运算中，最终只需要一个值，如果数组很长，映射的运算非常耗时，过早地遍历数组显然不是明智之举。是的，LINQ的延迟运算，就是基于这样的思想。\n\nEric在文中提出[^EL13-8]：\n\n> You might have noticed that the asynchronous, lazy, on-demand and sequence monads all have an interesting common property: when you apply a function to any of these monads, what you get back is an object that will perform that function in the future. Essentially, the bind function takes an immutable workflow and its subsequent step, and returns you the resulting new workflow. The bind operator does not execute the workflow; it makes a new workflow out of an old one.\n\n这个复合操作就是我们下面看到的Bind，在C#中，对应的函数名为SelectMany，在Scala中，对应的叫flatMap。\n\nWes Dyer表明，如果放大用Unit来构造，复合用Bind来表示的话，我们需要如下两个签名[^WD08]：\n\n    static M<T>  Unit<T>(T value);\n    static M<R>  Bind<T, R>(M<T>, Func<T, M<R>>)\n\n并满足如下的三个法则：\n\n1.  Left Identity\n\n        Bind(Unit(e), k) = k(e)\n\n2.  Right Identity\n\n        Bind(m, Unit) = m\n\n3.  结合律\n\n        Bind(m, x => Bind(k(x), y => h(y)) = Bind(Bind(m, x => k(x)), y => h(y))\n\n\n# 开头的思考题\n\n文章开头的练习题来自Wes Dyer的文献，那道题让我们习惯函数的返回值也是一个函数。\n\n接下来，让我们来看Eric给出的思考题，这个思考题让我们尝试去设计一个Monad。\n\n正如上一节所说，C#的Bind取名为SelectMany，给定实现[^EL13-10]：\n\n    static IEnumerable<R> SelectMany<A, R>(this IEnumerable<A> sequence, Func<A, IEnumerable<R>> function)\n    {\n      foreach(A outerItem in sequence)\n        foreach(R innerItem in function(outerItem))\n          yield return innerItem;\n    }\n\n使用SelectMany，请设计如下的实现：\n\n    static IEnumerable<A> Where(this IEnumerable<A> source, Func<A, boolean> prediction);\n    static IEnumerable<R> Selcect(this IEnumerable<A> source, Func<A, R> map);\n\n借助SelectMany、Where和Select，我们可以实现更复杂的Join操作，请练习（暂时不要考虑时间复杂度效率的问题）：\n\n    public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(\n        this IEnumerable<TOuter> outer,\n        IEnumerable<TInner> inner,\n        Func<TOuter, TKey> outerKeySelector,\n        Func<TInner, TKey> innerKeySelector,\n        Func<TOuter, TInner, TResult> resultSelector,\n        IEqualityComparer<TKey> comparer\n    )\n\n我强烈建议在查阅文献之前，动手写写这三个实现，对我们理解Monad有很大的帮助。我自己也尝试写过一遍，你可以参考我的Gist。\n\n# 总结\nMonad是一种类型的设计模式，用来放大现有Type的能力。需要满足一些法则，并且向Monad上面添加操作流的时候，我们不要提早运行，而丢失了Monad特性。\n\n添加操作类的过程，在Haskell中叫Bind，在C#中叫SelectMany，在Scala中叫flatMap。这样，对于凡是实现了这些签名的类，就可以在For Comperhensoin中使用了，Eric在Monad系列的第十二部分，对此有详细的阐述，同时还讨论了如何解决SelectMany多重嵌套导致的效率低下问题。\n\n正如Eric指出的那样，Monad是类型的一种设计模式。所以Scala的Try[T]类，Rx库（rx.codeplex.com）中的IObservable<T\\>，还有LINQ，都是基于这样的设计模式。\n\n最后，再次推荐阅读参考文献的英文原文。\n\n# 参考文献\n\n[^EL13]: Eric Lippert. [Monads](http://ericlippert.com/category/monads)[J/OL] 2013\n\n[^EL13-2]: Eric Lippert. [Monads, Part 2](http://ericlippert.com/2013/02/25/monads-part-two/)[J/OL] 2013.02.25\n\n[^EL13-3]: Eric Lippert. [Monads, Part 3](http://ericlippert.com/2013/02/28/monads-part-three/)[J/OL] 2013.02.28\n\n[^EL13-4]: Eric Lippert. [Monads, Part 4](http://ericlippert.com/2013/03/04/monads-part-four/)[J/OL] 2013.03.04\n\n[^EL13-5]: Eric Lippert. [Monads, Part 5](http://ericlippert.com/2013/03/07/monads-part-five/)[J/OL] 2013.03.07\n\n[^EL13-8]: Eric Lippert. [Monads, Part 8](http://ericlippert.com/2013/03/18/monads-part-eight/)[J/OL] 2013.03.18\n\n[^EL13-10]: Eric Lippert. [Monads, Part 10](http://ericlippert.com/2013/03/25/monads-part-ten/)[J/OL] 2013.03.25\n\n[^EL11]: Eric Lippert. [Answer to _Are there any connections between Haskell and LINQ?_](http://stackoverflow.com/a/4683716)[EB/OL]. StackOverflow.com 2011.01.13\n\n[^WD08]: Wes Dyer. [The Marvels of Monads](http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx)[J/OL] 2008\n\n[^DC13]: Douglas Crockford. Monads and Gonads, in the Speech named _JavaScript the Good Parts_\n\n[^ST13]: Stephen Toub. [Tasks, Monads, and LINQ](http://blogs.msdn.com/b/pfxteam/archive/2013/04/03/tasks-monads-and-linq.aspx)[J/OL] 2013\n\n[^CH13]: 陈浩. [从面向对象的设计模式看软件设计](http://coolshell.cn/articles/8961.html)[J/OL] 2013\n\n[^WL14]: 维基百科. [λ演算](https://en.wikipedia.org/wiki/Lambda_calculus)[J/OL] 2014\n\n[^G08]: 郭富强. 意合形合的汉英对比研究[D]. 华东师范大学 2006\n","source":"_posts/zh/2014-06-20-understand-monads-in-c.md","raw":"---\nlayout: post\ntitle: \"对Eric Lippert所著的Monads系列文章的综述\"\ndescription: \"An Short Literature Review on Monads in C#\"\ncategory: \"pattern\"\ntags: [\"linq\", \"monad\", \"scala\"]\nlang: zh\n---\n\n{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n\n> 本文主要对几篇讨论Monad的文献进行综述，文中的大部分代码都来自参考文献（我会指明参考来源）。本文有几处地方提出了几个思考题，这些思考题也来自参考文献，建议先尝试写写这些思考题，再去阅读参考文献。这一份综述尝试抛开函数编程的背景，去看看我们平时已经在使用但却没有留意的一些Monad。文章主要涉及到C#这门语言，但是不同的语言背景并不会有太多的影响。\n>\n> 我推荐阅读参考文献中的英文原文。虽然中文意合英文形合[^G08]，但是本文的综述将使用中文，除了部分程序代码，和一些术语、人名 that 我不打算翻译的。\n>\n> 本文对Haskell和.NET中异步Task的理解不够，如果需要了解Task这个Monad的话，请参考Stephen Toub的文章[^ST13]。另外，本文对Monad的综述都建立在强类型系统的基础上，关于JavaScript中的Monad，请观看Douglas Crockford的演讲。Douglas说“假如你理解了Monad，你就失去了用语言来解释它的能力”[^DC13]。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 一个略微复杂的思考题\n假如我们有如下这样一个委托，称其为K：\n\n\tdelegate Answer K<T,Answer>(Func<T,Answer> k);\n\n其中，T、Answer都是泛型类型。这个委托等价于：\n\n\tFunc<Func<T, Answer>, Answer> K;\n\n也就是说，K这个类型是一类函数签名，这类函数返回一个值Answer，接收一个参数，而接收的参数又是一类函数Func<T, Answer\\>。\n\n另外，给出K的构造方法：\n\n\tpublic static K<T, Answer> ToContinuation<T, Answer>(this T value)\n\t{\n\t\treturn (Func<T, Answer> solve) => solve(value);\n\t}\n\n现在的问题是，参考K的构造方法，如何实现下面这个方法，保证它能够编译通过，即方法的返回类型和方法签名匹配？\n\n\tpublic static K<U, Answer> SelectMany<T, U, Answer>(this K<T, Answer> m, Func<T, K<U, Answer>> k)\n\n这个问题来自Wes Dyer文章的最后一部分[^WD08]，我认为，如果能在看懂题意的基础上，尝试写一写内部实现，将有助于理解Monad。如果对题目有些费解，请先往下看。本文的最后会再次提到这个题目。\n\n# 身边的几个泛型类\nEric Lippert在他的Monad系列[^EL13]中，给出了如下几个泛型类，并借助这几个泛型类，由浅入深地揭示了Monad的性质。\n\n\tNullable<T>\n\tIEnumerable<T>\n\tLazy<T>\n\tOnDemand<T>\n\tTask<T>\n\n其中，OnDemand<T\\>本质上是Func<T\\>，指的是一类无参有返回值的函数，Eric这样做，是为了和更一般的Func<V, U\\>加以区别。\n\n这几个泛型类的特点是，它们都赋予了T新的能力：\n\n* Nullable<T\\> 使得T可空；\n* IEnumerable<T\\> 使得T可以被遍历；\n* Lazy<T\\> 使得T只在第一次需要的时候才计算，之后都从cache中获取；\n* OnDemand<T\\> 使得T只有在需要的时候才被调用；\n* Task<T\\> 使得...\n\n因为这些泛型类扩展了T的能力，所以，我们称它们为Amplifier，对于这一类扩展后的类型，我们统一用M<T\\>来表示。\n\n# 数学理论中的复合映射\n抛开计算机语言或者函数编程的思维，我们先来回顾一下高等数学中复合函数的概念。为了和计算机程序设计中的函数加以区别，我们使用映射这个术语。\n\n给定如下两个映射：\n\n$$g(x) =  x^2-4x, f(x) = \\ln (x+4)$$\n\n令复合映射：\n\n$$p(x) = f(g(x)) $$\n\n符号计算得知：\n\n$$ p(x)= \\ln (x^2-4x+4) = \\ln [(x-2)^2] = 2 \\ln (x-2) $$\n\n我们可以看到，复合映射之后，新的映射计算过程被重新组合，我们并不需要先计算出$$x^2-4x$$的值，再代入第二层函数。\n\n我们思考，假如：\n\n0. 令$$x=e+2=4.718281828459045$$，我们是计算$$(4.718281828459045)^2-4*4.718281828459045$$容易呢，还是计算$$2 \\ln (e+2-2)=2\\ln e = 2$$容易？\n1. 或者，运算器不支持平方运算，却有一张对数表，那么我们通过符号运算化简得到$$p(x)$$，才能计算出结果；\n2. 又或者，在程序语言中，传入的参数是Int.MaxValue，平方运算很可能超出存储的范围，那么我们也最好到最后再去用新的映射加以计算。\n\n所以，有些事儿不要急着去处理。后面我们还会看到这句话。\n\n# 从复合映射到复合函数\nWes Dyer在他的文章中用程序语言的方式来描述复合映射这样的概念[^WD08]，Wes Dyer首先给出对一般类型T的函数复合：\n\n\tpublic static Func<T, V> Compose<T, U, V>(this Func<U, V> f, Func<T, U> g)\n\t{\n\t    return x => f(g(x));\n\t}\n\n在前面的小节里，我们提到，诸如Nullable<T\\>这些泛型类，它们扩展了T的能力，对于这一类扩展后的类型，我们统一用M<T>来表示。\n\n如果我们用M<V\\>和M<U\\>来替换上面的签名，比如用Nullable<V\\>和Nullable<U\\>来替换：\n\n\tpublic static Func<T, Nullable<V>> Compose<T, U, V>(this Func<U, Nullable<V>> f, Func<T, Nullable<U>> g)\n\t{\n\t    return x => f(g(x)); // 编译错误，g(x)返回一个Nullable<U>，但是f只接收U作为传入参数\n\t}\n\n简单的替换导致编译错误，因此Wes Dyer在文中引入了一个中间函数Bind，用来解决值域属于M<T\\>复合函数的绑定：\n\n\tpublic static M<V> Bind<U, V>(this M<U> m, Func<U, M<V>> k);\n\n\tpublic static Func<T, M<V>> Compose<T, U, V>(this Func<U, M<V>> f, Func<T, M<U>> g)\n\t{\n\t    return x => Bind(g(x), f);\n\t}\n\n那么，前文提到的那些M<T\\>：Nullable<T\\>, Lazy<T\\>, OnDemand<T\\>, Task<T\\>, IEnumerable<T\\>，这些类型的Bind函数分别应该如何实现呢？\n\n# 一个简单的加法运算\n\n扩展了一个T之后，我们现在有了增强版的类型M<T\\>。一个类型，总会有一些动态的行为。Eric Lippert在他的Monads系列中的第三部分，为上述的一些M<int\\>增加了一个加法运算[^EL13-3]：\n\n\tstatic Nullable<int> AddOne(Nullable<int> nullable)\n\t{\n\t  if (nullable.HasValue)\n\t  {\n\t    int unwrapped = nullable.Value;\n\t    int result = unwrapped + 1;\n\t    return CreateSimpleNullable(result);\n\t  }\n\t  else  \n\t    return new Nullable<int>();\n\t}\n\n以及OnDemand<T\\>的加法运算：\n\n\tstatic OnDemand<int> AddOne(OnDemand<int> onDemand)\n\t{\n\t  return ()=>\n\t  {\n\t    int unwrapped = onDemand();\n\t    int result = unwrapped + 1;\n\t    return result;\n\t  };\n\t}\n\n注意，我们前面提到，有些事儿不要着急去处理，OnDemand<int\\>的加法运算为什么不这样写呢？\n\n\t// 不要采用这样的实现方式\n\tstatic OnDemand<int> AddOne(OnDemand<int> onDemand)\n\t{\n\t  int unwrapped = onDemand();\n\t  int result = unwrapped + 1;\n\t  return ()=>{return result;}\n\t}\n\n因为我们过早地计算了最初的onDemand承载的值。\n\n现在，参考上面两个实现，请写出其它M<T\\>的加法运算：\n\n\tstatic Lazy<int> AddOne(Lazy<int> lazy)\n\tstatic IEnumerable<int> AddOne(IEnumerable<int> sequence)\n\tasync static Task<int> AddOne(Task<int> task)\n\n答案在Eric的Monads系列中，请阅读参考文献。\n\n# 更一般化的加法运算\n如何我们仔细地阅读上面的两个加法运算，我们会发现，加法这个操作，只出现在一个地方：\n\n\tint result = unwrapped + 1;\n\nEric在他的Monads系列的第四部分，将加法运算更一般化了[^EL13-4]：\n\n\tstatic Nullable<R> ApplyFunction<A, R>(Nullable<A> nullable, Func<A, R> function)\n\t{\n\t  if (nullable.HasValue)\n\t  {\n\t    A unwrapped = nullable.Value;\n\t    R result = function(unwrapped);\n\t    return new Nullable<R>(result);\n\t  }\n\t  else\n\t    return new Nullable<R>();\n\t}\n\n    // 使用ApplyFunction构造具体的复合函数\n\tstatic Nullable<int> AddOne(Nullable<int> nullable)\n\t{\n\t  return ApplyFunction(nullable, (int x) => x + 1);\n\t}\n\n我们可以看到，加法运算只是ApplyFunction的一个特例。\n\n同样的，参考上面的实现，请思考其它几个M<T\\>的ApplyFunction应该如何实现：\n\n\tstatic Lazy<R> ApplyFunction<A, R>(Lazy<A> lazy, Func<A, R> function);\n\tstatic OnDemand<R> ApplyFunction<A, R>(OnDemand<A> onDemand, Func<A, R> function);\n\tstatic IEnumerable<R> ApplyFunction<A, R>(IEnumerable<A> sequence, Func<A, R> function);\n\tasync static Task<R> ApplyFunction<A, R>(Task<A> sequence, Func<A, R> function);\n\n# 平面化\n设想，我们有如下一个方法，它计算一个整数的对数，当x小于零的时候，$$\\log$$函数没有意义，将返回一个空：\n\n    Nullable<int> SaftLog(int x) {return x > 0 ? Math.Log(x) : null;}\n\n如果把这个函数传给上一节给出的ApplyFunction，会有什么问题呢？\n\n    static Nullable<R> ApplyFunction<A, R>(Nullable<A> nullable, Func<A, R> function);\n\n通过依次比对类型签名，我们发现，R对应的是Nullable<int\\>，也就是说，ApplyFunction返回的类型是：\n\n    Nullable<Nullable<int>>\n\n首先，这在C#是不合法的，Nullable只能用在值类型上面。其次，就算合法，但也过多嵌套。同样的，Lazy<Lazy<int\\>\\>，OnDemand<OnDemand<T\\>\\>等都是不合适的。我们需要将其平面化。\n\nEric在他Monads系列的第五部分给出了新的一个函数签名[^EL13-5]：\n\n    static Nullable<R> ApplySpecialFunction<A, R>(Nullable<A> nullable, Func<A, Nullable<R>> function)\n\n回忆，在复合函数那一小节，Wes Dyer给出了如下的函数签名：\n\n    public static M<V> Bind<U, V>(this M<U> m, Func<U, M<V>> k);\n\n我们看到，这两个签名本质上是相同的。\n\n同样的，作为辅助思考的练习，请写出如下签名的实现：\n\n    static Nullable<R> ApplySpecialFunction<A, R>(Nullable<A> nullable, Func<A, Nullable<R>> function);\n    static OnDemand<R> ApplySpecialFunction<A, R>(OnDemand<A> onDemand, Func<A, OnDemand<R>> function);\n    static Lazy<R> ApplySpecialFunction<A, R>(Lazy<A> lazy, Func<A, Lazy<R>> function);\n    static async Task<R> ApplySpecialFunction<A, R>(Task<A> task, Func<A, Task<R>> function);\n    static IEnumerable<R> ApplySpecialFunction<A, R>(IEnumerable<A> sequence, Func<A, IEnumerable<R>> function);\n\n# Monad的历史\nWes Dyer在他的文章中简述了Monad的历史[^WD08]。他指出，Monad这个概念来自理论数学的范畴论，Eugenio Moggi在其文章《Notions of computation and monads》将Monad引入了计算机科学领域。Philip Wadler在其著作《The essence of functional programming》探讨了Monad的应用。Haskell中更是大量的使用了Monad。\n\n这样一来，使得我们一说到Moand就和函数编程扯上关系。就好比面向对象、UML的特性容易表达设计模式那样，我们常常一说到设计模式，就往OOP上面靠[^CH13]。\n\n要知道，函数编程里面的匿名函数λ表达式，也是从理论数学中发展过来的[^WL14]。Eric也多次提及LINQ的设计者之一Erik Meijer正是Haskell的设计参与者，比如他在StackOverflow上对LINQ与Haskell关系的回答[^EL11]。\n\n# Monad的性质\nEric指出Monad是类型（Type）的一种设计模式，是对现有Type的能力的一种放大（amplifier），或者是对T的一种wrapper，借助之前提到的几个M<T\\>，我们很容易地设计出一种“asynchronously-computed sequence of nullable bytes”[^EL13-2]类型：\n\n    Task<IEnumerable<Nullable<int>>>\n\n所以我们需要一个构造器将T转化为M<T\\>，这就是下面我们会看到的Unit。\n\n另外，Moanded类型还需要定义一个操作，用来复合函数。该放大器不会改变底层（Underlying）类型的原有特性。更重要的是，诸如OnDemand的复合，我们只有在最后invoke函数的时候，才去计算，不能过早。诸如IEnumerable<T\\>的复合，只有最终需要内部元素的时候，才去遍历，不能过早。诸如IQueryable<T\\>，只有最终需要拿回查询结果的时候，再去连接数据源，也不能过早。\n\n一个直观的例子就是：\n\n    // C#\n    IEnumerabe<T>.Select().Where().FirstOrDefault();\n    // Scala\n    Seq[T].map().filter().firstOrDefault();\n\n我们可以看到，在这样一条复合运算中，最终只需要一个值，如果数组很长，映射的运算非常耗时，过早地遍历数组显然不是明智之举。是的，LINQ的延迟运算，就是基于这样的思想。\n\nEric在文中提出[^EL13-8]：\n\n> You might have noticed that the asynchronous, lazy, on-demand and sequence monads all have an interesting common property: when you apply a function to any of these monads, what you get back is an object that will perform that function in the future. Essentially, the bind function takes an immutable workflow and its subsequent step, and returns you the resulting new workflow. The bind operator does not execute the workflow; it makes a new workflow out of an old one.\n\n这个复合操作就是我们下面看到的Bind，在C#中，对应的函数名为SelectMany，在Scala中，对应的叫flatMap。\n\nWes Dyer表明，如果放大用Unit来构造，复合用Bind来表示的话，我们需要如下两个签名[^WD08]：\n\n    static M<T>  Unit<T>(T value);\n    static M<R>  Bind<T, R>(M<T>, Func<T, M<R>>)\n\n并满足如下的三个法则：\n\n1.  Left Identity\n\n        Bind(Unit(e), k) = k(e)\n\n2.  Right Identity\n\n        Bind(m, Unit) = m\n\n3.  结合律\n\n        Bind(m, x => Bind(k(x), y => h(y)) = Bind(Bind(m, x => k(x)), y => h(y))\n\n\n# 开头的思考题\n\n文章开头的练习题来自Wes Dyer的文献，那道题让我们习惯函数的返回值也是一个函数。\n\n接下来，让我们来看Eric给出的思考题，这个思考题让我们尝试去设计一个Monad。\n\n正如上一节所说，C#的Bind取名为SelectMany，给定实现[^EL13-10]：\n\n    static IEnumerable<R> SelectMany<A, R>(this IEnumerable<A> sequence, Func<A, IEnumerable<R>> function)\n    {\n      foreach(A outerItem in sequence)\n        foreach(R innerItem in function(outerItem))\n          yield return innerItem;\n    }\n\n使用SelectMany，请设计如下的实现：\n\n    static IEnumerable<A> Where(this IEnumerable<A> source, Func<A, boolean> prediction);\n    static IEnumerable<R> Selcect(this IEnumerable<A> source, Func<A, R> map);\n\n借助SelectMany、Where和Select，我们可以实现更复杂的Join操作，请练习（暂时不要考虑时间复杂度效率的问题）：\n\n    public static IEnumerable<TResult> Join<TOuter, TInner, TKey, TResult>(\n        this IEnumerable<TOuter> outer,\n        IEnumerable<TInner> inner,\n        Func<TOuter, TKey> outerKeySelector,\n        Func<TInner, TKey> innerKeySelector,\n        Func<TOuter, TInner, TResult> resultSelector,\n        IEqualityComparer<TKey> comparer\n    )\n\n我强烈建议在查阅文献之前，动手写写这三个实现，对我们理解Monad有很大的帮助。我自己也尝试写过一遍，你可以参考我的Gist。\n\n# 总结\nMonad是一种类型的设计模式，用来放大现有Type的能力。需要满足一些法则，并且向Monad上面添加操作流的时候，我们不要提早运行，而丢失了Monad特性。\n\n添加操作类的过程，在Haskell中叫Bind，在C#中叫SelectMany，在Scala中叫flatMap。这样，对于凡是实现了这些签名的类，就可以在For Comperhensoin中使用了，Eric在Monad系列的第十二部分，对此有详细的阐述，同时还讨论了如何解决SelectMany多重嵌套导致的效率低下问题。\n\n正如Eric指出的那样，Monad是类型的一种设计模式。所以Scala的Try[T]类，Rx库（rx.codeplex.com）中的IObservable<T\\>，还有LINQ，都是基于这样的设计模式。\n\n最后，再次推荐阅读参考文献的英文原文。\n\n# 参考文献\n\n[^EL13]: Eric Lippert. [Monads](http://ericlippert.com/category/monads)[J/OL] 2013\n\n[^EL13-2]: Eric Lippert. [Monads, Part 2](http://ericlippert.com/2013/02/25/monads-part-two/)[J/OL] 2013.02.25\n\n[^EL13-3]: Eric Lippert. [Monads, Part 3](http://ericlippert.com/2013/02/28/monads-part-three/)[J/OL] 2013.02.28\n\n[^EL13-4]: Eric Lippert. [Monads, Part 4](http://ericlippert.com/2013/03/04/monads-part-four/)[J/OL] 2013.03.04\n\n[^EL13-5]: Eric Lippert. [Monads, Part 5](http://ericlippert.com/2013/03/07/monads-part-five/)[J/OL] 2013.03.07\n\n[^EL13-8]: Eric Lippert. [Monads, Part 8](http://ericlippert.com/2013/03/18/monads-part-eight/)[J/OL] 2013.03.18\n\n[^EL13-10]: Eric Lippert. [Monads, Part 10](http://ericlippert.com/2013/03/25/monads-part-ten/)[J/OL] 2013.03.25\n\n[^EL11]: Eric Lippert. [Answer to _Are there any connections between Haskell and LINQ?_](http://stackoverflow.com/a/4683716)[EB/OL]. StackOverflow.com 2011.01.13\n\n[^WD08]: Wes Dyer. [The Marvels of Monads](http://blogs.msdn.com/b/wesdyer/archive/2008/01/11/the-marvels-of-monads.aspx)[J/OL] 2008\n\n[^DC13]: Douglas Crockford. Monads and Gonads, in the Speech named _JavaScript the Good Parts_\n\n[^ST13]: Stephen Toub. [Tasks, Monads, and LINQ](http://blogs.msdn.com/b/pfxteam/archive/2013/04/03/tasks-monads-and-linq.aspx)[J/OL] 2013\n\n[^CH13]: 陈浩. [从面向对象的设计模式看软件设计](http://coolshell.cn/articles/8961.html)[J/OL] 2013\n\n[^WL14]: 维基百科. [λ演算](https://en.wikipedia.org/wiki/Lambda_calculus)[J/OL] 2014\n\n[^G08]: 郭富强. 意合形合的汉英对比研究[D]. 华东师范大学 2006\n","slug":"zh-2014-06-20-understand-monads-in-c","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu50055yxcbkdph3zky"},{"layout":"post","title":"用于需求分析、开发以至持续集成的源代码管理工作模式","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n> 开发团队中，使用Word或者PDF文档，或者邮件来描述需求，可能导致同样内容的文档出现在不同成员的电脑上，进而可能导致\n> 版本不一致。另外两次版本的需求更改，很难进行差异比较（Word和PDF文档不是简单的文本文件）。\n> 一种解决方案是，使用文本文件（比如Markdown或者LaTeX）来描述需求，并将所有的文件纳入源代码管理。\n> 所以，本文描述的这个工作流，将所有的文档纳入源代码管理。同时还将提到：\n>\n> * 使用Issue来跟踪需求、变更和问题解决\n> * 产品、测试和开发等不同角色如何便捷的使用Bitbucket来提出并跟踪任务\n> * 一些基本的工具，比如c9.io，或者git的基本用法\n> * Markdown的基本语法\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 环境准备\n本文提到的“环境”，不是开发环境，而是对每个成员都是适用的基本工作环境。\n\n本文提到的“源代码”，不仅仅是开发代码，而是团队运行过程中所有的文档，包括：\n\n* 需求文档及附件\n* 团队工作流程\n* 统一的开发风格文档\n* 其它所有和团队有关，并需要记录的文档\n\n所有输出的成品，比如编译生成的PDF文件，不应该纳入源代码管理。\n\n## 了解Atlassian\n\nAtlassian的[产品线](https://www.atlassian.com/software)比较全面，\n我目前使用的三个是：\n\n* JIRA：Issue系统\n* Bitbucket：Git源代码管理\n* Bamboo：CI系统\n\n目前，每一个产品都有如下两个版本：\n\n* Cloud：由Atlassian托管的SaaS服务\n* Server：自主托管的软件\n\n**两个版本除了部署托管方式不同，页面和使用方式都非常类似。**\n\n**所以，在同一个产品的不同版本之间相互迁移，不会造成用户体验的不习惯。**\n\n比如：\n\n* Bitbucket Cloud：对应的网址是如下，所有的源代码托管到Atlassian服务器\n\n      https://bitbucket.org\n* Bitbucket Server（原名叫Stash）：个人或企业自主购买服务器，自主部署\n\n## 注册Bitbucket\n首先注册一个[bitbucket.org](https://bitbucket.org)账号，bitbucket是一个在线的源代码管理系统，支持多个私有库，\n默认每个库支持5位成员协同工作。\n\n进入bitbucket页面之后，左侧导航栏常用的菜单为：\n\n* 提交（commits）：用来查看所有的版本信息\n* 问题（issues）：所有的问题列表，可对每一个问题进行讨论，并跟踪当前问题的处理进度\n* 下载（downloads）：可以将每一个阶段的文档整理成PDF文件，存放到“下载”表中，以便向团队之外人展示\n\nBitbucket支持在线编辑和预览Markdown文档。\n\n## 操作系统和Git环境\n\n* 建议使用Ubuntu操作系统，便于自动化脚本的管理\n* 如果使用Windows系统，需要安装[Git-for-windows](https://git-for-windows.github.io/)\n* 可以尝试使用CloudIDE，推荐使用[c9.io](https://c9.io)或者[Koding.io](https://Koding.io)，\n  这两个云端IDE都配置了Ubuntu的虚机\n\n## Git环境简介\n\n当团队成员获得了某一个源代码仓库（repo）的访问权限之后，需要安装Git环境，用来提交和查看不是时期的源代码。\n\n<!--* Linux用户建议在`Bash`环境下使用Git-->\n<!--* Mac用户可以通过-->\n<!--* Windows用户可以安装[TortoiseGit] [1]或者[Git for Windows] [2]-->\n\n建议在`Bash`环境下使用Git。\n\nGit的仓库（repo）有三类：\n\n* 服务器上的中心库，指的是托管在bitbucket.org上的库，每一位成员需要不时地从服务器上获取最新的源代码，同时也要将自己的\n  更改提交保存到服务器上\n* 其他成员电脑上的库，只有当其他成员将他们的更改提交到了服务器上，我们才能获取更新，看到这些更改\n* 本地自己的库，同样的，只有我们将自己的更改提交到服务器，团队其他成员才能获取我们的更新\n\n一般而言，Git环境的基本流程是：\n\n{% highlight sh %}\n# 0. 克隆或更新本地库，将服务器上的变更，更新到本地\ngit pull\n# 0. 修改、编辑源代码，标记变更的文件，并为本次变更添加一个描述\ngit add file_changed.txt\ngit commit -m '本次变更的描述信息'\n# 0. 可以重复上一个步骤，多次变更文件\n# 0. 一并提交本地的所有的更新到服务器上\ngit push\n{% endhighlight %}\n\n## 编辑文本文档\n\n### Ubuntu系统下的建议\n\n* 如果有能力，请用`vim`或`emacs`。（**友情提示：这两个编辑器的学习比较耗时，请合理安排时间**）\n* 使用开源的[`atom.io`](https://atom.io/)编辑器，可以使用[`webupd8team`提供的`ppa`](https://launchpad.net/~webupd8team/+archive/ubuntu/atom)\n* 付费使用[Sublime Text](https://www.sublimetext.com/)\n\n### Windows系统下的建议\n\n* 使用开源的[`atom.io`](https://atom.io/)编辑器\n\n### 使用c9.io\n\n```\nhttps://c9.io\n```\n\n这是一个网页版的代码编辑器，在一些个人电脑环境有限的情况下，可以直接在网页里面写代码。\n\n特色是：\n\n* 登录之后，整个环境就是你上次的文档环境，不管你在什么操作系统上，只要你能上网\n* 代码高亮\n* `Markdown`同步预览，一边编辑`.md`文件，一边查看最终的效果\n* 智能提示\n* 更重要的是，提供了一个具有`su`权限的`Ubuntu`的`Terminal`，也就\n  意味着，你在网页里面可以使用一个`Ubuntu`操作系统了\n\n\n## 移动端的访问\n`iOS`上使用[CodeBucket](https://itunes.apple.com/cn/app/codebucket-bitbucket-for-ios/id551531422?)访问源代码库。\n\n`Android`平台使用[Bitbeaker](http://www.coolapk.com/apk/fi.iki.kuitsi.bitbeaker)。\n\n移动端通常可用于问题的讨论。\n\n\n# 不同角色的工作流程\n\n## 产品和需求的变更\n需求最开始可以在问题（issue） 列表中讨论，逐步反映到需求文档中，具体而言：\n\n0. 新增一个问题（issue）\n0. 团队成员在每一个问题的评论中讨论\n0. 编写对应的需求文档，并在提交的时候，关联问题编号（使用英文字符井号`#`）\n\n       git commit -m '新增某某需求，参考问题 #1'\n\n## `@`mention\n\n在issue的讨论中，可以使用`@username`提及某一个队员，一般来说，对方会收到一封邮件，\n所以为了方便，请使用 **简短** 并且容易在键盘上打出来的`username`。\n\n另外，我建议：\n\n* 请将你的`username`视为开源开发社区的一个身份，所以尽量，在如下开发者社区使用同样的`username`：\n  * Bitbucket.org\n  * c9.io\n  * github.com\n  * gitlab.com\n  * stackexchange.com\n  * stackoverflow.com\n  * mail.yandex.com\n* 可以使用同样的邮箱\n* 如果刚刚进入开源开发社区，可以修改你觉得不合适的`username`\n* 确定`username`之后，或者使用了很久的`username`，永远不要修改\n\n## Email Notification\n\n除了用于登录、注册的邮箱外，如果你想及时地收到Notification（比如某人`@`了你），\n可以在个人设置中，添加一个额外的邮箱地址。\n\n# 附录\n\n## 全局规则\n\n### 文件命名\n\n* 所有的文件名称只包含英文字母、数字和下划线，比如：\n\n        requirement_001_user_login.md\n* 所有的文件名不要出现空格和其它特殊字符\n* 所有的文本文件，比如`.md`，都设置为`UTF-8`编码，以免中文字体出现乱码\n* 所有的附件（图片、PPT文件等），使用简短的文件名描述图片内容，并在文档中注明\n\n### 源代码存放的文件要求\n\n源代码存放的文件，都要能够做比较（`git diff`）。\n\n对于诸如，`.pdf`、`.exe`、`.ppt`等文件，是不适合做`git diff`的，因为如果\n使用`text`文本编辑器打开这些文件，看到的都是二进制编码。\n\n如下文件，需要通过源代码管理：\n\n* 所有的`Markdown`文档的源文件：`.md`，包括：\n  * 面向开发者的文档\n  * 团队的规范文档\n  * 必要的会议记录\n  * 所有的需求文档\n  * 其它\n* 有能力的团队，可以使用`LaTeX`来编写文档，参考[此处](http://scozv.github.io/help/2015/08/12/introduction-of-building-documents-with-latex)\n* 所有的源代码\n* 必要的配置文件，注意区分开发环境和生产环境，同时，注意生产配置的保密\n\n**如下的文件，请不要放到源代码托管，**\n\n**如下的文件，请不要放到源代码托管，**\n\n**如下的文件，请不要放到源代码托管：**\n\n* <del>源代码的编译产物，比如`dll`、`exe`或者其它编译后的文件</del>\n* <del>非文本的文档，比如`pdf`、`docs`等</del>，参考[这个讨论](https://github.com/weijianwen/SJTUThesis/issues/26)\n* <del>源代码的dependencies，比如`Node.js`项目里面的`node_modules`文件夹</del>\n\n参考常用的`gitignore`文件：\n\n```\nhttps://github.com/github/gitignore\n```\n\n## Markdown基本语法介绍\nbitbucket中可以直接编辑和预览文件。\n详细的语法说明，可以参考：https://bitbucket.org/tutorials/markdowndemo/overview\n\n常用的语法有如下：\n\n* 目录\n\n  在文档的开始，使用`[TOC]`来自动生成文章的目录，比如\n{% highlight md %}\n# 第一章\n第一章内容\n## 1.1小节\n## 1.2小节\n# 第二章\n{% endhighlight %}\n\n* 换行\n\n  `Markdown`中的换行需要敲两下回车，\n  一个回车不会换行。\n  这样的好处是，我们在编写文档的过程中，\n  每行不会太长，便于我们阅读。\n  不管是文档还是代码，如果每行的内容\n  太多的话，我们就要拖动\n  页面下方的水平滚动条，\n  来查看和阅读\n  这一行后面的内容。\n  如果，真的这样的话，想必是很\n  不方便的。\n\n  比如，“换行”这一小节的`Markdown`源代码如下，同时，我们不需要让每行段落，\n  过长，比如两种源代码，最终的显示效果一样：\n{% highlight md %}\n`Markdown`中的换行需要敲两下回车，\n一个回车不会换行。\n这样的好处是，我们在编写文档的过程中，\n每行不会太长，便于我们阅读。\n不管是文档还是代码，如果每行的内容\n太多的话，我们就要拖动\n页面下方的水平滚动条，\n来查看和阅读\n这一行后面的内容。\n如果，真的这样的话，想必是很\n不方便的。\n\n比如，“换行”这一小节的`Markdown`源代码如下，\n同时，我们不需要让每行段落，\n过长，比如两种源代码，最终的显示效果一样：\n\n\n`Markdown`中的换行需要敲两下回车，一个回车不会换行。  这样的好处是，我们在编写文档的过程中，  每行不会太长，便于我们阅读。  不管是文档还是代码，如果每行的内容 太多的话，我们就要拖动  页面下方的水平滚动条，  来查看和阅读  这一行后面的内容。  如果，真的这样的话，想必是很  不方便的。\n\n比如，“换行”这一小节的`Markdown`源代码如下，同时，我们不需要让每行段落，过长，比如两种源代码，最终的显示效果一样：\n{% endhighlight %}\n\n* 章节级别\n\n{% highlight md %}\n<!-- 使用一个井号，来表示章节1，比如 -->\n# Heading 1\n<!-- 使用两个井号，来表示第二级章节，比如 -->\n## Heading 1.1\n<!-- 可以向下一直写到第五级，即 -->\n##### Heading 1.1.1.1.1\n{% endhighlight %}\n\n* 粗体和斜体\n{% highlight md %}\n<!-- 用两个星号包围需要加粗的字体： -->\n**粗体**\n<!-- 用一个星号包围需要倾斜的字体： -->\n*斜体*\n{% endhighlight %}\n\n* 超链接\n\n  通常超链接的语法如下：\n{% highlight md %}\n[Markdown 语法](https://daringfireball.net/projects/markdown/syntax)\n{% endhighlight %}\n\n* 列表\n\n  使用一个井号，标记列表中的元素，比如\n{% highlight md %}\n* Item one\n* Item two\n* Item three\n{% endhighlight %}\n\n* 表格\n\n  注意，下列语法中的短横线只需要使用一个就够了，列之间用竖线分割。\n{% highlight md %}\n第一列的表头       | 第二列的表头\n-----------------| -------------\n第一行第一列的内容  | 第一行第二列的内容\n第二行第一列的内容  | 第二行第二列的内容\n{% endhighlight %}\n\n\n## LaTeX基本语法介绍\n\n## 常用的Git场景\n本小节主要参考文献[Chacon and Straub, 2014] [^pro_git2]。\n\n下列的代码段中，以`$`打头的命令需要在`bash`中执行。其余的为命令执行的结果。\n\n### 如何修改最近一次commit的备注[^gb_undo]\n{% highlight sh %}\n$ git commit --amend\n{% endhighlight %}\n### 想暂时回到某一个历史版本[^st_checkout]\n\n有的时候，突然发现了一个问题，但是明明记得之前某个时间段是正常的。\n此时，需要回到之前的某一个版本（commit），尝试找到是哪一次提交引发了该问题。\n\n{% highlight sh %}\n# 0. 列出最近的一系列提交\n$ git log --pretty=oneline -n 20 --graph --abbrev-commit\n* 9ecb341 fix markdown href syntax\n* 3f0828b fix markdown coding syntax\n* 72fc362 fix markdown syntax\n* 4175860 draft for vcs wrkflow\n* 94259e0 fix typo of lataxing\n* 8ecbced no center for equation\n* 794bcee blockquote equation\n* b0ca566 fix div in markdown\n\n# 0. 临时返回到之前的某一次提交\n$ git checkout 94259e0\n\n# 0. 使用二分查找，反复执行`git checkout`，直到定位到某两个**相邻**的版本，也即，\n# 前一个版本还是正常的，后一个版本就出现了问题\n\n# 0. 比较这两个**相邻**版本的差异，分析问题\n$ git diff 4175860 94259e0\n\n# 0. 回撤这些临时版本\n$ git checkout master\n{% endhighlight %}\n\n### 如何在当前的版本上做一些实验性的修改，但不确定是否提交\n\n{% highlight sh %}\n# 充分利用Git的Branch特性，在当前的版本上创建一个分支，然后做实验性的修改。\n$ git branch experiment\n\n# 确认了这些修改之后，可以将实验分支上的更改合并到当前位置\n$ git checkout master\n$ git merge master experiment\n{% endhighlight %}\n\n另外，关于分支合并，`rebase`和`merge`的区别可以参考[这篇文章](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)（这个区别一般\n只有开发才会用到）。简单理解：\n\n* `merge`是将两条路径的最后一个节点合并在一起，然后继续往下走\n* `rebase`是将旁边路径上的更改，反映到当前路径上。原先的两条路径不会有交点，但是当前路径上的每一分提交都会被重写，从而反映\n  旁边路径上的更改\n* 如果当前路径上的某些提交已经更新（`git push`）到了服务器，则需要重新获取历史版本（`git pull`）\n\n## c9.io的基本环境配置\n\n{% highlight sh %}\n# create workspace\n# private\n# choose a EMPTY template\n\n# generate SSH key for Git server,\n# https://confluence.atlassian.com/x/YwV9E\nssh-keygen -t rsa -b 4096\nvi ~/.ssh/id_rsa.pub\n# start the ssh-agent in the background\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\n# record SSH key into Github and Bitbucket\n# clone Git repo into c9.io\n# git clone git@bitbucket.org:username/repo.git\n{% endhighlight %}\n\n\n## Bitbucket和Github在Acadamic License上的比较\n\n在Acadamic License结束之后，Bitbucket依然允许5人小组的私有库，但是Github需要付费，才能继续使用私有库。\n\n# 参考文献\n[^pro_git2]: Chacon, S. and Straub, B. (2014). Pro Git, Second Edition.: NY. Apress.\n[^gb_undo]: [Git Basics - Undoing Things](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things)\n[^st_checkout]: [Temporarily switch to a different commit](http://stackoverflow.com/a/4114122)\n\n\n[1]: https://tortoisegit.org/ \"TortoiseGit\"\n[2]: https://git-for-windows.github.io/ \"Git for Windows\"\n","source":"_posts/zh/2015-09-04-a-vcs-project-workflow-for-requirement-coding-and-ci.md","raw":"---\nlayout: post\ntitle: \"用于需求分析、开发以至持续集成的源代码管理工作模式\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"latex\",\"markdown\",\"ci\",\"git\", \"jira\",\"project\"]\nlang: zh\n---\n{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n> 开发团队中，使用Word或者PDF文档，或者邮件来描述需求，可能导致同样内容的文档出现在不同成员的电脑上，进而可能导致\n> 版本不一致。另外两次版本的需求更改，很难进行差异比较（Word和PDF文档不是简单的文本文件）。\n> 一种解决方案是，使用文本文件（比如Markdown或者LaTeX）来描述需求，并将所有的文件纳入源代码管理。\n> 所以，本文描述的这个工作流，将所有的文档纳入源代码管理。同时还将提到：\n>\n> * 使用Issue来跟踪需求、变更和问题解决\n> * 产品、测试和开发等不同角色如何便捷的使用Bitbucket来提出并跟踪任务\n> * 一些基本的工具，比如c9.io，或者git的基本用法\n> * Markdown的基本语法\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 环境准备\n本文提到的“环境”，不是开发环境，而是对每个成员都是适用的基本工作环境。\n\n本文提到的“源代码”，不仅仅是开发代码，而是团队运行过程中所有的文档，包括：\n\n* 需求文档及附件\n* 团队工作流程\n* 统一的开发风格文档\n* 其它所有和团队有关，并需要记录的文档\n\n所有输出的成品，比如编译生成的PDF文件，不应该纳入源代码管理。\n\n## 了解Atlassian\n\nAtlassian的[产品线](https://www.atlassian.com/software)比较全面，\n我目前使用的三个是：\n\n* JIRA：Issue系统\n* Bitbucket：Git源代码管理\n* Bamboo：CI系统\n\n目前，每一个产品都有如下两个版本：\n\n* Cloud：由Atlassian托管的SaaS服务\n* Server：自主托管的软件\n\n**两个版本除了部署托管方式不同，页面和使用方式都非常类似。**\n\n**所以，在同一个产品的不同版本之间相互迁移，不会造成用户体验的不习惯。**\n\n比如：\n\n* Bitbucket Cloud：对应的网址是如下，所有的源代码托管到Atlassian服务器\n\n      https://bitbucket.org\n* Bitbucket Server（原名叫Stash）：个人或企业自主购买服务器，自主部署\n\n## 注册Bitbucket\n首先注册一个[bitbucket.org](https://bitbucket.org)账号，bitbucket是一个在线的源代码管理系统，支持多个私有库，\n默认每个库支持5位成员协同工作。\n\n进入bitbucket页面之后，左侧导航栏常用的菜单为：\n\n* 提交（commits）：用来查看所有的版本信息\n* 问题（issues）：所有的问题列表，可对每一个问题进行讨论，并跟踪当前问题的处理进度\n* 下载（downloads）：可以将每一个阶段的文档整理成PDF文件，存放到“下载”表中，以便向团队之外人展示\n\nBitbucket支持在线编辑和预览Markdown文档。\n\n## 操作系统和Git环境\n\n* 建议使用Ubuntu操作系统，便于自动化脚本的管理\n* 如果使用Windows系统，需要安装[Git-for-windows](https://git-for-windows.github.io/)\n* 可以尝试使用CloudIDE，推荐使用[c9.io](https://c9.io)或者[Koding.io](https://Koding.io)，\n  这两个云端IDE都配置了Ubuntu的虚机\n\n## Git环境简介\n\n当团队成员获得了某一个源代码仓库（repo）的访问权限之后，需要安装Git环境，用来提交和查看不是时期的源代码。\n\n<!--* Linux用户建议在`Bash`环境下使用Git-->\n<!--* Mac用户可以通过-->\n<!--* Windows用户可以安装[TortoiseGit] [1]或者[Git for Windows] [2]-->\n\n建议在`Bash`环境下使用Git。\n\nGit的仓库（repo）有三类：\n\n* 服务器上的中心库，指的是托管在bitbucket.org上的库，每一位成员需要不时地从服务器上获取最新的源代码，同时也要将自己的\n  更改提交保存到服务器上\n* 其他成员电脑上的库，只有当其他成员将他们的更改提交到了服务器上，我们才能获取更新，看到这些更改\n* 本地自己的库，同样的，只有我们将自己的更改提交到服务器，团队其他成员才能获取我们的更新\n\n一般而言，Git环境的基本流程是：\n\n{% highlight sh %}\n# 0. 克隆或更新本地库，将服务器上的变更，更新到本地\ngit pull\n# 0. 修改、编辑源代码，标记变更的文件，并为本次变更添加一个描述\ngit add file_changed.txt\ngit commit -m '本次变更的描述信息'\n# 0. 可以重复上一个步骤，多次变更文件\n# 0. 一并提交本地的所有的更新到服务器上\ngit push\n{% endhighlight %}\n\n## 编辑文本文档\n\n### Ubuntu系统下的建议\n\n* 如果有能力，请用`vim`或`emacs`。（**友情提示：这两个编辑器的学习比较耗时，请合理安排时间**）\n* 使用开源的[`atom.io`](https://atom.io/)编辑器，可以使用[`webupd8team`提供的`ppa`](https://launchpad.net/~webupd8team/+archive/ubuntu/atom)\n* 付费使用[Sublime Text](https://www.sublimetext.com/)\n\n### Windows系统下的建议\n\n* 使用开源的[`atom.io`](https://atom.io/)编辑器\n\n### 使用c9.io\n\n```\nhttps://c9.io\n```\n\n这是一个网页版的代码编辑器，在一些个人电脑环境有限的情况下，可以直接在网页里面写代码。\n\n特色是：\n\n* 登录之后，整个环境就是你上次的文档环境，不管你在什么操作系统上，只要你能上网\n* 代码高亮\n* `Markdown`同步预览，一边编辑`.md`文件，一边查看最终的效果\n* 智能提示\n* 更重要的是，提供了一个具有`su`权限的`Ubuntu`的`Terminal`，也就\n  意味着，你在网页里面可以使用一个`Ubuntu`操作系统了\n\n\n## 移动端的访问\n`iOS`上使用[CodeBucket](https://itunes.apple.com/cn/app/codebucket-bitbucket-for-ios/id551531422?)访问源代码库。\n\n`Android`平台使用[Bitbeaker](http://www.coolapk.com/apk/fi.iki.kuitsi.bitbeaker)。\n\n移动端通常可用于问题的讨论。\n\n\n# 不同角色的工作流程\n\n## 产品和需求的变更\n需求最开始可以在问题（issue） 列表中讨论，逐步反映到需求文档中，具体而言：\n\n0. 新增一个问题（issue）\n0. 团队成员在每一个问题的评论中讨论\n0. 编写对应的需求文档，并在提交的时候，关联问题编号（使用英文字符井号`#`）\n\n       git commit -m '新增某某需求，参考问题 #1'\n\n## `@`mention\n\n在issue的讨论中，可以使用`@username`提及某一个队员，一般来说，对方会收到一封邮件，\n所以为了方便，请使用 **简短** 并且容易在键盘上打出来的`username`。\n\n另外，我建议：\n\n* 请将你的`username`视为开源开发社区的一个身份，所以尽量，在如下开发者社区使用同样的`username`：\n  * Bitbucket.org\n  * c9.io\n  * github.com\n  * gitlab.com\n  * stackexchange.com\n  * stackoverflow.com\n  * mail.yandex.com\n* 可以使用同样的邮箱\n* 如果刚刚进入开源开发社区，可以修改你觉得不合适的`username`\n* 确定`username`之后，或者使用了很久的`username`，永远不要修改\n\n## Email Notification\n\n除了用于登录、注册的邮箱外，如果你想及时地收到Notification（比如某人`@`了你），\n可以在个人设置中，添加一个额外的邮箱地址。\n\n# 附录\n\n## 全局规则\n\n### 文件命名\n\n* 所有的文件名称只包含英文字母、数字和下划线，比如：\n\n        requirement_001_user_login.md\n* 所有的文件名不要出现空格和其它特殊字符\n* 所有的文本文件，比如`.md`，都设置为`UTF-8`编码，以免中文字体出现乱码\n* 所有的附件（图片、PPT文件等），使用简短的文件名描述图片内容，并在文档中注明\n\n### 源代码存放的文件要求\n\n源代码存放的文件，都要能够做比较（`git diff`）。\n\n对于诸如，`.pdf`、`.exe`、`.ppt`等文件，是不适合做`git diff`的，因为如果\n使用`text`文本编辑器打开这些文件，看到的都是二进制编码。\n\n如下文件，需要通过源代码管理：\n\n* 所有的`Markdown`文档的源文件：`.md`，包括：\n  * 面向开发者的文档\n  * 团队的规范文档\n  * 必要的会议记录\n  * 所有的需求文档\n  * 其它\n* 有能力的团队，可以使用`LaTeX`来编写文档，参考[此处](http://scozv.github.io/help/2015/08/12/introduction-of-building-documents-with-latex)\n* 所有的源代码\n* 必要的配置文件，注意区分开发环境和生产环境，同时，注意生产配置的保密\n\n**如下的文件，请不要放到源代码托管，**\n\n**如下的文件，请不要放到源代码托管，**\n\n**如下的文件，请不要放到源代码托管：**\n\n* <del>源代码的编译产物，比如`dll`、`exe`或者其它编译后的文件</del>\n* <del>非文本的文档，比如`pdf`、`docs`等</del>，参考[这个讨论](https://github.com/weijianwen/SJTUThesis/issues/26)\n* <del>源代码的dependencies，比如`Node.js`项目里面的`node_modules`文件夹</del>\n\n参考常用的`gitignore`文件：\n\n```\nhttps://github.com/github/gitignore\n```\n\n## Markdown基本语法介绍\nbitbucket中可以直接编辑和预览文件。\n详细的语法说明，可以参考：https://bitbucket.org/tutorials/markdowndemo/overview\n\n常用的语法有如下：\n\n* 目录\n\n  在文档的开始，使用`[TOC]`来自动生成文章的目录，比如\n{% highlight md %}\n# 第一章\n第一章内容\n## 1.1小节\n## 1.2小节\n# 第二章\n{% endhighlight %}\n\n* 换行\n\n  `Markdown`中的换行需要敲两下回车，\n  一个回车不会换行。\n  这样的好处是，我们在编写文档的过程中，\n  每行不会太长，便于我们阅读。\n  不管是文档还是代码，如果每行的内容\n  太多的话，我们就要拖动\n  页面下方的水平滚动条，\n  来查看和阅读\n  这一行后面的内容。\n  如果，真的这样的话，想必是很\n  不方便的。\n\n  比如，“换行”这一小节的`Markdown`源代码如下，同时，我们不需要让每行段落，\n  过长，比如两种源代码，最终的显示效果一样：\n{% highlight md %}\n`Markdown`中的换行需要敲两下回车，\n一个回车不会换行。\n这样的好处是，我们在编写文档的过程中，\n每行不会太长，便于我们阅读。\n不管是文档还是代码，如果每行的内容\n太多的话，我们就要拖动\n页面下方的水平滚动条，\n来查看和阅读\n这一行后面的内容。\n如果，真的这样的话，想必是很\n不方便的。\n\n比如，“换行”这一小节的`Markdown`源代码如下，\n同时，我们不需要让每行段落，\n过长，比如两种源代码，最终的显示效果一样：\n\n\n`Markdown`中的换行需要敲两下回车，一个回车不会换行。  这样的好处是，我们在编写文档的过程中，  每行不会太长，便于我们阅读。  不管是文档还是代码，如果每行的内容 太多的话，我们就要拖动  页面下方的水平滚动条，  来查看和阅读  这一行后面的内容。  如果，真的这样的话，想必是很  不方便的。\n\n比如，“换行”这一小节的`Markdown`源代码如下，同时，我们不需要让每行段落，过长，比如两种源代码，最终的显示效果一样：\n{% endhighlight %}\n\n* 章节级别\n\n{% highlight md %}\n<!-- 使用一个井号，来表示章节1，比如 -->\n# Heading 1\n<!-- 使用两个井号，来表示第二级章节，比如 -->\n## Heading 1.1\n<!-- 可以向下一直写到第五级，即 -->\n##### Heading 1.1.1.1.1\n{% endhighlight %}\n\n* 粗体和斜体\n{% highlight md %}\n<!-- 用两个星号包围需要加粗的字体： -->\n**粗体**\n<!-- 用一个星号包围需要倾斜的字体： -->\n*斜体*\n{% endhighlight %}\n\n* 超链接\n\n  通常超链接的语法如下：\n{% highlight md %}\n[Markdown 语法](https://daringfireball.net/projects/markdown/syntax)\n{% endhighlight %}\n\n* 列表\n\n  使用一个井号，标记列表中的元素，比如\n{% highlight md %}\n* Item one\n* Item two\n* Item three\n{% endhighlight %}\n\n* 表格\n\n  注意，下列语法中的短横线只需要使用一个就够了，列之间用竖线分割。\n{% highlight md %}\n第一列的表头       | 第二列的表头\n-----------------| -------------\n第一行第一列的内容  | 第一行第二列的内容\n第二行第一列的内容  | 第二行第二列的内容\n{% endhighlight %}\n\n\n## LaTeX基本语法介绍\n\n## 常用的Git场景\n本小节主要参考文献[Chacon and Straub, 2014] [^pro_git2]。\n\n下列的代码段中，以`$`打头的命令需要在`bash`中执行。其余的为命令执行的结果。\n\n### 如何修改最近一次commit的备注[^gb_undo]\n{% highlight sh %}\n$ git commit --amend\n{% endhighlight %}\n### 想暂时回到某一个历史版本[^st_checkout]\n\n有的时候，突然发现了一个问题，但是明明记得之前某个时间段是正常的。\n此时，需要回到之前的某一个版本（commit），尝试找到是哪一次提交引发了该问题。\n\n{% highlight sh %}\n# 0. 列出最近的一系列提交\n$ git log --pretty=oneline -n 20 --graph --abbrev-commit\n* 9ecb341 fix markdown href syntax\n* 3f0828b fix markdown coding syntax\n* 72fc362 fix markdown syntax\n* 4175860 draft for vcs wrkflow\n* 94259e0 fix typo of lataxing\n* 8ecbced no center for equation\n* 794bcee blockquote equation\n* b0ca566 fix div in markdown\n\n# 0. 临时返回到之前的某一次提交\n$ git checkout 94259e0\n\n# 0. 使用二分查找，反复执行`git checkout`，直到定位到某两个**相邻**的版本，也即，\n# 前一个版本还是正常的，后一个版本就出现了问题\n\n# 0. 比较这两个**相邻**版本的差异，分析问题\n$ git diff 4175860 94259e0\n\n# 0. 回撤这些临时版本\n$ git checkout master\n{% endhighlight %}\n\n### 如何在当前的版本上做一些实验性的修改，但不确定是否提交\n\n{% highlight sh %}\n# 充分利用Git的Branch特性，在当前的版本上创建一个分支，然后做实验性的修改。\n$ git branch experiment\n\n# 确认了这些修改之后，可以将实验分支上的更改合并到当前位置\n$ git checkout master\n$ git merge master experiment\n{% endhighlight %}\n\n另外，关于分支合并，`rebase`和`merge`的区别可以参考[这篇文章](https://www.atlassian.com/git/tutorials/merging-vs-rebasing)（这个区别一般\n只有开发才会用到）。简单理解：\n\n* `merge`是将两条路径的最后一个节点合并在一起，然后继续往下走\n* `rebase`是将旁边路径上的更改，反映到当前路径上。原先的两条路径不会有交点，但是当前路径上的每一分提交都会被重写，从而反映\n  旁边路径上的更改\n* 如果当前路径上的某些提交已经更新（`git push`）到了服务器，则需要重新获取历史版本（`git pull`）\n\n## c9.io的基本环境配置\n\n{% highlight sh %}\n# create workspace\n# private\n# choose a EMPTY template\n\n# generate SSH key for Git server,\n# https://confluence.atlassian.com/x/YwV9E\nssh-keygen -t rsa -b 4096\nvi ~/.ssh/id_rsa.pub\n# start the ssh-agent in the background\neval \"$(ssh-agent -s)\"\nssh-add ~/.ssh/id_rsa\n# record SSH key into Github and Bitbucket\n# clone Git repo into c9.io\n# git clone git@bitbucket.org:username/repo.git\n{% endhighlight %}\n\n\n## Bitbucket和Github在Acadamic License上的比较\n\n在Acadamic License结束之后，Bitbucket依然允许5人小组的私有库，但是Github需要付费，才能继续使用私有库。\n\n# 参考文献\n[^pro_git2]: Chacon, S. and Straub, B. (2014). Pro Git, Second Edition.: NY. Apress.\n[^gb_undo]: [Git Basics - Undoing Things](https://git-scm.com/book/en/v2/Git-Basics-Undoing-Things)\n[^st_checkout]: [Temporarily switch to a different commit](http://stackoverflow.com/a/4114122)\n\n\n[1]: https://tortoisegit.org/ \"TortoiseGit\"\n[2]: https://git-for-windows.github.io/ \"Git for Windows\"\n","slug":"zh-2015-09-04-a-vcs-project-workflow-for-requirement-coding-and-ci","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu60058yxcb9t66hfq8"},{"layout":"post","title":"将Hyde风格移至到现有的Jekyll站点","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n\n> 本文描述了将Hyde风格移至到现有的Jekyll站点的步骤。主要的思路是：\n>\n> * 了解Jekyll站点的渲染步骤；\n> * 使用Meld比较`Hyde`库和现有Jekyll站点的区别；\n> * 替代并且测试\n>\n> 更详细的步骤需要参看英文版本。\n\n<!--more-->\n\n# Jekyll的文件结构\n\n参考__[官方文档](https://jekyllrb.com/docs/structure/)__，\n了解Jekyll的文件结构。\n\n{% highlight sh %}\n.\n├── assets\n|   ├── css\n|   ├── js\n|   ├── img\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n├── _includes\n|   ├── JB\n|   |   ├── comments_render_script\n|   |   ├── pages_list_script\n|   |   ├── analytics_render_script\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n|           ├── default.html\n|           ├── page.html\n|           └── post.html\n├── _layouts\n|   ├── default.html\n|   ├── page.html\n|   └── post.html\n{% endhighlight %}\n\n\n# Jekyll渲染的步骤\n\n更详细的解释需要参看英文版本，简言之：\n\n* `./_layout/*.html`，HTML网页的入口\n* `./_includes/JB/*`， HTML渲染的时候，可重用的代码\n* `./_includes/themes/`, 页面风格定义\n* `./assets/themes/`, 公共的静态资源——图片、样式文件等\n\n# 应用Hyde页面风格的步骤\n\n更详细的解释需要参看英文版本。\n","source":"_posts/zh/2016-03-18-how-do-we-apply-the-hyde-theme-to-existing-jekyll-site.md","raw":"---\nlayout: post\ntitle: \"将Hyde风格移至到现有的Jekyll站点\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"Jekyll\", \"markdown\"]\nlang: zh\n---\n{% include JB/setup %}\n\n\n# 摘要\n{:.no_toc}\n\n> 本文描述了将Hyde风格移至到现有的Jekyll站点的步骤。主要的思路是：\n>\n> * 了解Jekyll站点的渲染步骤；\n> * 使用Meld比较`Hyde`库和现有Jekyll站点的区别；\n> * 替代并且测试\n>\n> 更详细的步骤需要参看英文版本。\n\n<!--more-->\n\n# Jekyll的文件结构\n\n参考__[官方文档](https://jekyllrb.com/docs/structure/)__，\n了解Jekyll的文件结构。\n\n{% highlight sh %}\n.\n├── assets\n|   ├── css\n|   ├── js\n|   ├── img\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n├── _includes\n|   ├── JB\n|   |   ├── comments_render_script\n|   |   ├── pages_list_script\n|   |   ├── analytics_render_script\n|   └── themes\n|       ├── # hyde\n|       └── bootstrap\n|           ├── default.html\n|           ├── page.html\n|           └── post.html\n├── _layouts\n|   ├── default.html\n|   ├── page.html\n|   └── post.html\n{% endhighlight %}\n\n\n# Jekyll渲染的步骤\n\n更详细的解释需要参看英文版本，简言之：\n\n* `./_layout/*.html`，HTML网页的入口\n* `./_includes/JB/*`， HTML渲染的时候，可重用的代码\n* `./_includes/themes/`, 页面风格定义\n* `./assets/themes/`, 公共的静态资源——图片、样式文件等\n\n# 应用Hyde页面风格的步骤\n\n更详细的解释需要参看英文版本。\n","slug":"zh-2016-03-18-how-do-we-apply-the-hyde-theme-to-existing-jekyll-site","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu8005byxcbvezt9mrh"},{"layout":"post","title":"介绍专业的文档系统LaTeX","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n<!--2015-08-10-introduction-of-building-documents-with-latex-->\n\n# 摘要\n{:.no_toc}\n> `TeX`家族是一个专业的排版系统。本文简要地介绍了`TeX`家族的常见成员，\n> 并整理出了`LaTeX`入门使用过程中会遇到的一些问题，\n>\n> 同时，将演示`LaTeX`在网页中的集成。最后在附录部分，给出了样式模板的参考代码。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `TeX`家族简介\n`TeX`可以视为出版行业的专业排版系统，由[Donald Knuth](http://www-cs-faculty.stanford.edu/~knuth/)于1978年发布，\n当前的稳定版本编号为[$$3.14159265$$] [1]。\n\n`TeX`是脚本化的排版系统，所有的排版格式都是用`TeX`语法描述的。比如使用`\\begin{tabular} \\end{tabular}`来绘制表格。\n`TeX`接收一系列的语法命令和文本内容，经过`TeX`系统编译（macro compiler）之后，输出到显示屏、`DVI`或者`PDF`文档。\n对于同样的一份`TeX`脚本，在任意的环境下编译后的输出文档：格式、字体、间距等都应该是一样的。\n\n在`TeX`的基础上，可以定义一系列的宏包（macro），可以更方便地描述排版样式。比如上述的表格语法，其实来自`LaTeX`宏包，\n如果要使用纯`TeX`（plain `TeX`）来绘制表格，则要使用更多的排版命令\n（参考这两个网页文献 [A](http://www.volkerschatz.com/tex/halign.html)、\n[B](http://tex.stackexchange.com/questions/183235/vertically-aligned-table-in-plaintex-latex-context-etc) ）。\n`LaTeX`是非常流行的宏包，除此之外还有`AMS-TeX`、`XeTeX`等[^TUG01]。\n\n\n# 为什么使用`TeX`家族排版\n和Office这类所见所得的文档处理器不同的是，`TeX`系列使用大量的命令来描述排版格式。\n此外，所见非得的`TeX`和所见即得的Office相比：\n\n* 使用`TeX`，不需要考虑软件的版权费用问题，它是免费的。\n* 使用`TeX`，不需要担心跨软件、跨平台的格式兼容问题。\n  不同的Office软件在排版格式上并不完全兼容，即使同一个软件公司的不同Office版本，\n  格式上也不完全兼容。但是，同样的一份`TeX`文档，经过不同的环境编译之后，输出的排版都是完全一样的。\n* 使用`LaTeX`，精力可以放在撰写文档的内容，而非花大量的时间，用鼠标选中不同的文本段落，调整大量的排版样式。\n* `TeX`更多用于学术领域，很多出版社、大学会提供指定的学术论文模板，\n  比如[MIT thesis templates] [3]或者非官方的[上海交通大学学位论文模板] [2]。使用这些\n  模板，基本上不用考虑排版格式的问题，只要专心写文章就好了。\n* 很多专业的学术语言——复杂的数学公式，化学分子式，五线谱，电路图——是没法仅仅使用Office就能编写的。`TeX`可以[^WIK01]。\n* `TeX`文档是一个普通的文本文档，这意味着，可以进行源代码的版本管理。\n\n类似的所见非得系统还有[`Markdown`](http://daringfireball.net/projects/markdown/)，不过，`Markdown`更常用于网页展示：\n\n* `Markdown`语法定义了不同的`HTML`节点；\n* 不同的`Markdown`处理系统（在线编译网站，或者软件）定义不同的`CSS`样式；\n* 使得同样的`Markdown`文档，最终的展示并不一样。以“`online markdown`”为关键字搜索，\n  可以找到不同的在线`Markdown`编辑网站，它们对同一份文档的渲染结果是不同的。\n\n# `TeX`的使用说明\n目前，我会优先考虑使用`LaTeX`，而非直接使用纯粹的`TeX`，因为前者的使用，能够将精力更多\n的放在撰写的内容上。\n\n使用`LaTeX`的过程中，建议积累自己的一份样式模板，并通过源代码管理这个过程。后面的附录会附上我自己积累的一份样式模板。\n\n目前在`LaTeX`的使用过程中，碰到的问题有如下几类（详细的问题清单，也会附在后文的附录中，供参考）：\n\n* 中文等CJK字体的编译问题：解决方案通常是选用合适的字体，配置不同格式的字体名称，需要留意字体的版权声明；\n* 文档编译出错：这时，需要仔细阅读编译日志，通常用编译日志中的错误信息在网上搜索，都能得到解决方案；\n* 不知道如何实现具体的排版样式：我目前没有精力仔细研究纯粹的`TeX`（plain `TeX`）语法，所以还是通过搜索\n  来解决问题。\n\n可以从`LaTex`的[Wikibook](https://en.wikibooks.org/wiki/LaTeX)开始读起。\n另外官方的[tug.org](http://tug.org/begin.html)和无所不知的[stackoverflow](http://tex.stackexchange.com/)都能找到\n很多帮助文档。\n\n准备一张 _LaTeX Cheat Sheet_ 供参考。\n\n## `TeX`和`LaTeX`的区别\n\n正如前面说的那样：\n\n* `TeX`是一个排版系统的基础；\n* `LaTeX`在`TeX`基础上，定义了很多便捷的样式模板；\n* `XeLaTeX`增加了对`CJK`的更好支持。\n\n### `TeX`注重排版\n\n`TeX`更像一个排版系统，参考[tex.stack问答](http://stackoverflow.com/a/7014579)\n或者[此处](http://www.haverford.edu/mathematics/resources/LaTeX_vs_TeX.php)：\n\n> Learn TeX only if you would like to become a typesetter\n\n> `TeX` is a system designed for typesetting\n\n### `LaTeX`注重内容\n\n`LaTeX`能够更快地编写文档，但是没法体会到`TeX`的很多特性，\n参考[tug.org上的文档](http://www.tug.org/pipermail/texhax/2009-October/013645.html)。\n\n[知乎问答](http://www.zhihu.com/question/20638337)上，也给出了一个分类列表——`TeX`之于`LaTeX`，就像“引擎”之于“格式”。\n[知乎另一份问答](http://www.zhihu.com/question/25033797/answer/29962700)里提到，`TeX`和`LaTeX`的选择，需要一定的权衡：\n\n> 用LaTeX的时候，还真有你想要某些功能而没有的情况。怎么办？两种办法：花钱找高人帮着写；自己写。\n>\n> ...\n>\n> 首先需要熟悉LaTeX的内部命令（大部分是含有@字符的命令），有时候这还不够，\n> 万一碰到\\expandafter，\\futurelet，\\ifvoid等等还得碰底层的primitive（基本命令）。\n> 这个时候，还真就没plain TeX用着舒服。不过舒服也是有代价的，\n> 因为plain TeX很短，能很快看完，但是前提是能够顺利地把TeXbook看完。\n\n\n## 样例模板参考\n\n### `LaTeX`的格式样例\n\n参考附录部分的样例模板。\n\n### 学术论文格式样例\n\n在互联网上总能找到很多学术论文的模板样例：\n\n* [MIT thesis templates] [3]\n* 非官方的[上海交通大学学位论文模板] [2]\n* [ACM LaTeX Style Guide](https://www.acm.org/publications/article-templates/acm-latex-style-guide)\n* [Generic EPFL Template in LaTeX](http://phd.epfl.ch/thesistemplates)，Scala！\n* [Elsevier LaTeX instructions](http://www.elsevier.com/authors/author-schemas/latex-instructions)\n* [AMS LaTeX Guide](https://www2.ametsoc.org/ams/index.cfm/publications/authors/journal-and-bams-authors/author-resources/latex-author-info/preparing-a-latex-manuscript-for-submission/)\n\n### 编译命令参考\n\n{% highlight sh %}\n# 文件名: build.sh\n\n# 编译过程中如果出现异常中断，可能需要清除临时文件\n# 谨慎使用git clean命令，这会删除untracked文件\n# git clean -fx\n\n# 编译入口\nxelatex index.tex\n# 编译索引\nmakeindex idx_finance.idx\n# 编译参考文献\nfor x in {c,f} ; do\n\tbibtex $x\ndone\n\n# 引用参考文献编号\nxelatex index.tex\nxelatex index.tex\n{% endhighlight %}\n\n## `LaTeX`在Web页面的使用——基于`KaTeX`库\n\n如果想要体验在线编辑`TeX`文档，可以试用这两个网站：\n\n* sharelatex.com\n* overleaf.com\n\n这里主要讨论Web页面中使用`LaTeX`语法，显示数学公式。常用的解决方案是在网页中嵌入`MathJax`库，\n然后使用`$$ \\equation $$`语法在网页中显示数学公式。\n\n但是`MathJax`库的加载和公式渲染（render）比较耗时。\n一个替代方案是使用`KaTeX`——出自[Khan Academy](https://khan.github.io/KaTeX/) 团队。\n`KaTeX`的渲染速度得益于它将所有的数学公式用`CSS`的方式展示。\n\n使用`KaTeX`需要注意的是：\n\n* 使用`$$ \\equation $$`而非`$ \\equation $`。\n* 如果需要居中显示行级公式，可以自定义`CSS`。\n* 目前[`KaTeX v0.5.0`](https://github.com/Khan/KaTeX/releases/tag/v0.5.0)并不支持所有的`LaTeX`语法，\n  比如`$$\\LaTeX{}$$`就无法被渲染。\n\n\n### `Jekyll`中的集成`KaTeX`\n\n如下的公式就是通过`KaTeX`渲染的：\n\n$$e^x = \\lim_{n\\rightarrow \\infty} \\sum_{t=0}^{n} ( \\frac{1}{t!}\\cdot x^t )= \\sum_{t=0}^{\\infty} (1 + x + \\frac{1}{2!}x^2+\\frac{1}{3!}x^3+ ... + \\frac{1}{t!}\\cdot x^t)$$\n\n`KaTeX`在`Jekyll`中的集成，可以参考这篇文章（[链接](http://xuc.me/blog/KaTeX-and-Jekyll/)）。\n\n### `gitbook`中的集成`KaTeX`\n`gitbook`已经提供了`KaTeX`的插件：[`gitbook-plugin-katex`](http://plugins.gitbook.com/plugin/katex)。\n\n# 附录\n\n## `LaTeX`使用过程中的问题列表\n\n### LaTeX Font Warning: Font shape undefined\n如果一个字体集，少了粗体定义，则会出现这样的提示。解决方案是，\n手动指定文档中粗体对应的字体：\n\n{% highlight tex %}\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n-\\usepackage{xltxtra}\n-\\setmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+% http://mirror.bjtu.edu.cn/CTAN/macros/xetex/latex/xecjk/xeCJK.pdf\n+\\usepackage{xltxtra, xeCJK}\n+\\setCJKmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+\\xeCJKsetup{AutoFakeBold=true, LoadFandol=false}\n\n\\begin{document}\n\\maketitle\n{% endhighlight %}\n\n### latex error: file `multind.sty' not found\n\nWindows 下的`MiKTeX 2.9`不会出现这样的问题， `Lubuntu 14.04`下的`TeX Live`出现过这样的问题。\ntex.ac.uk下的[一份文档](http://www.tex.ac.uk/cgi-bin/texfaq2html-beta?label=multind) 指出：\n\n> makeidx.sty (is) Part of the LaTeX distribution\n\n所以[该文档](http://bioinforma.weebly.com/random-troubleshooting.html#/)尝试安装`texlive-full`来解决问题:\n\n{% highlight base %}\nsudo apt-get install texlive-full\nsudo texhash\nsudo texconfig\n{% endhighlight %}\n\n如果想要尝试手动安装`multind.sty`，可以按照如下步骤：\n\n* 下载[multind.sty](http://ctan.org/pkg/multind)\n* 参考[Wikibook/LaTeX](http://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages#Installing_a_package)安装sty文件\n* `mkdir /usr/share/texmf/tex/latex/multind`\n* `sudo texhash`\n\n### `makeindex finance`不会生成Multi Index页面\n\n`finance`是一个文件名，而非命令。对比如下两个命令：\n\n{% highlight sh %}\nscott@c9 [~/repo/notes] (master *)\n$ makeindex finance\nThis is makeindex, version 2.15 [TeX Live 2013] (kpathsea + Thai support).\nScanning input file finance...done (0 entries accepted, 0 rejected).\nNothing written in finance.ind.\nTranscript written in finance.ilg.\n\nscott@c9 [~/repo/notes] (master *)\n$ makeindex finance.idx\nThis is makeindex, version 2.15 [TeX Live 2013] (kpathsea + Thai support).\nScanning input file finance.idx....done (22 entries accepted, 0 rejected).\nSorting entries....done (106 comparisons).\nGenerating output file finance.ind....done (59 lines written, 0 warnings).\nOutput written in finance.ind.\nTranscript written in finance.ilg.\n{% endhighlight %}\n\n### xeCJK error: \"key-unknown\"\n\n可能会在`Lubuntu 14.04`下遇到这样的问题：\n\n{% highlight sh %}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!\n! xeCJK error: \"key-unknown\"\n!\n! Sorry, but xeCJK/options does not have a key called `LoadFandol'.\n!\n! The key `LoadFandol' is being ignored.\n!\n! See the xeCJK documentation for further information.\n!\n! Type <return> to continue.\n!...............................................  \n\nl.37 ...setup{AutoFakeBold=true, LoadFandol=false}\n{% endhighlight %}\n\n解决方案是，更换字体配置：\n\n{% highlight tex %}\n \\usepackage{xltxtra, xeCJK}\n-\\setCJKmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n \\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n+% Latin\n+\\usepackage{fontspec, pifont}\n+\\setmainfont{Gentium Book Basic}\n+\n \\begin{document}\n{% endhighlight %}\n\n### CJK字体的选用\n\n字体的选用，首先要注意版权的问题。\n\n开源的CJK字体，可以选用[文泉驿](http://wenq.org/)，或者[思源黑体](http://blog.typekit.com/alternate/source-han-sans-chs/)。\n建议在配置中指定粗体、斜体等格式对应的字体文件。\n不过，目前并不能顺利地在LaTeX中使用思源黑体， 参考[知乎问答](http://www.zhihu.com/question/24535443)。\n而且使用思源黑体，可能会遇到如下错误：\n\n{% highlight sh %}\nxelatex.exe: The font file could not be found.\nxelatex.exe: Data: Source Sans Pro/OT\n{% endhighlight %}\n\n\n可以参考知乎专题的[解决方案](http://zhuanlan.zhihu.com/LaTeX/19807822)，\n或者stackoverflow上的[问答](http://tex.stackexchange.com/questions/84186/how-can-i-use-source-sans-pro-in-tex-live-2012)。\n\n除此之外，可以为印刷出版物选用经典的`Adobe Song Std`字体，但需留意\n[版权](http://www.adobe.com/products/type/font-licensing/additional-license-rights.html)。\n\n顺带提一下，拉丁字符字体，可选用开源的[`Gentium`](http://scripts.sil.org/cms/scripts/page.php?item_id=Gentium)字体集，\n非常适合印刷出版物。\n\n### CJK字体不能在数学公式环境中显示\n\n解决方案如下：\n\n{% highlight tex %}\n-\\xeCJKsetup{AutoFakeBold=true}\n+\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n{% endhighlight %}\n\n### 使用强调`\\emph`而非加粗`\\textbf`\n\n对于需要加粗的段落，建议使用声明式的强调（`\\emph`），而非命令式的加粗（`\\textbf`）。\n\n[Wkibook/LaTeX](https://en.wikibooks.org/wiki/LaTeX/Fonts#Finding_fonts)中提到:\n\n> Do not use bold text in your paragraphs.\n\n[tex.stackexchange/Stefan Kottwitz](http://tex.stackexchange.com/a/1983)也有这样的说明:\n\n> Further, I rarely use physical font commands in my body text.\n> I use them to define styles in the preamble and\n> use the styles in the document afterwards,\n> ensuring consistency and allowing changes to be easily made.\n\n可以参考[此处](http://tex.stackexchange.com/questions/6754/what-is-the-canonical-way-to-redefine-the-emph-command/6757#6757)\n定义强调段落的样式：\n\n{% highlight tex %}\n+% bold emphasized text\n+\\makeatletter\n+\\DeclareRobustCommand{\\em}{\\%\n+  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n+  \\normalfont \\else \\bfseries \\fi}\n+\\makeatother\n{% endhighlight %}\n\n\n### 编译之后的文档输出有乱码\n\n检查`.tex`文档的编码，是否为`UTF-8`：\n\n{% highlight sh %}\nfile -i *.tex\n{% endhighlight %}\n\n### 文献引用编号显示为`[?]`\n\n仔细阅读编译日志，可以找到解决方案：\n\n{% highlight sh %}\nmakeindex idx_finance.idx\nbibtex index.aux\nxelatex index.tex\n+xelatex index.tex\n{% endhighlight %}\n\n也就是说，编译过程中，执行两次编译命令。\n\n### 修改目录中“索引”的层级\n\n如果想要将目录中“索引”的层级提高到“章节”级别，可以定义如下的排版格式：\n\n{% highlight tex %}\n+  \\makeatletter\n+  % Put section depth at the same level as \\chapter.\n+  \\renewcommand*{\\toclevel@section}{0}\n   \\printindex{idx_finance}{Index of Finance}\n+  % Put section depth back to its default value.\n+  \\renewcommand*{\\toclevel@section}{1}\n+  \\makeatother\n{% endhighlight %}\n\n\n### 定义“摘要”章节的样式\n\n参考stackoverflow中的讨论：\n\n{% highlight tex %}\n% http://stackoverflow.com/q/2737326\n+\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n+\\begin{quotation}\n+\\noindent % abstract text\n% Abstract\n+\\end{quotation}\n+\\clearpage\n{% endhighlight %}\n\n\n## 模板样例\n\n{% highlight tex %}\n\\documentclass[a4paper]{book}\n\n% shortcut for scozv's github homepage\n\\usepackage{hyperref}\n\\newcommand{\\scozv}{https://github.com/scozv}\n\n% shortcut for \\ding{213}\n\\newcommand{\\To}{\\ding{213}}\n\n\\usepackage{listings, color}\n% shortcut for inline code snippet, like `code` in markdown\n% \\newcommand{\\cd}[1]{\\colorbox[rgb]{0.86,0.86,0.86}{\\lstinline$#1$}}\n\\newcommand{\\cd}[1]{\\lstinline$#1$}\n\n% shortcut for section, subsection, subsubsection\n% mb stands for member\n\\newcommand{\\mb}[1]{\\subsection*{#1}}\n\\newcommand{\\mmb}[1]{\\subsubsection*{#1}}\n\n% set style for multiple lines code snippet\n\\lstset{numbers=left, numberstyle=\\tiny\n\t, stepnumber=2, numbersep=5pt\n\t, backgroundcolor=\\color[rgb]{0.86,0.86,0.86}\n\t, basicstyle=\\footnotesize\\ttfamily\n\t, breaklines=true}\n\n% set index\n\\usepackage{multind}\n\\makeindex{idx_finance}\n\\newcommand{\\idxf}[1]{\\index{idx_finance}{#1}}\n% heading\n\\setcounter{secnumdepth}{3}\n\n% set multi-ref\n\\usepackage{multibib}\n\\newcommand{\\bibnamec}{References of Programming}\n\\newcites{c}{\\bibnamec}\n\\newcommand{\\bibnamef}{References of Finance}\n\\newcites{f}{\\bibnamef}\n\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n% http://ctan.org/pkg/xecjk\n\\usepackage{xltxtra, xeCJK}\n\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n% Latin\n\\usepackage{fontspec, pifont}\n\\setmainfont{Gentium Book Basic} %[ItalicFont=Gentium Book Basic Bold]\n\n% intertext, trigleq and proof\n\\usepackage{amsmath, amssymb, amsthm}\n\n% bold emphasized text\n\\makeatletter\n\\DeclareRobustCommand{\\em}{\\%\n  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n  \\normalfont \\else \\bfseries \\fi}\n\\makeatother\n\n% tiny margin note\n\\makeatletter\n  \\long\\def\\@ympar#1{\\%\n  \\@savemarbox\\@marbox{\\small #1}%\n  \\global\\setbox\\@currbox\\copy\\@marbox\n  \\@xympar}\n\\makeatother\n\n% reduce the space of itemize\n\\newlength{\\wideitemsep}%\n\\setlength{\\wideitemsep}{.5\\itemsep}%\n\\addtolength{\\wideitemsep}{-7pt}%\n\\let\\olditem\\item\n\\renewcommand{\\item}{\\setlength{\\itemsep}{\\wideitemsep}\\olditem}\n\n\\begin{document}\n\\title{Introduction of Building Documents with LaTeX}\n\\author{Scott}\n\\date{Aug, 12, 2015}\n\\maketitle\n\n\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n\\begin{quotation}\n\\noindent % abstract text\nThis artical will give brief introduction for TeX and LaTeX,\nthen discuss a few issues during using LaTeX\nand how to display LaTeX eqation on web page.\nFinally, a LaTeX template will be attached in Appendix.\n\\end{quotation}\n\\clearpage\n\n% no indent of second ... paragraphs of each section\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{1.3ex plus 0.5ex minus 0.3ex}\n\\part{Part I}\n  \\chapter{C01-01}\n    \\include{p1_c01}\n\\part{Part II}\n  \\chapter{C02-01}\n    \\include{p2_c01}\n  \\chapter{C02-02}\n    \\include{p2_c02}\n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamec}\n  \\bibliographystylec{GBT7714-2005NLang}\n  \\bibliographyc{code/ref}\n\n  \\makeatletter\n  % Put section depth at the same level as \\chapter.\n  \\renewcommand*{\\toclevel@section}{0}\n  \\printindex{idx_finance}{Index of Finance}\n  % Put section depth back to its default value.\n  \\renewcommand*{\\toclevel@section}{1}\n  \\makeatother  \n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamef}\n  \\bibliographystylef{GBT7714-2005NLang}\n  \\bibliographyf{finance/ref}\n\n\\appendix\n\\part{Appendix}\n\\chapter{Appendix I}\n\\include{appendix}\n\\end{document}\n{% endhighlight %}\n\n\n# 参考文献\n\n[^TUG01]: [Pointers to Frequently Asked and Answered Questions](https://tug.org/tex-ptr-faq). tug.org. [OL]\n\n[^WIK01]: [`LaTeX`的趣味应用](https://zh.wikipedia.org/wiki/LaTeX#.E8.B6.A3.E5.91.B3.E6.87.89.E7.94.A8). wikipedia.org. [OL]\n\n\n[1]: https://en.wikipedia.org/wiki/TeX \"TeX Wikipage\"\n[2]: https://github.com/weijianwen/SJTUThesis \"SJTU Thesis LaTeX Template\"\n[3]: http://web.mit.edu/thesis/tex/ \"MIT Thesis LaTeX Template\"\n","source":"_posts/zh/2015-08-12-introduction-of-building-documents-with-latex.md","raw":"---\nlayout: post\ntitle: \"介绍专业的文档系统LaTeX\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"latex\",\"tex\",\"project\"]\nlang: zh\n---\n{% include JB/setup %}\n\n<!--2015-08-10-introduction-of-building-documents-with-latex-->\n\n# 摘要\n{:.no_toc}\n> `TeX`家族是一个专业的排版系统。本文简要地介绍了`TeX`家族的常见成员，\n> 并整理出了`LaTeX`入门使用过程中会遇到的一些问题，\n>\n> 同时，将演示`LaTeX`在网页中的集成。最后在附录部分，给出了样式模板的参考代码。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `TeX`家族简介\n`TeX`可以视为出版行业的专业排版系统，由[Donald Knuth](http://www-cs-faculty.stanford.edu/~knuth/)于1978年发布，\n当前的稳定版本编号为[$$3.14159265$$] [1]。\n\n`TeX`是脚本化的排版系统，所有的排版格式都是用`TeX`语法描述的。比如使用`\\begin{tabular} \\end{tabular}`来绘制表格。\n`TeX`接收一系列的语法命令和文本内容，经过`TeX`系统编译（macro compiler）之后，输出到显示屏、`DVI`或者`PDF`文档。\n对于同样的一份`TeX`脚本，在任意的环境下编译后的输出文档：格式、字体、间距等都应该是一样的。\n\n在`TeX`的基础上，可以定义一系列的宏包（macro），可以更方便地描述排版样式。比如上述的表格语法，其实来自`LaTeX`宏包，\n如果要使用纯`TeX`（plain `TeX`）来绘制表格，则要使用更多的排版命令\n（参考这两个网页文献 [A](http://www.volkerschatz.com/tex/halign.html)、\n[B](http://tex.stackexchange.com/questions/183235/vertically-aligned-table-in-plaintex-latex-context-etc) ）。\n`LaTeX`是非常流行的宏包，除此之外还有`AMS-TeX`、`XeTeX`等[^TUG01]。\n\n\n# 为什么使用`TeX`家族排版\n和Office这类所见所得的文档处理器不同的是，`TeX`系列使用大量的命令来描述排版格式。\n此外，所见非得的`TeX`和所见即得的Office相比：\n\n* 使用`TeX`，不需要考虑软件的版权费用问题，它是免费的。\n* 使用`TeX`，不需要担心跨软件、跨平台的格式兼容问题。\n  不同的Office软件在排版格式上并不完全兼容，即使同一个软件公司的不同Office版本，\n  格式上也不完全兼容。但是，同样的一份`TeX`文档，经过不同的环境编译之后，输出的排版都是完全一样的。\n* 使用`LaTeX`，精力可以放在撰写文档的内容，而非花大量的时间，用鼠标选中不同的文本段落，调整大量的排版样式。\n* `TeX`更多用于学术领域，很多出版社、大学会提供指定的学术论文模板，\n  比如[MIT thesis templates] [3]或者非官方的[上海交通大学学位论文模板] [2]。使用这些\n  模板，基本上不用考虑排版格式的问题，只要专心写文章就好了。\n* 很多专业的学术语言——复杂的数学公式，化学分子式，五线谱，电路图——是没法仅仅使用Office就能编写的。`TeX`可以[^WIK01]。\n* `TeX`文档是一个普通的文本文档，这意味着，可以进行源代码的版本管理。\n\n类似的所见非得系统还有[`Markdown`](http://daringfireball.net/projects/markdown/)，不过，`Markdown`更常用于网页展示：\n\n* `Markdown`语法定义了不同的`HTML`节点；\n* 不同的`Markdown`处理系统（在线编译网站，或者软件）定义不同的`CSS`样式；\n* 使得同样的`Markdown`文档，最终的展示并不一样。以“`online markdown`”为关键字搜索，\n  可以找到不同的在线`Markdown`编辑网站，它们对同一份文档的渲染结果是不同的。\n\n# `TeX`的使用说明\n目前，我会优先考虑使用`LaTeX`，而非直接使用纯粹的`TeX`，因为前者的使用，能够将精力更多\n的放在撰写的内容上。\n\n使用`LaTeX`的过程中，建议积累自己的一份样式模板，并通过源代码管理这个过程。后面的附录会附上我自己积累的一份样式模板。\n\n目前在`LaTeX`的使用过程中，碰到的问题有如下几类（详细的问题清单，也会附在后文的附录中，供参考）：\n\n* 中文等CJK字体的编译问题：解决方案通常是选用合适的字体，配置不同格式的字体名称，需要留意字体的版权声明；\n* 文档编译出错：这时，需要仔细阅读编译日志，通常用编译日志中的错误信息在网上搜索，都能得到解决方案；\n* 不知道如何实现具体的排版样式：我目前没有精力仔细研究纯粹的`TeX`（plain `TeX`）语法，所以还是通过搜索\n  来解决问题。\n\n可以从`LaTex`的[Wikibook](https://en.wikibooks.org/wiki/LaTeX)开始读起。\n另外官方的[tug.org](http://tug.org/begin.html)和无所不知的[stackoverflow](http://tex.stackexchange.com/)都能找到\n很多帮助文档。\n\n准备一张 _LaTeX Cheat Sheet_ 供参考。\n\n## `TeX`和`LaTeX`的区别\n\n正如前面说的那样：\n\n* `TeX`是一个排版系统的基础；\n* `LaTeX`在`TeX`基础上，定义了很多便捷的样式模板；\n* `XeLaTeX`增加了对`CJK`的更好支持。\n\n### `TeX`注重排版\n\n`TeX`更像一个排版系统，参考[tex.stack问答](http://stackoverflow.com/a/7014579)\n或者[此处](http://www.haverford.edu/mathematics/resources/LaTeX_vs_TeX.php)：\n\n> Learn TeX only if you would like to become a typesetter\n\n> `TeX` is a system designed for typesetting\n\n### `LaTeX`注重内容\n\n`LaTeX`能够更快地编写文档，但是没法体会到`TeX`的很多特性，\n参考[tug.org上的文档](http://www.tug.org/pipermail/texhax/2009-October/013645.html)。\n\n[知乎问答](http://www.zhihu.com/question/20638337)上，也给出了一个分类列表——`TeX`之于`LaTeX`，就像“引擎”之于“格式”。\n[知乎另一份问答](http://www.zhihu.com/question/25033797/answer/29962700)里提到，`TeX`和`LaTeX`的选择，需要一定的权衡：\n\n> 用LaTeX的时候，还真有你想要某些功能而没有的情况。怎么办？两种办法：花钱找高人帮着写；自己写。\n>\n> ...\n>\n> 首先需要熟悉LaTeX的内部命令（大部分是含有@字符的命令），有时候这还不够，\n> 万一碰到\\expandafter，\\futurelet，\\ifvoid等等还得碰底层的primitive（基本命令）。\n> 这个时候，还真就没plain TeX用着舒服。不过舒服也是有代价的，\n> 因为plain TeX很短，能很快看完，但是前提是能够顺利地把TeXbook看完。\n\n\n## 样例模板参考\n\n### `LaTeX`的格式样例\n\n参考附录部分的样例模板。\n\n### 学术论文格式样例\n\n在互联网上总能找到很多学术论文的模板样例：\n\n* [MIT thesis templates] [3]\n* 非官方的[上海交通大学学位论文模板] [2]\n* [ACM LaTeX Style Guide](https://www.acm.org/publications/article-templates/acm-latex-style-guide)\n* [Generic EPFL Template in LaTeX](http://phd.epfl.ch/thesistemplates)，Scala！\n* [Elsevier LaTeX instructions](http://www.elsevier.com/authors/author-schemas/latex-instructions)\n* [AMS LaTeX Guide](https://www2.ametsoc.org/ams/index.cfm/publications/authors/journal-and-bams-authors/author-resources/latex-author-info/preparing-a-latex-manuscript-for-submission/)\n\n### 编译命令参考\n\n{% highlight sh %}\n# 文件名: build.sh\n\n# 编译过程中如果出现异常中断，可能需要清除临时文件\n# 谨慎使用git clean命令，这会删除untracked文件\n# git clean -fx\n\n# 编译入口\nxelatex index.tex\n# 编译索引\nmakeindex idx_finance.idx\n# 编译参考文献\nfor x in {c,f} ; do\n\tbibtex $x\ndone\n\n# 引用参考文献编号\nxelatex index.tex\nxelatex index.tex\n{% endhighlight %}\n\n## `LaTeX`在Web页面的使用——基于`KaTeX`库\n\n如果想要体验在线编辑`TeX`文档，可以试用这两个网站：\n\n* sharelatex.com\n* overleaf.com\n\n这里主要讨论Web页面中使用`LaTeX`语法，显示数学公式。常用的解决方案是在网页中嵌入`MathJax`库，\n然后使用`$$ \\equation $$`语法在网页中显示数学公式。\n\n但是`MathJax`库的加载和公式渲染（render）比较耗时。\n一个替代方案是使用`KaTeX`——出自[Khan Academy](https://khan.github.io/KaTeX/) 团队。\n`KaTeX`的渲染速度得益于它将所有的数学公式用`CSS`的方式展示。\n\n使用`KaTeX`需要注意的是：\n\n* 使用`$$ \\equation $$`而非`$ \\equation $`。\n* 如果需要居中显示行级公式，可以自定义`CSS`。\n* 目前[`KaTeX v0.5.0`](https://github.com/Khan/KaTeX/releases/tag/v0.5.0)并不支持所有的`LaTeX`语法，\n  比如`$$\\LaTeX{}$$`就无法被渲染。\n\n\n### `Jekyll`中的集成`KaTeX`\n\n如下的公式就是通过`KaTeX`渲染的：\n\n$$e^x = \\lim_{n\\rightarrow \\infty} \\sum_{t=0}^{n} ( \\frac{1}{t!}\\cdot x^t )= \\sum_{t=0}^{\\infty} (1 + x + \\frac{1}{2!}x^2+\\frac{1}{3!}x^3+ ... + \\frac{1}{t!}\\cdot x^t)$$\n\n`KaTeX`在`Jekyll`中的集成，可以参考这篇文章（[链接](http://xuc.me/blog/KaTeX-and-Jekyll/)）。\n\n### `gitbook`中的集成`KaTeX`\n`gitbook`已经提供了`KaTeX`的插件：[`gitbook-plugin-katex`](http://plugins.gitbook.com/plugin/katex)。\n\n# 附录\n\n## `LaTeX`使用过程中的问题列表\n\n### LaTeX Font Warning: Font shape undefined\n如果一个字体集，少了粗体定义，则会出现这样的提示。解决方案是，\n手动指定文档中粗体对应的字体：\n\n{% highlight tex %}\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n-\\usepackage{xltxtra}\n-\\setmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+% http://mirror.bjtu.edu.cn/CTAN/macros/xetex/latex/xecjk/xeCJK.pdf\n+\\usepackage{xltxtra, xeCJK}\n+\\setCJKmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+\\xeCJKsetup{AutoFakeBold=true, LoadFandol=false}\n\n\\begin{document}\n\\maketitle\n{% endhighlight %}\n\n### latex error: file `multind.sty' not found\n\nWindows 下的`MiKTeX 2.9`不会出现这样的问题， `Lubuntu 14.04`下的`TeX Live`出现过这样的问题。\ntex.ac.uk下的[一份文档](http://www.tex.ac.uk/cgi-bin/texfaq2html-beta?label=multind) 指出：\n\n> makeidx.sty (is) Part of the LaTeX distribution\n\n所以[该文档](http://bioinforma.weebly.com/random-troubleshooting.html#/)尝试安装`texlive-full`来解决问题:\n\n{% highlight base %}\nsudo apt-get install texlive-full\nsudo texhash\nsudo texconfig\n{% endhighlight %}\n\n如果想要尝试手动安装`multind.sty`，可以按照如下步骤：\n\n* 下载[multind.sty](http://ctan.org/pkg/multind)\n* 参考[Wikibook/LaTeX](http://en.wikibooks.org/wiki/LaTeX/Installing_Extra_Packages#Installing_a_package)安装sty文件\n* `mkdir /usr/share/texmf/tex/latex/multind`\n* `sudo texhash`\n\n### `makeindex finance`不会生成Multi Index页面\n\n`finance`是一个文件名，而非命令。对比如下两个命令：\n\n{% highlight sh %}\nscott@c9 [~/repo/notes] (master *)\n$ makeindex finance\nThis is makeindex, version 2.15 [TeX Live 2013] (kpathsea + Thai support).\nScanning input file finance...done (0 entries accepted, 0 rejected).\nNothing written in finance.ind.\nTranscript written in finance.ilg.\n\nscott@c9 [~/repo/notes] (master *)\n$ makeindex finance.idx\nThis is makeindex, version 2.15 [TeX Live 2013] (kpathsea + Thai support).\nScanning input file finance.idx....done (22 entries accepted, 0 rejected).\nSorting entries....done (106 comparisons).\nGenerating output file finance.ind....done (59 lines written, 0 warnings).\nOutput written in finance.ind.\nTranscript written in finance.ilg.\n{% endhighlight %}\n\n### xeCJK error: \"key-unknown\"\n\n可能会在`Lubuntu 14.04`下遇到这样的问题：\n\n{% highlight sh %}\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n!\n! xeCJK error: \"key-unknown\"\n!\n! Sorry, but xeCJK/options does not have a key called `LoadFandol'.\n!\n! The key `LoadFandol' is being ignored.\n!\n! See the xeCJK documentation for further information.\n!\n! Type <return> to continue.\n!...............................................  \n\nl.37 ...setup{AutoFakeBold=true, LoadFandol=false}\n{% endhighlight %}\n\n解决方案是，更换字体配置：\n\n{% highlight tex %}\n \\usepackage{xltxtra, xeCJK}\n-\\setCJKmainfont[Mapping=tex-text]{WenQuanYi Micro Hei}\n+\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n \\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n+% Latin\n+\\usepackage{fontspec, pifont}\n+\\setmainfont{Gentium Book Basic}\n+\n \\begin{document}\n{% endhighlight %}\n\n### CJK字体的选用\n\n字体的选用，首先要注意版权的问题。\n\n开源的CJK字体，可以选用[文泉驿](http://wenq.org/)，或者[思源黑体](http://blog.typekit.com/alternate/source-han-sans-chs/)。\n建议在配置中指定粗体、斜体等格式对应的字体文件。\n不过，目前并不能顺利地在LaTeX中使用思源黑体， 参考[知乎问答](http://www.zhihu.com/question/24535443)。\n而且使用思源黑体，可能会遇到如下错误：\n\n{% highlight sh %}\nxelatex.exe: The font file could not be found.\nxelatex.exe: Data: Source Sans Pro/OT\n{% endhighlight %}\n\n\n可以参考知乎专题的[解决方案](http://zhuanlan.zhihu.com/LaTeX/19807822)，\n或者stackoverflow上的[问答](http://tex.stackexchange.com/questions/84186/how-can-i-use-source-sans-pro-in-tex-live-2012)。\n\n除此之外，可以为印刷出版物选用经典的`Adobe Song Std`字体，但需留意\n[版权](http://www.adobe.com/products/type/font-licensing/additional-license-rights.html)。\n\n顺带提一下，拉丁字符字体，可选用开源的[`Gentium`](http://scripts.sil.org/cms/scripts/page.php?item_id=Gentium)字体集，\n非常适合印刷出版物。\n\n### CJK字体不能在数学公式环境中显示\n\n解决方案如下：\n\n{% highlight tex %}\n-\\xeCJKsetup{AutoFakeBold=true}\n+\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n{% endhighlight %}\n\n### 使用强调`\\emph`而非加粗`\\textbf`\n\n对于需要加粗的段落，建议使用声明式的强调（`\\emph`），而非命令式的加粗（`\\textbf`）。\n\n[Wkibook/LaTeX](https://en.wikibooks.org/wiki/LaTeX/Fonts#Finding_fonts)中提到:\n\n> Do not use bold text in your paragraphs.\n\n[tex.stackexchange/Stefan Kottwitz](http://tex.stackexchange.com/a/1983)也有这样的说明:\n\n> Further, I rarely use physical font commands in my body text.\n> I use them to define styles in the preamble and\n> use the styles in the document afterwards,\n> ensuring consistency and allowing changes to be easily made.\n\n可以参考[此处](http://tex.stackexchange.com/questions/6754/what-is-the-canonical-way-to-redefine-the-emph-command/6757#6757)\n定义强调段落的样式：\n\n{% highlight tex %}\n+% bold emphasized text\n+\\makeatletter\n+\\DeclareRobustCommand{\\em}{\\%\n+  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n+  \\normalfont \\else \\bfseries \\fi}\n+\\makeatother\n{% endhighlight %}\n\n\n### 编译之后的文档输出有乱码\n\n检查`.tex`文档的编码，是否为`UTF-8`：\n\n{% highlight sh %}\nfile -i *.tex\n{% endhighlight %}\n\n### 文献引用编号显示为`[?]`\n\n仔细阅读编译日志，可以找到解决方案：\n\n{% highlight sh %}\nmakeindex idx_finance.idx\nbibtex index.aux\nxelatex index.tex\n+xelatex index.tex\n{% endhighlight %}\n\n也就是说，编译过程中，执行两次编译命令。\n\n### 修改目录中“索引”的层级\n\n如果想要将目录中“索引”的层级提高到“章节”级别，可以定义如下的排版格式：\n\n{% highlight tex %}\n+  \\makeatletter\n+  % Put section depth at the same level as \\chapter.\n+  \\renewcommand*{\\toclevel@section}{0}\n   \\printindex{idx_finance}{Index of Finance}\n+  % Put section depth back to its default value.\n+  \\renewcommand*{\\toclevel@section}{1}\n+  \\makeatother\n{% endhighlight %}\n\n\n### 定义“摘要”章节的样式\n\n参考stackoverflow中的讨论：\n\n{% highlight tex %}\n% http://stackoverflow.com/q/2737326\n+\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n+\\begin{quotation}\n+\\noindent % abstract text\n% Abstract\n+\\end{quotation}\n+\\clearpage\n{% endhighlight %}\n\n\n## 模板样例\n\n{% highlight tex %}\n\\documentclass[a4paper]{book}\n\n% shortcut for scozv's github homepage\n\\usepackage{hyperref}\n\\newcommand{\\scozv}{https://github.com/scozv}\n\n% shortcut for \\ding{213}\n\\newcommand{\\To}{\\ding{213}}\n\n\\usepackage{listings, color}\n% shortcut for inline code snippet, like `code` in markdown\n% \\newcommand{\\cd}[1]{\\colorbox[rgb]{0.86,0.86,0.86}{\\lstinline$#1$}}\n\\newcommand{\\cd}[1]{\\lstinline$#1$}\n\n% shortcut for section, subsection, subsubsection\n% mb stands for member\n\\newcommand{\\mb}[1]{\\subsection*{#1}}\n\\newcommand{\\mmb}[1]{\\subsubsection*{#1}}\n\n% set style for multiple lines code snippet\n\\lstset{numbers=left, numberstyle=\\tiny\n\t, stepnumber=2, numbersep=5pt\n\t, backgroundcolor=\\color[rgb]{0.86,0.86,0.86}\n\t, basicstyle=\\footnotesize\\ttfamily\n\t, breaklines=true}\n\n% set index\n\\usepackage{multind}\n\\makeindex{idx_finance}\n\\newcommand{\\idxf}[1]{\\index{idx_finance}{#1}}\n% heading\n\\setcounter{secnumdepth}{3}\n\n% set multi-ref\n\\usepackage{multibib}\n\\newcommand{\\bibnamec}{References of Programming}\n\\newcites{c}{\\bibnamec}\n\\newcommand{\\bibnamef}{References of Finance}\n\\newcites{f}{\\bibnamef}\n\n% CJK for XeTeX\n% http://www.ctan.org/pkg/xetexref\n% https://zh.wikipedia.org/wiki/XeTeX\n% http://ctan.org/pkg/xecjk\n\\usepackage{xltxtra, xeCJK}\n\\setCJKmainfont[BoldFont=Adobe Heiti Std]{Adobe Song Std}\n\\xeCJKsetup{AutoFakeBold=true, CJKmath=true}\n\n% Latin\n\\usepackage{fontspec, pifont}\n\\setmainfont{Gentium Book Basic} %[ItalicFont=Gentium Book Basic Bold]\n\n% intertext, trigleq and proof\n\\usepackage{amsmath, amssymb, amsthm}\n\n% bold emphasized text\n\\makeatletter\n\\DeclareRobustCommand{\\em}{\\%\n  \\@nomath\\em \\if b\\expandafter\\@car\\f@series\\@nil\n  \\normalfont \\else \\bfseries \\fi}\n\\makeatother\n\n% tiny margin note\n\\makeatletter\n  \\long\\def\\@ympar#1{\\%\n  \\@savemarbox\\@marbox{\\small #1}%\n  \\global\\setbox\\@currbox\\copy\\@marbox\n  \\@xympar}\n\\makeatother\n\n% reduce the space of itemize\n\\newlength{\\wideitemsep}%\n\\setlength{\\wideitemsep}{.5\\itemsep}%\n\\addtolength{\\wideitemsep}{-7pt}%\n\\let\\olditem\\item\n\\renewcommand{\\item}{\\setlength{\\itemsep}{\\wideitemsep}\\olditem}\n\n\\begin{document}\n\\title{Introduction of Building Documents with LaTeX}\n\\author{Scott}\n\\date{Aug, 12, 2015}\n\\maketitle\n\n\\chapter*{\\centering \\begin{normalsize}Abstract\\end{normalsize}}\n\\begin{quotation}\n\\noindent % abstract text\nThis artical will give brief introduction for TeX and LaTeX,\nthen discuss a few issues during using LaTeX\nand how to display LaTeX eqation on web page.\nFinally, a LaTeX template will be attached in Appendix.\n\\end{quotation}\n\\clearpage\n\n% no indent of second ... paragraphs of each section\n\\setlength{\\parindent}{0pt}\n\\setlength{\\parskip}{1.3ex plus 0.5ex minus 0.3ex}\n\\part{Part I}\n  \\chapter{C01-01}\n    \\include{p1_c01}\n\\part{Part II}\n  \\chapter{C02-01}\n    \\include{p2_c01}\n  \\chapter{C02-02}\n    \\include{p2_c02}\n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamec}\n  \\bibliographystylec{GBT7714-2005NLang}\n  \\bibliographyc{code/ref}\n\n  \\makeatletter\n  % Put section depth at the same level as \\chapter.\n  \\renewcommand*{\\toclevel@section}{0}\n  \\printindex{idx_finance}{Index of Finance}\n  % Put section depth back to its default value.\n  \\renewcommand*{\\toclevel@section}{1}\n  \\makeatother  \n\n  \\cleardoublepage\n  \\phantomsection\n  \\addcontentsline{toc}{chapter}{\\bibnamef}\n  \\bibliographystylef{GBT7714-2005NLang}\n  \\bibliographyf{finance/ref}\n\n\\appendix\n\\part{Appendix}\n\\chapter{Appendix I}\n\\include{appendix}\n\\end{document}\n{% endhighlight %}\n\n\n# 参考文献\n\n[^TUG01]: [Pointers to Frequently Asked and Answered Questions](https://tug.org/tex-ptr-faq). tug.org. [OL]\n\n[^WIK01]: [`LaTeX`的趣味应用](https://zh.wikipedia.org/wiki/LaTeX#.E8.B6.A3.E5.91.B3.E6.87.89.E7.94.A8). wikipedia.org. [OL]\n\n\n[1]: https://en.wikipedia.org/wiki/TeX \"TeX Wikipage\"\n[2]: https://github.com/weijianwen/SJTUThesis \"SJTU Thesis LaTeX Template\"\n[3]: http://web.mit.edu/thesis/tex/ \"MIT Thesis LaTeX Template\"\n","slug":"zh-2015-08-12-introduction-of-building-documents-with-latex","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryu9005eyxcbj34eyb1r"},{"layout":"post","title":"Bitbucket Cloud的Issue至JIRA Server的完全迁移指南","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文给出Bitbucket Cloud的Issue系统至JIRA Server的完整迁移方案，包括:\n>\n> * Issue的导入；\n> * Bitbucket和JIRA的双向关联；\n> * 修订历史的Git提交记录，从而与JIRA关联\n>\n> 如下话题，本文不作解释:\n>\n> * 为什么是JIRA；\n> * 为什么用Bitbucket；\n> * 为什么我只用Ubuntu 14.04 Server操作系统\n>\n> 完整的迁移方案和迁移脚本，需要阅读英文版本。\n\n<!--more-->\n\n\n# 项目架构的两个核心思想\n\n低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，\n会应用，而且必须应用的两个核心概念。\n\n我在另外一篇文章里面会更详细的解释这两个思想。\n\n## 低耦合的原则\n\n* 将项目分割成相互独立的节点\n* 每一个节点是独立的源代码库\n* 节点的交互只能通过接口文档，相互之间不需要访问对方的源代码，不需要了解对方的实现细节\n\n## 基本的持续集成\n\n* 代码的测试覆盖率至少80%\n* 基本架构节点的覆盖率必须达到100%\n* 使用`FakeRequest`对`RESTful API`进行测试\n* 考虑UI测试\n* 不写测试的代码就是耍流氓\n* 每一次代码的提交需要满足Commit Acceptance Policy [^CAP01]，即：\n   * 提交的message中包含issue编号\n   * 该issue处于未解决的状态\n   * 该issue有指定的resolver\n* 每一次的提交需要由CI系统测试\n* 如果测试失败，代码提交者应该收到通知\n* __每一次commit必须关联到Issue系统__\n* __每一个issue都要包含一系列的代码commits__\n* 每一次的CI编译环境，和上一次的环境无关\n* 持续编译和持续发布\n\n# 完整的迁移指南\n\n更详细的迁移解释需要阅读英文文档。\n\n* 在Ubuntu上安装JIRA Server\n* 在JIRA里面创建Project\n* 导入Issue数据\n* 在JIRA Server中设置DVCS Accounts\n* 在Bitbucket Cloud里面指定JIRA Link\n* 修订历史代码提交信息，如下\n{% highlight sh %}\n# 警告：如下的代码将会重写所有的历史commits信息\n# 警告：如下的代码将会重写所有的历史commits信息\n# 警告：如下的代码将会重写所有的历史commits信息\ngit clone --no-hardlinks git@bitbucket.org:scozv/ls-core-restful.git\ngit filter-branch -f --msg-filter \\\n    'sed \"s/#\\([0-9][0-9]*\\)/LS-\\1/g\"'\ngit reset --hard\ngit gc --aggressive\ngit prune\n{% endhighlight %}\n\n# JIRA安装脚本\n\n{% highlight sh %}\n# JAVA\nsudo add-apt-repository ppa:openjdk-r/ppa\nsudo apt-get update\nsudo apt-get install -y openjdk-8-jdk openjdk-8-jre openjdk-8-jre-headless\n\n# MySQL\nsudo apt-get install -y mysql-server mysql-client\n\n# JIRA\n# JIRA_BINARY=\"atlassian-jira-software-7.1.2-jira-7.1.2-x64.bin\"\nJIRA_BINARY=\"atlassian-jira-6.4.13-x64.bin\"\nwget -nc -P ~/Downloads/ \\\n  \"https://www.atlassian.com/software/jira/downloads/binary/$JIRA_BINARY\"\n\nchmod a+x ~/Downloads/$JIRA_BINARY\nsudo bash ~/Downloads/$JIRA_BINARY\n\nJIRA_HOME=\"/opt/atlassian/jira\"\n\nsudo vi $JIRA_HOME/bin/setenv.sh\n# JVM_SUPPORT_RECOMMENDED_ARGS=\"-Datlassian.plugins.enable.wait=300 -Xms64m -Xmx256m -Xss2m -XX:MaxPermSize=128m\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n# sudo bash /opt/atlassian/jira/uninstall\n\n# JIRA MySQL\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nMS_JIRA_DB=jiradb\nMS_JIRA_DBUSER=jiradbuser\nMS_JIRA_PWD=\"*ABCDEFJHIGKLMNOPQRSTUVWXYZ\"\nmysql -uroot -p\n> CREATE USER '$MS_JIRA_DBUSER'@'localhost' IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> CREATE DATABASE $MS_JIRA_DB CHARACTER SET utf8 COLLATE utf8_bin;\n> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX\n> | on $MS_JIRA_DB.* TO '$MS_JIRA_DBUSER'@'localhost'\n> | IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> flush privileges;\n> SHOW GRANTS FOR '$MS_JIRA_DBUSER'@'localhost';\n\nMYSQL_CONF=\"/etc/mysql/my.cnf\"\nsudo cp $MYSQL_CONF $MYSQL_CONF.before_JIRA\nsudo sed -i '/^default_storage_engine/c\\default_storage_engine=INNODB' $MYSQL_CONF\nsudo sed -i '/^max_allowed_packet/c\\max_allowed_packet=256M' $MYSQL_CONF\nsudo sed -i '/innodb_log_file_size/c\\innodb_log_file_size=256M' $MYSQL_CONF\nsudo sed -i '/^sql_mode.*=.*NO_AUTO_VALUE_ON_ZERO/c\\#sql_mode = NO_AUTO_VALUE_ON_ZERO' $MYSQL_CONF\nsudo bash /etc/init.d/mysql stop\nsudo bash /etc/init.d/mysql start\n\nJIRA_HOME=\"/opt/atlassian/jira\"\nMYSQL_J_BINARY=\"mysql-connector-java-5.1.38.tar.gz\"\nwget -nc -P ~/Downloads/ \"http://dev.mysql.com/get/Downloads/Connector-J/$MYSQL_J_BINARY\"\nsudo tar zxf ~/Downloads/$MYSQL_J_BINARY -C $JIRA_HOME/lib/\nsudo cp $JIRA_HOME/lib/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar  $JIRA_HOME/lib/\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/\nsudo bash $JIRA_HOME/bin/config.sh\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## JIRA 6 only\n# https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/installation\n# https://confluence.atlassian.com/display/UPM/Installing+Add-ons#Installingadd-ons-installingversion1InstallingPlugins1typeadd-onsinJIRAandBamboo\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nJIRA_CAP_BINARY=\"commitacceptance-1.6.0.jar\"\nJIRA_ADDON_SITE=\"https://marketplace-cdn.atlassian.com/files/artifact/5f9ba63d-ee6c-4633-9b7a-a26c644a2434\"\nwget -nc -P ~/Downloads/ $JIRA_ADDON_SITE/$JIRA_CAP_BINARY\nsudo cp ~/Downloads/$JIRA_CAP_BINARY $JIRA_HOME/atlassian-jira/WEB-INF/lib/\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## stop-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash /etc/init.d/mysql stop\n## start-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash /etc/init.d/mysql start\nsudo bash $JIRA_HOME/bin/start-jira.sh\n{% endhighlight %}\n\n# References\n\n[^CAP01]: [JIRA Commit Acceptance Plugin](https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/overview) by Atlassian, Version 1.6.0 • JIRA Server 5.0 - 6.4.13 • Released 2012-02-22\n[^CAP02]: [Commit Policy Plugin for JIRA](https://marketplace.atlassian.com/plugins/com.midori.jira.plugin.jira-commit-policy-plugin/server/overview) by Midori Global Consulting Kft.\n[^ATL_jira_install]: [Installing JIRA applications on Linux](https://confluence.atlassian.com/adminjiraserver071/installing-jira-applications-on-linux-802592173.html)\n[^ATL_maria_null]: [JIRA Supported Platforms](https://confluence.atlassian.com/adminjiraserver071/supported-platforms-802592168.html)\n[^ATL_maria_null_2]: [JIRA should support MariaDB](https://jira.atlassian.com/browse/JRA-32347)\n[^ATL_dvcs]: [Connect Bitbucket Cloud to JIRA Server applications](https://confluence.atlassian.com/bitbucket/connect-bitbucket-cloud-to-jira-server-applications-814208991.html)\n[^GIT]: [git-filter-branch - Rewrite branches](https://git-scm.com/docs/git-filter-branch)\n[^GIT2]: [Extract to Git submodule](http://will.willandorla.com/extract-to-git-submodule)\n[^DCON-379]: [Allow configurable refresh times for commit checks](https://jira.atlassian.com/browse/DCON-379)\n","source":"_posts/zh/2016-04-05-fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server.md","raw":"---\nlayout: post\ntitle: \"Bitbucket Cloud的Issue至JIRA Server的完全迁移指南\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"markdown\",\"ci\",\"git\", \"jira\", \"project\"]\nlang: zh\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文给出Bitbucket Cloud的Issue系统至JIRA Server的完整迁移方案，包括:\n>\n> * Issue的导入；\n> * Bitbucket和JIRA的双向关联；\n> * 修订历史的Git提交记录，从而与JIRA关联\n>\n> 如下话题，本文不作解释:\n>\n> * 为什么是JIRA；\n> * 为什么用Bitbucket；\n> * 为什么我只用Ubuntu 14.04 Server操作系统\n>\n> 完整的迁移方案和迁移脚本，需要阅读英文版本。\n\n<!--more-->\n\n\n# 项目架构的两个核心思想\n\n低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，\n会应用，而且必须应用的两个核心概念。\n\n我在另外一篇文章里面会更详细的解释这两个思想。\n\n## 低耦合的原则\n\n* 将项目分割成相互独立的节点\n* 每一个节点是独立的源代码库\n* 节点的交互只能通过接口文档，相互之间不需要访问对方的源代码，不需要了解对方的实现细节\n\n## 基本的持续集成\n\n* 代码的测试覆盖率至少80%\n* 基本架构节点的覆盖率必须达到100%\n* 使用`FakeRequest`对`RESTful API`进行测试\n* 考虑UI测试\n* 不写测试的代码就是耍流氓\n* 每一次代码的提交需要满足Commit Acceptance Policy [^CAP01]，即：\n   * 提交的message中包含issue编号\n   * 该issue处于未解决的状态\n   * 该issue有指定的resolver\n* 每一次的提交需要由CI系统测试\n* 如果测试失败，代码提交者应该收到通知\n* __每一次commit必须关联到Issue系统__\n* __每一个issue都要包含一系列的代码commits__\n* 每一次的CI编译环境，和上一次的环境无关\n* 持续编译和持续发布\n\n# 完整的迁移指南\n\n更详细的迁移解释需要阅读英文文档。\n\n* 在Ubuntu上安装JIRA Server\n* 在JIRA里面创建Project\n* 导入Issue数据\n* 在JIRA Server中设置DVCS Accounts\n* 在Bitbucket Cloud里面指定JIRA Link\n* 修订历史代码提交信息，如下\n{% highlight sh %}\n# 警告：如下的代码将会重写所有的历史commits信息\n# 警告：如下的代码将会重写所有的历史commits信息\n# 警告：如下的代码将会重写所有的历史commits信息\ngit clone --no-hardlinks git@bitbucket.org:scozv/ls-core-restful.git\ngit filter-branch -f --msg-filter \\\n    'sed \"s/#\\([0-9][0-9]*\\)/LS-\\1/g\"'\ngit reset --hard\ngit gc --aggressive\ngit prune\n{% endhighlight %}\n\n# JIRA安装脚本\n\n{% highlight sh %}\n# JAVA\nsudo add-apt-repository ppa:openjdk-r/ppa\nsudo apt-get update\nsudo apt-get install -y openjdk-8-jdk openjdk-8-jre openjdk-8-jre-headless\n\n# MySQL\nsudo apt-get install -y mysql-server mysql-client\n\n# JIRA\n# JIRA_BINARY=\"atlassian-jira-software-7.1.2-jira-7.1.2-x64.bin\"\nJIRA_BINARY=\"atlassian-jira-6.4.13-x64.bin\"\nwget -nc -P ~/Downloads/ \\\n  \"https://www.atlassian.com/software/jira/downloads/binary/$JIRA_BINARY\"\n\nchmod a+x ~/Downloads/$JIRA_BINARY\nsudo bash ~/Downloads/$JIRA_BINARY\n\nJIRA_HOME=\"/opt/atlassian/jira\"\n\nsudo vi $JIRA_HOME/bin/setenv.sh\n# JVM_SUPPORT_RECOMMENDED_ARGS=\"-Datlassian.plugins.enable.wait=300 -Xms64m -Xmx256m -Xss2m -XX:MaxPermSize=128m\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n# sudo bash /opt/atlassian/jira/uninstall\n\n# JIRA MySQL\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nMS_JIRA_DB=jiradb\nMS_JIRA_DBUSER=jiradbuser\nMS_JIRA_PWD=\"*ABCDEFJHIGKLMNOPQRSTUVWXYZ\"\nmysql -uroot -p\n> CREATE USER '$MS_JIRA_DBUSER'@'localhost' IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> CREATE DATABASE $MS_JIRA_DB CHARACTER SET utf8 COLLATE utf8_bin;\n> GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,ALTER,INDEX\n> | on $MS_JIRA_DB.* TO '$MS_JIRA_DBUSER'@'localhost'\n> | IDENTIFIED BY PASSWORD '$MS_JIRA_PWD';\n> flush privileges;\n> SHOW GRANTS FOR '$MS_JIRA_DBUSER'@'localhost';\n\nMYSQL_CONF=\"/etc/mysql/my.cnf\"\nsudo cp $MYSQL_CONF $MYSQL_CONF.before_JIRA\nsudo sed -i '/^default_storage_engine/c\\default_storage_engine=INNODB' $MYSQL_CONF\nsudo sed -i '/^max_allowed_packet/c\\max_allowed_packet=256M' $MYSQL_CONF\nsudo sed -i '/innodb_log_file_size/c\\innodb_log_file_size=256M' $MYSQL_CONF\nsudo sed -i '/^sql_mode.*=.*NO_AUTO_VALUE_ON_ZERO/c\\#sql_mode = NO_AUTO_VALUE_ON_ZERO' $MYSQL_CONF\nsudo bash /etc/init.d/mysql stop\nsudo bash /etc/init.d/mysql start\n\nJIRA_HOME=\"/opt/atlassian/jira\"\nMYSQL_J_BINARY=\"mysql-connector-java-5.1.38.tar.gz\"\nwget -nc -P ~/Downloads/ \"http://dev.mysql.com/get/Downloads/Connector-J/$MYSQL_J_BINARY\"\nsudo tar zxf ~/Downloads/$MYSQL_J_BINARY -C $JIRA_HOME/lib/\nsudo cp $JIRA_HOME/lib/mysql-connector-java-5.1.38/mysql-connector-java-5.1.38-bin.jar  $JIRA_HOME/lib/\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\nexport JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64/\nsudo bash $JIRA_HOME/bin/config.sh\n# https://confluence.atlassian.com/jira/connecting-jira-to-mysql-185729489.html\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## JIRA 6 only\n# https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/installation\n# https://confluence.atlassian.com/display/UPM/Installing+Add-ons#Installingadd-ons-installingversion1InstallingPlugins1typeadd-onsinJIRAandBamboo\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nJIRA_CAP_BINARY=\"commitacceptance-1.6.0.jar\"\nJIRA_ADDON_SITE=\"https://marketplace-cdn.atlassian.com/files/artifact/5f9ba63d-ee6c-4633-9b7a-a26c644a2434\"\nwget -nc -P ~/Downloads/ $JIRA_ADDON_SITE/$JIRA_CAP_BINARY\nsudo cp ~/Downloads/$JIRA_CAP_BINARY $JIRA_HOME/atlassian-jira/WEB-INF/lib/\nsudo bash $JIRA_HOME/bin/start-jira.sh\n\n## stop-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash $JIRA_HOME/bin/stop-jira.sh\nsudo bash /etc/init.d/mysql stop\n## start-jira\nJIRA_HOME=\"/opt/atlassian/jira\"\nsudo bash /etc/init.d/mysql start\nsudo bash $JIRA_HOME/bin/start-jira.sh\n{% endhighlight %}\n\n# References\n\n[^CAP01]: [JIRA Commit Acceptance Plugin](https://marketplace.atlassian.com/plugins/com.atlassian.jira.ext.commitacceptance/server/overview) by Atlassian, Version 1.6.0 • JIRA Server 5.0 - 6.4.13 • Released 2012-02-22\n[^CAP02]: [Commit Policy Plugin for JIRA](https://marketplace.atlassian.com/plugins/com.midori.jira.plugin.jira-commit-policy-plugin/server/overview) by Midori Global Consulting Kft.\n[^ATL_jira_install]: [Installing JIRA applications on Linux](https://confluence.atlassian.com/adminjiraserver071/installing-jira-applications-on-linux-802592173.html)\n[^ATL_maria_null]: [JIRA Supported Platforms](https://confluence.atlassian.com/adminjiraserver071/supported-platforms-802592168.html)\n[^ATL_maria_null_2]: [JIRA should support MariaDB](https://jira.atlassian.com/browse/JRA-32347)\n[^ATL_dvcs]: [Connect Bitbucket Cloud to JIRA Server applications](https://confluence.atlassian.com/bitbucket/connect-bitbucket-cloud-to-jira-server-applications-814208991.html)\n[^GIT]: [git-filter-branch - Rewrite branches](https://git-scm.com/docs/git-filter-branch)\n[^GIT2]: [Extract to Git submodule](http://will.willandorla.com/extract-to-git-submodule)\n[^DCON-379]: [Allow configurable refresh times for commit checks](https://jira.atlassian.com/browse/DCON-379)\n","slug":"zh-2016-04-05-fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryub005iyxcboitg3p5q"},{"layout":"post","title":"基于低耦合和持续集成的Web架构","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文将要解释，我目前以及未来在项目中，将会一直实践的两个概念：低耦合与持续集成。\n>\n> 本文还没有完全地写完。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 两个核心概念：低耦合与持续集成\n\n低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，\n会应用，而且必须应用的两个核心概念。\n\n简单地讲：\n\n* 低耦合：将系统中的各个**节点**（参看术语），分别独立起来，相互之间无所依赖，\n  不需要关心对方的具体实现方式\n* 持续集成：节点相互独立之后，如何保证：\n   0. 各个节点本身的功能正常\n   0. （系统全局而言）节点之间如何交互，进而协同工作\n\n# 完全独立的低耦合\n\n## 节点的定义\n\n为了便于阅读，我将定义“节点”这个概念：\n\n节点可以是一个抽象的概念，比如`MVC`中的`View`；\n节点也可以是一个物理的部署，比如一个物理部署的数据库服务。\n\n\n节点的封装，没有固定的模式，主要取决于系统层面的宏观考量（后面的章节会详细阐述）。\n比如，就`MVC`的三个部分而言，我们可以：\n\n0. 将`MVC`整体放到一个节点中去实现，比如利用`ASP .NET MVC`，将数据库和整个Web服务部署在一起；\n0. 将`MC`和数据库放到一个节点中去，将视图`View`放到另外的节点。\n   前面的那个节点，可以做成`RESTful API`，后面的那个节点，可以用静态页面，或者移动`App`来绘制；\n0. 我们还可以将数据库独立成第三个节点，比如购买一个`PaaS`的数据库实例；\n0. 我们还可以将数据库拆分为二，一个数据库节点用来存储核心数据，另外一个用来存储用户行为分析的数据；\n0. 我们甚至可以将用户行为分析的数据库和`View`组成一个节点。\n\n以上节点的封装，如下图所示：\n\n\n    ####################################  scenario 01, entire node\n\n    +------------+              +-----------------+\n    | you and me |              | IIS / tomcat    |\n    | Chromium   +------------> | ASP .NET MVC    |\n    |            |              | Database        |\n    | mobile     |              |                 |\n    | device     |              |                 |\n    +------------+              +-----------------+\n\n\n    ####################################  scenario 02, separating View from MV+C\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      | Database           |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +--------------------+\n\n\n    ####################################  scenario 03, separating Database from MV\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      |                    |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                                                           |\n                                                                           |  connection\n                                                                           |  string\n                                                                           |\n                                                                           |\n                                                                         +-+------------------+\n                                                                         | PaaS               |\n                                                                         | Database+aaS       |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         +--------------------+\n\n\n\n\n    ####################################  scenario 04, multiple Databases\n\n\n                                                                          +--------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | Core Business      |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n     +-------------+             +-----------------+                      +-+------------------+\n     | you and me  |             | View            |    HTTP Request      | RESTful API        |\n     | Chromium    +-----------> | React.js        +--------------------> | http://spray.io/   |\n     |             |             | static HTML page|                      |                    |\n     | mobile      |             | mobile App      |                      |                    |\n     | device      |             |                 |                      |                    |\n     |             |             |                 | <--------------------+                    |\n     +-------------+             +-----------------+    HTTP Response     +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n                                                                          +-+------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | user-agent data    |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +--------------------+\n\n\n\n\n     ####################################  scenario 05, separating and combination\n\n     +------------+              +-----------------+                      +--------------------+\n     | you and me |              | View            |    HTTP Request      | RESTful API        |\n     | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n     |            |              | static HTML page|                      |                    |\n     | mobile     |              | mobile App      |                      |                    |\n     | device     |              |                 |                      |                    |\n     |            |              |                 | <--------------------+                    |\n     +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                 | Database        |                        |\n                                 |                 |                        | connection\n                                 | user-agent data |                        | string\n                                 |                 |                        |\n                                 |                 |                        |\n                                 |                 |                        |\n                                 +-----------------+                      +-+-------------------+\n                                                                          | PaaS                |\n                                                                          | Database+aaS        |\n                                                                          |                     |\n                                                                          | Core Business       |\n                                                                          |                     |\n                                                                          |                     |\n                                                                          +---------------------+\n\n\n\n\n## 独立的Server\n\n我们将业务的处理，独立成一个`RESTful API`的`Server`。\n\n## 独立的View\n\n我们将用户页面的展示独立出来。\n\n## 各个独立部分的测试\n\n`RESTful API`的测试可以`mock` 一系列的`HTTP Request`进行，从而\n不依赖于用户页面的实现方式。\n\n反之，用户页面的测试，可以`mock`  一系列的`HTTP Response`，从而不依赖于服务的实现方式。\n\n## 独立节点的交互\n\n不同节点的交互，需要有一个统一的接口文档，比如一份`RESTful API`的接口文档。\n每一个接口需要指定如下的接口信息：\n\n* HTTP Method，比如`GET`、 `POST` 、`DELETE` 、`PUT`等\n* URL\n* Payload ，需要传递给Server的数据，\n* HTTP Response，返回给Client的数据\n* HTTP Header，可选\n\n接口文档是不同节点交互的唯一桥梁，节点之间不需要了解对方节点具体实现的细节。\n\n## 独立的程度\n\n节点的独立程度，取决于系统整体的考量，从上面的几个scenario可以看出，\n我们既可以把数据库放在某一个节点之内，也可以把他独立出来。\n\n# 独立与集成\n\n## 低耦合与持续集成之间的矛盾\n\n低耦合将节点独立开来，为了让节点之间能够协同工作，\n我们需要保证：\n\n* 节点本身是功能正常的\n* 节点完全参照接口文档\n\n## 构造多个独立节点协调性的测试方案\n\n参照接口文档，各个节点可以`mock`需要获得的数据，比如，\n\n* `RESTful API`的测试可以`mock` 一系列的`HTTP Request`\n* View的测试，可以`mock`  一系列的`HTTP Response`\n\n# 完备的持续集成\n\n## 独立节点的完备测试\n\n[之前的文章](http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration)中也提到：\n\n* 需要完成单元测试\n* 需要`mock`，从而完成一系列的BDD测试\n* 核心建模的测试覆盖率需要达到100%\n* 尽可能地引入UI测试\n\n## 持续的代码提交流程\n\n[之前的文章](http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration)中也提到：\n\n* commit 和 issue需要相互关联，以便追溯\n* 关闭的issue，不再接受commit\n* 每一次commit，需要被测试验证\n\n## 持续的发布流程\n\n# 总结\n\n## 抽象的概念应该先于具体的技术实现\n\n当我们提到`MVC`的时候，不能一味的把`MVC`看成一个不可分割的整体。这三个字母只是一个概念。\n\n具体的技术实现是在其之后的。如果将具体的技术实现放到第一位，往往会限制我们的思想。\n\n## 技术是一个工具\n\n就如设计模式和语言没有什么关系一样（[参考文章](http://coolshell.cn/articles/8961.html)），\n技术也是概念的一个实现。\n\n当然，技术作为工具，在实现某一个抽象的概念的时候，有的可以更加便利的实现。\n\n## 在低耦合节点中更换技术\n\n独立的节点，允许，节点本身更换，具体的技术，因为，对于其它节点而言，本身只需要按照接口文档去实现就好了。\n\n## 持续集成保证低耦合节点的交互\n","source":"_posts/zh/2016-05-05-a-low-coupling-architecture-of-the-web-solution-with-continuous-integration.md","raw":"---\nlayout: post\ntitle: \"基于低耦合和持续集成的Web架构\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"ci\", \"project\",\"architecture\"]\nlang: zh\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文将要解释，我目前以及未来在项目中，将会一直实践的两个概念：低耦合与持续集成。\n>\n> 本文还没有完全地写完。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 两个核心概念：低耦合与持续集成\n\n低耦合（Loose Coupling）与持续集成（CI）这两个概念，是我目前以及未来在项目实践中，\n会应用，而且必须应用的两个核心概念。\n\n简单地讲：\n\n* 低耦合：将系统中的各个**节点**（参看术语），分别独立起来，相互之间无所依赖，\n  不需要关心对方的具体实现方式\n* 持续集成：节点相互独立之后，如何保证：\n   0. 各个节点本身的功能正常\n   0. （系统全局而言）节点之间如何交互，进而协同工作\n\n# 完全独立的低耦合\n\n## 节点的定义\n\n为了便于阅读，我将定义“节点”这个概念：\n\n节点可以是一个抽象的概念，比如`MVC`中的`View`；\n节点也可以是一个物理的部署，比如一个物理部署的数据库服务。\n\n\n节点的封装，没有固定的模式，主要取决于系统层面的宏观考量（后面的章节会详细阐述）。\n比如，就`MVC`的三个部分而言，我们可以：\n\n0. 将`MVC`整体放到一个节点中去实现，比如利用`ASP .NET MVC`，将数据库和整个Web服务部署在一起；\n0. 将`MC`和数据库放到一个节点中去，将视图`View`放到另外的节点。\n   前面的那个节点，可以做成`RESTful API`，后面的那个节点，可以用静态页面，或者移动`App`来绘制；\n0. 我们还可以将数据库独立成第三个节点，比如购买一个`PaaS`的数据库实例；\n0. 我们还可以将数据库拆分为二，一个数据库节点用来存储核心数据，另外一个用来存储用户行为分析的数据；\n0. 我们甚至可以将用户行为分析的数据库和`View`组成一个节点。\n\n以上节点的封装，如下图所示：\n\n\n    ####################################  scenario 01, entire node\n\n    +------------+              +-----------------+\n    | you and me |              | IIS / tomcat    |\n    | Chromium   +------------> | ASP .NET MVC    |\n    |            |              | Database        |\n    | mobile     |              |                 |\n    | device     |              |                 |\n    +------------+              +-----------------+\n\n\n    ####################################  scenario 02, separating View from MV+C\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      | Database           |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +--------------------+\n\n\n    ####################################  scenario 03, separating Database from MV\n\n    +------------+              +-----------------+                      +--------------------+\n    | you and me |              | View            |    HTTP Request      | RESTful API        |\n    | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n    |            |              | static HTML page|                      |                    |\n    | mobile     |              | mobile App      |                      |                    |\n    | device     |              |                 |                      |                    |\n    |            |              |                 | <--------------------+                    |\n    +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                                                           |\n                                                                           |  connection\n                                                                           |  string\n                                                                           |\n                                                                           |\n                                                                         +-+------------------+\n                                                                         | PaaS               |\n                                                                         | Database+aaS       |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         |                    |\n                                                                         +--------------------+\n\n\n\n\n    ####################################  scenario 04, multiple Databases\n\n\n                                                                          +--------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | Core Business      |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n     +-------------+             +-----------------+                      +-+------------------+\n     | you and me  |             | View            |    HTTP Request      | RESTful API        |\n     | Chromium    +-----------> | React.js        +--------------------> | http://spray.io/   |\n     |             |             | static HTML page|                      |                    |\n     | mobile      |             | mobile App      |                      |                    |\n     | device      |             |                 |                      |                    |\n     |             |             |                 | <--------------------+                    |\n     +-------------+             +-----------------+    HTTP Response     +-+------------------+\n                                                                            |\n                                                                            | connection\n                                                                            | string\n                                                                            |\n                                                                            |\n                                                                          +-+------------------+\n                                                                          | PaaS               |\n                                                                          | Database+aaS       |\n                                                                          |                    |\n                                                                          | user-agent data    |\n                                                                          |                    |\n                                                                          |                    |\n                                                                          +--------------------+\n\n\n\n\n     ####################################  scenario 05, separating and combination\n\n     +------------+              +-----------------+                      +--------------------+\n     | you and me |              | View            |    HTTP Request      | RESTful API        |\n     | Chromium   +------------> | React.js        +--------------------> | http://spray.io/   |\n     |            |              | static HTML page|                      |                    |\n     | mobile     |              | mobile App      |                      |                    |\n     | device     |              |                 |                      |                    |\n     |            |              |                 | <--------------------+                    |\n     +------------+              +-----------------+    HTTP Response     +-+------------------+\n                                 | Database        |                        |\n                                 |                 |                        | connection\n                                 | user-agent data |                        | string\n                                 |                 |                        |\n                                 |                 |                        |\n                                 |                 |                        |\n                                 +-----------------+                      +-+-------------------+\n                                                                          | PaaS                |\n                                                                          | Database+aaS        |\n                                                                          |                     |\n                                                                          | Core Business       |\n                                                                          |                     |\n                                                                          |                     |\n                                                                          +---------------------+\n\n\n\n\n## 独立的Server\n\n我们将业务的处理，独立成一个`RESTful API`的`Server`。\n\n## 独立的View\n\n我们将用户页面的展示独立出来。\n\n## 各个独立部分的测试\n\n`RESTful API`的测试可以`mock` 一系列的`HTTP Request`进行，从而\n不依赖于用户页面的实现方式。\n\n反之，用户页面的测试，可以`mock`  一系列的`HTTP Response`，从而不依赖于服务的实现方式。\n\n## 独立节点的交互\n\n不同节点的交互，需要有一个统一的接口文档，比如一份`RESTful API`的接口文档。\n每一个接口需要指定如下的接口信息：\n\n* HTTP Method，比如`GET`、 `POST` 、`DELETE` 、`PUT`等\n* URL\n* Payload ，需要传递给Server的数据，\n* HTTP Response，返回给Client的数据\n* HTTP Header，可选\n\n接口文档是不同节点交互的唯一桥梁，节点之间不需要了解对方节点具体实现的细节。\n\n## 独立的程度\n\n节点的独立程度，取决于系统整体的考量，从上面的几个scenario可以看出，\n我们既可以把数据库放在某一个节点之内，也可以把他独立出来。\n\n# 独立与集成\n\n## 低耦合与持续集成之间的矛盾\n\n低耦合将节点独立开来，为了让节点之间能够协同工作，\n我们需要保证：\n\n* 节点本身是功能正常的\n* 节点完全参照接口文档\n\n## 构造多个独立节点协调性的测试方案\n\n参照接口文档，各个节点可以`mock`需要获得的数据，比如，\n\n* `RESTful API`的测试可以`mock` 一系列的`HTTP Request`\n* View的测试，可以`mock`  一系列的`HTTP Response`\n\n# 完备的持续集成\n\n## 独立节点的完备测试\n\n[之前的文章](http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration)中也提到：\n\n* 需要完成单元测试\n* 需要`mock`，从而完成一系列的BDD测试\n* 核心建模的测试覆盖率需要达到100%\n* 尽可能地引入UI测试\n\n## 持续的代码提交流程\n\n[之前的文章](http://scozv.github.io/help/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server#continuous-integration)中也提到：\n\n* commit 和 issue需要相互关联，以便追溯\n* 关闭的issue，不再接受commit\n* 每一次commit，需要被测试验证\n\n## 持续的发布流程\n\n# 总结\n\n## 抽象的概念应该先于具体的技术实现\n\n当我们提到`MVC`的时候，不能一味的把`MVC`看成一个不可分割的整体。这三个字母只是一个概念。\n\n具体的技术实现是在其之后的。如果将具体的技术实现放到第一位，往往会限制我们的思想。\n\n## 技术是一个工具\n\n就如设计模式和语言没有什么关系一样（[参考文章](http://coolshell.cn/articles/8961.html)），\n技术也是概念的一个实现。\n\n当然，技术作为工具，在实现某一个抽象的概念的时候，有的可以更加便利的实现。\n\n## 在低耦合节点中更换技术\n\n独立的节点，允许，节点本身更换，具体的技术，因为，对于其它节点而言，本身只需要按照接口文档去实现就好了。\n\n## 持续集成保证低耦合节点的交互\n","slug":"zh-2016-05-05-a-low-coupling-architecture-of-the-web-solution-with-continuous-integration","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryud005lyxcbckruqlw5"},{"layout":"post","title":"一套简洁的基于Git的线性分支管理工作流","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文受`GitFlow` [^gitflow] 和`Anti-GitFlow` [^gitflow_anti_01] [^gitflow_anti_02]的启发，\n> 并在使用了`GitFlow`一段时间之后，提出了一套简洁的基于Git的线性分支管理工作流。\n> 简洁不仅仅是命令接口（`gitl`）的简单，同时也保证背后的分支简洁、线性。\n>\n> 本文还没有最终完成，`gitl`接口还没有实现，同时，还有一些没有想明白的问题——文中会一一列明。\n>\n> 在`gitl`实现之前，我将继续使用`GitFlow`。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 总体原则\n\n* 工作流背后的分支管理简洁明了\n* 设计一个可在团队中使用的tool或者命令行\n* 该命令行的接口简单\n* 文章中提到的release，不包括release的配置文件\n* 该工作流包含了一套默认的版本命名规则，这样命令行的接口不需要手动指定版本\n\n# 分支的最终效果图\n\n我们想实现的版本管理效果如图，右边同步的一个分支`/release/3.2.0`叫做`sprint release`\n（见 **术语** 中对此的解释），\n在将来的讨论中，可能会取消这个分支：\n\n{% highlight raw %}\n\n                             ^\n                             |\n                             |\n                             |                    \n                             |\n                             |                                                ^\n      ^   OR abort feature   |                                                |\n      | XXXXXXXXXXXXXXXXXXX> |                                                |\n      |                      |                                                |\n      |                      |  /release/3.0.0                                |\n      |                      +------------------->                            |\n      |                      |                                                |\n      |                      |                                                |\n      |  /feature/JIRA-404   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |             /release/2.0.1                     |\n                             |                   ^                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   | bugfix                     |\n                             |                   | on /2.0.0                  |\n      ^   accept feature     |                   | release                    |\n      | +------------------> |                   |                            |\n      |                      |  /release/2.0.0   |                            |\n      |                      +-------------------+                            |\n      |                      |                                                |\n      |  /feature/JIRA-200   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |  /release/1.0.0                                |\n                             +-------------------+                            +\n\n                          /master                                 /release/3.2.0\n                                                            [will explain later]\n{% endhighlight %}\n\n# `gitl`，基于该工作流的接口设计\n\n计划用gitl命名上述工作流，接口如下，参考了`GitFlow`的接口风格。\n\n未来实现该接口之后，将会开源。\n\n## `gitl develop` 在master上面常规开发\n\n{% highlight bash %}\ngitl develop { nil | start }\n{% endhighlight %}\n\n## `gitl feature` 处理实验性质的feature分支\n\n定义了开始、放弃和接受feature。\n\n{% highlight bash %}\ngitl feature start [feature_name] { master | [branch_based_on] }\ngitl feature abort [feature_name]\ngitl feature finish [feature_name]\n{% endhighlight %}\n\n## `gitl bugfix` 在master或release分支上处理bugfix\n\n{% highlight bash %}\ngitl bugfix start [bugfix_name] { master | [branch_based_on] }\ngitl bugfix abort [bugfix_name]\ngitl bugfix finish [bugfix_name]\n{% endhighlight %}\n\n## `gitl release` 准备release\n\n该接口需要控制权限。\n\n如果`[release_number]`为空，则基于默认的版本命名规则。\n\n不建议传递版本编号，建议使用默认的版本命名规则。\n\n{% highlight bash %}\ngitl release { -P | -S | -B } start { [release_number] }\ngitl release { -P | -S | -B } abort { [release_number] }\ngitl release { -P | -S | -B } finish { [release_number] }\n{% endhighlight %}\n\n# 基于Git版本管理的几个开发场景\n\n## 术语表\n\n**center-repo**\n\n用作发布的中心源代码库，一般会被`fork`。\n中心库的管理比较严格，通常不接受代码提交，只接受代码的合并（PR Merge）。\n\n**fork-repo**\n\n每一个开发人员从中心库`center-repo`那边`fork`代码。\n\n可以尝试建立两个`remote`：\n\n* `origin`，默认的`fork-repo`地址；\n* `center`，中心库的地址，用于将中心库的更新`rebase`到开发人员的`fork-repo`上面\n\n**三种release**\n\n可能采取的版本管理（三位版本），从左到右：\n\n* 首位表示阶段开发任务的完成，周期一般为两到三个月，该发布可作public release；\n* 次位表示迭代（sprint）的末尾发布，用作内部演示\n* 末尾表示发布之后的特定版本的bugfix，通常只有public release的版本才会出现bugfix。\n  迭代中发现的internal defect，会在下一个迭代中修复。\n\n我们将三位版本号，从左到右，分别对应三种release：\n\n* public release，对应首位版本号，源代码中保留`branch`，并记录`tags`\n* sprint release，对应次位版本号，源代码中不保留`branch`，只记录`tags`\n* bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，\n  将版本号作为新的`branch`名称，删除上一个`public release`的分支，同时记录`tags`\n\n对于各自的分支而言（待完善，通过图形来表示，见笔记本）：\n\n* public release，源代码中保留`branch`，不合并到`master`，该分支只保留bump version等信息\n* sprint release，源代码中只保留一个sprint release分支，master的迭代更改，将`rebase`到这个分支上面\n* bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，\n  将版本号作为新的`branch`名称，删除上一个`public release`的分支，同时记录`tags`\n\n## 场景描述\n\n具体而言，有如下的几个场景：\n\n### 在master上面常规开发\n\n* 开发人员在各自的`fork－repo`上面提交代码，关联JIRA ticket\n\n### 开启实验性质的feature分支\n\n* 默认基于`master`\n* 在`center-repo`上开启分支，可用`feature/JIRA-404`命名，或者\n* 开发人员在各自的`fork-repo`上开启分支，之后`PR`到`center-repo`\n* feature的最终阶段，可以接受或者放弃该分支\n\n如果放弃feature：\n\n* 各个`fork-repo`就该分支`PR`到`center-repo`\n* `center-repo`合并各个`PR`\n* `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n\n如果接受feature：\n\n* 各个`fork-repo`就该分支`PR`到`center-repo`\n* `center-repo`合并各个`PR`\n* `center-repo`合并当前feature到`master`\n* 合并节点标记`tag`，同`branch`名称一致\n* `center-repo`删除当前分支\n\n### 在master上面处理常规的bugfix\n\n* 默认基于`master`\n* 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n* 完成修复之后\n* 合并bugfix分支到`fork-repo`的master上面， 删除本地的 bugfix分支\n\n### public release\n\n{% highlight raw %}\n  step 1                                  step 2\n\n    ^                                       ^\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       | rebase back\n    |             ^                         | to master   ^\n    |             |                         | <-----------# tag n.0.0\n    |             # release                 |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             # bump version            |             # bump version\n    |             |                         |             |\n    |             |                         |             |\n    +-------------+                         +-------------+\n    |                                       |\n    |      /release/n.0.0                   |      /release/n.0.0\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    +                                       +\n\n /master                                 /master\n\n{% endhighlight %}\n\n我们保留每一个public release的分支，具体步骤为：\n\n* 默认基于`master`\n* 在`center-repo`上开启分支，以待发布版本编号命名分支\n* bump version，更新ChangeLog\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 保留release分支\n\n### sprint release\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n. m+1 .0\n  |                            |             |              |             |\n  | rebase to                  |             # bump         |             # bump version\n  | sprint release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.m+1.0        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.m.0            | /n.m.0                     |     /release/n. m+1 .0\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n我们只保留一个sprint release的分支，具体步骤为：\n\n* 将master的更改rebase到上一个sprint release分支，比如release/n.m.0\n* 基于release/n.m.0，创建分支release/n.m+1.0\n* 在新分支上面，bump version等\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 删除`release/n.m.0`分支\n* 保留`release/n.m+1.0`分支\n\nsprint release分支，是分别命名，还是统一命名为`release/sprint`——待定。\n\n### bugfix release\n\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n.0.k+1\n  | bugfix release             |             |              |             |\n  | is ONLY for                |             # bump         |             # bump version\n  | public release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.0.k+1        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 2                |             # bugfix 2\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 1                |             # bugfix 1\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.0.k            | /n.0.k                     |     /release/n.0.k+1\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n仅在public release的版本上做特定的bugfix，具体步骤为：\n\n* 默认基于特定的public release分支\n* 在`center-repo`上开启bugfix分支，以JIRA编号命名分支，比如`bugfix/JIRA-404`\n* 测试，并确认bugfix状态\n* 合并bugfix分支到特定的`release`分支， 删除bugfix分支\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n* 切换到特定的release版本，令其为`release/n.0.k`\n* 注意：此时的release的`HEAD`已经包含了，该特定分支上作过的bugfix了\n* 基于原有的release，创建下一个发布的分支，比如`release/n.0.k+1`\n* bump version，更新ChangeLog\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 删除`release/n.0.k`分支\n* 保留`release/n.0.k+1`分支\n\n### 特定版本的bugfix应用到master上面\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n## 不同场景的原始Git命令\n\n### 在master上面常规开发\n\n{% highlight bash %}\ngit checkout master\n# coding\ngit commit -avm 'JIRA-404 regular development'\ngit push\n{% endhighlight %}\n\n### 开启实验性质的feature分支\n\n{% highlight bash %}\ngit checkout master\ngit branch feature/JIRA-404\ngit checkout feature/JIRA-404\n# coding\ngit commit -avm 'JIRA-404 feature development'\ngit push\n# git push --set-upstream origin feature/JIRA-404\n{% endhighlight %}\n\n如果放弃feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\n# `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n{% endhighlight %}\n\n如果接受feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\ngit checkout master\ngit merge -m 'JIRA-404 accept feature' feature/JIRA-404\ngit tag -a feature/JIRA-404 -m 'JIRA-404 brief description of this feature'\ngit branch -d feature/JIRA-404\ngit push origin :feature/JIRA-404\n{% endhighlight %}\n\n### 在master上面处理常规的bugfix\n\n{% highlight bash %}\n# 默认基于`master`\n# 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n# 完成修复之后\n# 合并bugfix分支到`fork-repo`的master上面， 删除本地的bugfix分支\n{% endhighlight %}\n\n### public release\n\n{% highlight bash %}\ngit checkout master\ngit branch release/n.m.0\ngit checkout release/n.m.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m.0'\ngit tag -a n.m.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m.0\n{% endhighlight %}\n\n###  sprint release\n\n{% highlight bash %}\ngit checkout release/n.m.0\ngit rebase master\ngit branch release/n.m+1.0\ngit checkout release/n.m+1.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m+1.0'\ngit tag -a n.m+1.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m+1.0\ngit branch -d release/n.m.0\ngit push origin :release/n.m.0\n{% endhighlight %}\n\n### bugfix release\n\n{% highlight bash %}\ngit checkout release/n.m.k\ngit branch bugfix/JIRA-404\ngit checkout bugfix/JIRA-404\n# fix and test\ngit checkout release/n.m.k\ngit merge bugfix/JIRA-404\ngit branch -d bugfix/JIRA-404\ngit push origin :bugfix/JIRA-404\n{% endhighlight %}\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n{% highlight bash %}\ngit checkout release/n.0.k\ngit branch release/n.0.k+1\ngit checkout release/n.0.k+1\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.0.k+1'\ngit tag -a n.0.k+1 -m 'JIRA-404 release of n.0.k+1'\ngit checkout master\ngit rebase release/n.0.k+1\ngit branch -d release/n.0.k\ngit push origin :release/n.0.k\n{% endhighlight %}\n\n### 特定版本的bugfix应用到master上面\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n\n# GitFlow or Anti-GitFlow\n\n## 使用GitFlow实现上述场景\n\n## 为什么不使用GitFlow\n\n# 和CI集成\n\n## 提交并测试\n\n## 提交并发布\n\n# 后续\n\n这些问题还需要继续思考：\n\n* 微服务架构下面，各个服务节点都这样控制分支和版本吗，是否繁琐？\n* 本文在未来的实践过程中，可能会更改。\n* 本文提到的工作流，是否和`fork`冲突，参考Atlassian的 _Comparing Workflows_ [^atl_comp_workf] ？\n\n# 参考文献\n\n[^gitflow]: [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) by Vincent Driessen, Jan 05, 2010\n[^gitflow_anti_01]: [GitFlow considered harmful](http://endoflineblog.com/gitflow-considered-harmful) by Adam Ruka, May 03, 2015\n[^gitflow_anti_02]: [Follow-up to 'GitFlow considered harmful'](http://endoflineblog.com/follow-up-to-gitflow-considered-harmful) by Adam Ruka, Jun 20, 2015\n[^atl_comp_workf]: [Comparing Workflows](https://www.atlassian.com/git/tutorials/comparing-workflows/) by Atlassian\n","source":"_posts/zh/2016-05-18-a-linear-branch-management-with-git.md","raw":"---\nlayout: post\ntitle: \"一套简洁的基于Git的线性分支管理工作流\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"git\",\"branch\",\"rebase\",\"merge\",\"version\"]\nlang: \"zh\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文受`GitFlow` [^gitflow] 和`Anti-GitFlow` [^gitflow_anti_01] [^gitflow_anti_02]的启发，\n> 并在使用了`GitFlow`一段时间之后，提出了一套简洁的基于Git的线性分支管理工作流。\n> 简洁不仅仅是命令接口（`gitl`）的简单，同时也保证背后的分支简洁、线性。\n>\n> 本文还没有最终完成，`gitl`接口还没有实现，同时，还有一些没有想明白的问题——文中会一一列明。\n>\n> 在`gitl`实现之前，我将继续使用`GitFlow`。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 总体原则\n\n* 工作流背后的分支管理简洁明了\n* 设计一个可在团队中使用的tool或者命令行\n* 该命令行的接口简单\n* 文章中提到的release，不包括release的配置文件\n* 该工作流包含了一套默认的版本命名规则，这样命令行的接口不需要手动指定版本\n\n# 分支的最终效果图\n\n我们想实现的版本管理效果如图，右边同步的一个分支`/release/3.2.0`叫做`sprint release`\n（见 **术语** 中对此的解释），\n在将来的讨论中，可能会取消这个分支：\n\n{% highlight raw %}\n\n                             ^\n                             |\n                             |\n                             |                    \n                             |\n                             |                                                ^\n      ^   OR abort feature   |                                                |\n      | XXXXXXXXXXXXXXXXXXX> |                                                |\n      |                      |                                                |\n      |                      |  /release/3.0.0                                |\n      |                      +------------------->                            |\n      |                      |                                                |\n      |                      |                                                |\n      |  /feature/JIRA-404   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |             /release/2.0.1                     |\n                             |                   ^                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   |                            |\n                             |                   | bugfix                     |\n                             |                   | on /2.0.0                  |\n      ^   accept feature     |                   | release                    |\n      | +------------------> |                   |                            |\n      |                      |  /release/2.0.0   |                            |\n      |                      +-------------------+                            |\n      |                      |                                                |\n      |  /feature/JIRA-200   |                                                |\n      +----------------------+                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |                                                |\n                             |  /release/1.0.0                                |\n                             +-------------------+                            +\n\n                          /master                                 /release/3.2.0\n                                                            [will explain later]\n{% endhighlight %}\n\n# `gitl`，基于该工作流的接口设计\n\n计划用gitl命名上述工作流，接口如下，参考了`GitFlow`的接口风格。\n\n未来实现该接口之后，将会开源。\n\n## `gitl develop` 在master上面常规开发\n\n{% highlight bash %}\ngitl develop { nil | start }\n{% endhighlight %}\n\n## `gitl feature` 处理实验性质的feature分支\n\n定义了开始、放弃和接受feature。\n\n{% highlight bash %}\ngitl feature start [feature_name] { master | [branch_based_on] }\ngitl feature abort [feature_name]\ngitl feature finish [feature_name]\n{% endhighlight %}\n\n## `gitl bugfix` 在master或release分支上处理bugfix\n\n{% highlight bash %}\ngitl bugfix start [bugfix_name] { master | [branch_based_on] }\ngitl bugfix abort [bugfix_name]\ngitl bugfix finish [bugfix_name]\n{% endhighlight %}\n\n## `gitl release` 准备release\n\n该接口需要控制权限。\n\n如果`[release_number]`为空，则基于默认的版本命名规则。\n\n不建议传递版本编号，建议使用默认的版本命名规则。\n\n{% highlight bash %}\ngitl release { -P | -S | -B } start { [release_number] }\ngitl release { -P | -S | -B } abort { [release_number] }\ngitl release { -P | -S | -B } finish { [release_number] }\n{% endhighlight %}\n\n# 基于Git版本管理的几个开发场景\n\n## 术语表\n\n**center-repo**\n\n用作发布的中心源代码库，一般会被`fork`。\n中心库的管理比较严格，通常不接受代码提交，只接受代码的合并（PR Merge）。\n\n**fork-repo**\n\n每一个开发人员从中心库`center-repo`那边`fork`代码。\n\n可以尝试建立两个`remote`：\n\n* `origin`，默认的`fork-repo`地址；\n* `center`，中心库的地址，用于将中心库的更新`rebase`到开发人员的`fork-repo`上面\n\n**三种release**\n\n可能采取的版本管理（三位版本），从左到右：\n\n* 首位表示阶段开发任务的完成，周期一般为两到三个月，该发布可作public release；\n* 次位表示迭代（sprint）的末尾发布，用作内部演示\n* 末尾表示发布之后的特定版本的bugfix，通常只有public release的版本才会出现bugfix。\n  迭代中发现的internal defect，会在下一个迭代中修复。\n\n我们将三位版本号，从左到右，分别对应三种release：\n\n* public release，对应首位版本号，源代码中保留`branch`，并记录`tags`\n* sprint release，对应次位版本号，源代码中不保留`branch`，只记录`tags`\n* bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，\n  将版本号作为新的`branch`名称，删除上一个`public release`的分支，同时记录`tags`\n\n对于各自的分支而言（待完善，通过图形来表示，见笔记本）：\n\n* public release，源代码中保留`branch`，不合并到`master`，该分支只保留bump version等信息\n* sprint release，源代码中只保留一个sprint release分支，master的迭代更改，将`rebase`到这个分支上面\n* bugfix release，对应末位版本号，基于某一个特定地public release的后续发布，\n  将版本号作为新的`branch`名称，删除上一个`public release`的分支，同时记录`tags`\n\n## 场景描述\n\n具体而言，有如下的几个场景：\n\n### 在master上面常规开发\n\n* 开发人员在各自的`fork－repo`上面提交代码，关联JIRA ticket\n\n### 开启实验性质的feature分支\n\n* 默认基于`master`\n* 在`center-repo`上开启分支，可用`feature/JIRA-404`命名，或者\n* 开发人员在各自的`fork-repo`上开启分支，之后`PR`到`center-repo`\n* feature的最终阶段，可以接受或者放弃该分支\n\n如果放弃feature：\n\n* 各个`fork-repo`就该分支`PR`到`center-repo`\n* `center-repo`合并各个`PR`\n* `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n\n如果接受feature：\n\n* 各个`fork-repo`就该分支`PR`到`center-repo`\n* `center-repo`合并各个`PR`\n* `center-repo`合并当前feature到`master`\n* 合并节点标记`tag`，同`branch`名称一致\n* `center-repo`删除当前分支\n\n### 在master上面处理常规的bugfix\n\n* 默认基于`master`\n* 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n* 完成修复之后\n* 合并bugfix分支到`fork-repo`的master上面， 删除本地的 bugfix分支\n\n### public release\n\n{% highlight raw %}\n  step 1                                  step 2\n\n    ^                                       ^\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       | rebase back\n    |             ^                         | to master   ^\n    |             |                         | <-----------# tag n.0.0\n    |             # release                 |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             |                         |             |\n    |             # bump version            |             # bump version\n    |             |                         |             |\n    |             |                         |             |\n    +-------------+                         +-------------+\n    |                                       |\n    |      /release/n.0.0                   |      /release/n.0.0\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    |                                       |\n    +                                       +\n\n /master                                 /master\n\n{% endhighlight %}\n\n我们保留每一个public release的分支，具体步骤为：\n\n* 默认基于`master`\n* 在`center-repo`上开启分支，以待发布版本编号命名分支\n* bump version，更新ChangeLog\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 保留release分支\n\n### sprint release\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n. m+1 .0\n  |                            |             |              |             |\n  | rebase to                  |             # bump         |             # bump version\n  | sprint release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.m+1.0        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.m.0            | /n.m.0                     |     /release/n. m+1 .0\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n我们只保留一个sprint release的分支，具体步骤为：\n\n* 将master的更改rebase到上一个sprint release分支，比如release/n.m.0\n* 基于release/n.m.0，创建分支release/n.m+1.0\n* 在新分支上面，bump version等\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 删除`release/n.m.0`分支\n* 保留`release/n.m+1.0`分支\n\nsprint release分支，是分别命名，还是统一命名为`release/sprint`——待定。\n\n### bugfix release\n\n\n{% highlight raw %}\nstep 1                       step 2                       step 3\n\n  ^                            ^                            ^\n  |                            |                            | rebase back\n  |                            |             ^              | to master   ^\n  |                            |             |              | <----------+# tag n.0.k+1\n  | bugfix release             |             |              |             |\n  | is ONLY for                |             # bump         |             # bump version\n  | public release             |             |              |             |\n  |             ^              |  ^          |              |             |\n  | +---------> |              |  +----------+              |             |\n  |             |              |  | /release/n.0.k+1        |             |\n  |             |              |  |                         |             |\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 2                |             # bugfix 2\n  |             |              |  |                         |             |\n  |             |              |  # bugfix 1                |             # bugfix 1\n  |             |              |  |                         |             |\n  +-------------+              +--+                         +-------------+\n  |  /release/n.0.k            | /n.0.k                     |     /release/n.0.k+1\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  |                            |                            |\n  +                            +                            +\n\n/master                      /master                      /master\n\n{% endhighlight %}\n\n仅在public release的版本上做特定的bugfix，具体步骤为：\n\n* 默认基于特定的public release分支\n* 在`center-repo`上开启bugfix分支，以JIRA编号命名分支，比如`bugfix/JIRA-404`\n* 测试，并确认bugfix状态\n* 合并bugfix分支到特定的`release`分支， 删除bugfix分支\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n* 切换到特定的release版本，令其为`release/n.0.k`\n* 注意：此时的release的`HEAD`已经包含了，该特定分支上作过的bugfix了\n* 基于原有的release，创建下一个发布的分支，比如`release/n.0.k+1`\n* bump version，更新ChangeLog\n* 发布，并测试\n* 使用tag标记版本，以版本编号为tag命名\n* `center-repo`将当前release更改rebase到`master`\n* 删除`release/n.0.k`分支\n* 保留`release/n.0.k+1`分支\n\n### 特定版本的bugfix应用到master上面\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n## 不同场景的原始Git命令\n\n### 在master上面常规开发\n\n{% highlight bash %}\ngit checkout master\n# coding\ngit commit -avm 'JIRA-404 regular development'\ngit push\n{% endhighlight %}\n\n### 开启实验性质的feature分支\n\n{% highlight bash %}\ngit checkout master\ngit branch feature/JIRA-404\ngit checkout feature/JIRA-404\n# coding\ngit commit -avm 'JIRA-404 feature development'\ngit push\n# git push --set-upstream origin feature/JIRA-404\n{% endhighlight %}\n\n如果放弃feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\n# `center-repo/feature/JIRA-404`设置为只读，或者不再接受`PR` （可选）\n{% endhighlight %}\n\n如果接受feature：\n\n{% highlight bash %}\n# 各个`fork-repo`就该分支`PR`到`center-repo`\n# `center-repo`合并各个`PR`\ngit checkout master\ngit merge -m 'JIRA-404 accept feature' feature/JIRA-404\ngit tag -a feature/JIRA-404 -m 'JIRA-404 brief description of this feature'\ngit branch -d feature/JIRA-404\ngit push origin :feature/JIRA-404\n{% endhighlight %}\n\n### 在master上面处理常规的bugfix\n\n{% highlight bash %}\n# 默认基于`master`\n# 某位开发在自己的`fork-repo`上面开启bugfix分支，以`bugfix/JIRA-404`格式命名\n# 完成修复之后\n# 合并bugfix分支到`fork-repo`的master上面， 删除本地的bugfix分支\n{% endhighlight %}\n\n### public release\n\n{% highlight bash %}\ngit checkout master\ngit branch release/n.m.0\ngit checkout release/n.m.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m.0'\ngit tag -a n.m.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m.0\n{% endhighlight %}\n\n###  sprint release\n\n{% highlight bash %}\ngit checkout release/n.m.0\ngit rebase master\ngit branch release/n.m+1.0\ngit checkout release/n.m+1.0\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.m+1.0'\ngit tag -a n.m+1.0 -m 'JIRA-404 release of n.m.0'\ngit checkout master\ngit rebase release/n.m+1.0\ngit branch -d release/n.m.0\ngit push origin :release/n.m.0\n{% endhighlight %}\n\n### bugfix release\n\n{% highlight bash %}\ngit checkout release/n.m.k\ngit branch bugfix/JIRA-404\ngit checkout bugfix/JIRA-404\n# fix and test\ngit checkout release/n.m.k\ngit merge bugfix/JIRA-404\ngit branch -d bugfix/JIRA-404\ngit push origin :bugfix/JIRA-404\n{% endhighlight %}\n\n按照我们的版本编号规则，基于特定release上面的bugfix，会有后续的release（版本编号第三位）：\n\n{% highlight bash %}\ngit checkout release/n.0.k\ngit branch release/n.0.k+1\ngit checkout release/n.0.k+1\n# bump version, update ChangeLog\n# publi.sh\ngit commit -avm 'JIRA-404 description of n.0.k+1'\ngit tag -a n.0.k+1 -m 'JIRA-404 release of n.0.k+1'\ngit checkout master\ngit rebase release/n.0.k+1\ngit branch -d release/n.0.k\ngit push origin :release/n.0.k\n{% endhighlight %}\n\n### 特定版本的bugfix应用到master上面\n\n需要考虑是通过patch的方式，还是rebase的方式将bugfix应用到master上面。\n\n\n# GitFlow or Anti-GitFlow\n\n## 使用GitFlow实现上述场景\n\n## 为什么不使用GitFlow\n\n# 和CI集成\n\n## 提交并测试\n\n## 提交并发布\n\n# 后续\n\n这些问题还需要继续思考：\n\n* 微服务架构下面，各个服务节点都这样控制分支和版本吗，是否繁琐？\n* 本文在未来的实践过程中，可能会更改。\n* 本文提到的工作流，是否和`fork`冲突，参考Atlassian的 _Comparing Workflows_ [^atl_comp_workf] ？\n\n# 参考文献\n\n[^gitflow]: [A successful Git branching model](http://nvie.com/posts/a-successful-git-branching-model/) by Vincent Driessen, Jan 05, 2010\n[^gitflow_anti_01]: [GitFlow considered harmful](http://endoflineblog.com/gitflow-considered-harmful) by Adam Ruka, May 03, 2015\n[^gitflow_anti_02]: [Follow-up to 'GitFlow considered harmful'](http://endoflineblog.com/follow-up-to-gitflow-considered-harmful) by Adam Ruka, Jun 20, 2015\n[^atl_comp_workf]: [Comparing Workflows](https://www.atlassian.com/git/tutorials/comparing-workflows/) by Atlassian\n","slug":"zh-2016-05-18-a-linear-branch-management-with-git","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryue005oyxcbqv2njvn9"},{"layout":"post","title":"使用Ping++设计可供集中收银的微服务","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 使用Ping++可以快速接入不同的支付渠道。\n> 通常情况下，每一个应用需要在Ping++后台系统中，对应地创建一个应用，\n> 用来调用Ping++的接口。\n>\n> 本文尝试设计这样的解决方案——该方案仅有一个Ping++应用，但同时满足多个（独立）应用的支付场景。\n> 本文提到的解决方案，目前处在设计阶段。\n>\n> 本文将提到如下话题：\n>\n> * 使用Ping++完成一般的支付流程\n> * 来自百货大楼购物的启发\n> * 设计可供集中收银的微服务\n>\n> 本文的不足之处在于：\n>\n> * 对微服务的理解还停留在概念阶段\n> * 暂时还未涉及退款、提现流程\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# 两种Ping++应用的使用方法\n\n`TL;DR`，你可以先阅读**术语**一节，对本文出现的名词的定义。\n\n## 通常的Ping++应用的使用方法\n\n通常情况下，我们的每一个应用，都会对应在Ping++后台管理页面，\n创建一个Ping++应用。\n\n## 来自百货大楼购物流程的启发\n\n百货大楼购物，通常都在收银台付款，而非店铺中，流程可以整理为：\n\n0. 用户在店铺购物，确认购物车\n0. 用户使用购物车，在店铺开具购物小票\n0. 用户凭店铺的购物小票前往收银台\n0. 用户支付并得到支付成功的凭证\n0. 用户使用支付凭证，回到店铺完成购物\n\n启发就是：\n\n* 将百货大楼的每一个店铺看作一个应用\n* 将唯一的一个收银台，设计成微服务，用来和Ping++联系\n* 将支付模块，从应用中独立出来\n\n# 术语\n\n为了便于阅读和理解，我解释一下文中将会出现的如下名词：\n\n## 应用\n\n应用是一个很抽象的名词，可以是一个功能简单的计算器软件，也可以是一个\n功能丰富的个人财务管理软件：小到一个程序，大到一个系统。\n\n应用也有不同的表现形式，可以是一个可执行文件、一个Web，或者是一个安装在智能手机（设备）\n上的App。\n\n本文的应用，通常：\n\n* 具有完整业务流程的一个系统\n* 它有`View`表现页面\n* 它有后台服务\n* 不同的应用，在业务上没有重合的地方\n\n## 应用的`View`层\n\n我在之前的文章提到：`View`和后台服务应该完全独立（代码、开发、部署都要独立），\n这里的`View`就是应用的表现形式，在下面的文章中：\n\n* 用户的操作，都在`View`层进行\n* 客户端，通常就是指`View`层\n\n## 应用的后台服务：`RESTful Server`\n\n我建议应用的所有后台服务，都应该封装成`RESTful API`的形式，在下面的文章中，\n如下的名词，应该都是指应用的后台服务：\n\n* 服务端\n* `RESTful Server`\n* 后台服务\n\n## Ping++应用\n\n可以在Ping++管理平台创建一个或者多个Ping++应用，每一个Ping++应用，都有一个`app_id`。\n每一个Ping++应用里面，可以配置独立的支付渠道。\n\n## 集中收银\n\n本文想要设计的集中收银解决方案，最终创建一个Ping++应用，\n完成多个独立应用的支付需求。\n\n# 使用Ping++完成一般购物的支付流程\n\n可以先去阅读官方的[支付流程说明](https://www.pingxx.com/docs/overview/flow/charge)。\n\n## 支付流程示意图\n\n如下的示例图，将以购物为例，更详细地解释支付流程：\n\n0. 客户端选择一系列（数组）的购买商品\n0. 客户端向RESTful Server申请订单\n0. RESTful Server向客户端Response返回带有订单编号的订单数据\n0. 客户端使用订单数据向RESTful Server申请Ping++的支付票据（Charge对象）\n0. RESTful Server向Ping++服务器，请求Charge对象\n0. RESTful Server收到Ping++服务器的Response，同时将Charge对象传递给客户端\n0. 客户端拿到Charge对象，调用Ping++ Client SDK开始支付\n0. （以下为异步流程）\n0. Ping++服务器确认支付结果之后，向RESTful Server发送一个POST请求，告知结果\n0. RESTful Server接收到这个Webhook之后，修改订单的支付状态\n\n{% highlight raw %}\n\n+------------------------------------------+----------------+\n|                                          |                |\n|    STEP 1                                |   Client Side  |\n|    put product into cart                 |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  + ^                  + ^\n  | |                  | |\n  | | STEP 2 & 3       | | STEP 4                STEP 5\n  | |                  | |                       (Ping++ Server SDK)\n  | | apply an order   | | apply for Charge\n  | |                  | |\n  | | RESPONSE the     | | payload with          apply for Charge\n  | | Order {_id, ...} | | previous Order data   from Ping++ Server\n  | |                  | |                           +\n  v +                  v +                           |\n+-------------------------------------+              |     +--------+\n|                                     | STEP 5       |     |        |\n|                  STEP 6             | +------------+---> |        |\n|                                     | <----------------+ |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n\n{% endhighlight %}\n\n## 将购物流程一般化\n\n上面的示意图流程，有两点要说明的：\n\n0. 对于任何的支付流程，我们都可以尝试包装成上述的流程，比如在电子阅读平台，“支付并阅读”这个按钮，\n是没有挑选商品到购物车流程的，我们可以将上述流程中的一系列变换为“包含一个元素的数组”。参考下面的\n订单类的设计\n0. RESTful Server可以按照功能，拆分成不同的服务，参考下面的收银微服务的设计\n\n## 订单类的设计\n\n目前在用的设计如下，只列出重要的属性（Property），从最上层订单类到所购商品：\n\n{% highlight scala %}\n\nclass Order {\n  cart: List[CartItem]\n}\n\nclass CartItem {\n  purchasedProducts: GenericProduct\n  quantity: Int\n}\n\ninterface GenericProduct {\n  productTitle: String\n  price: Double\n}\n\n{% endhighlight %}\n\n\n对于上面提到的“支付并阅读”这类的流程，\n最终的`Order`实例满足`cart`数组只有一个元素：\n\n{% highlight scala %}\n\nsingleItemOrder should be instanceOf Order\nsingleItemOrder.cart shoule be size(1)\n\n{% endhighlight %}\n\n# 设计可供集中收银的微服务\n\n## 一个微服务并不是微服务\n\n一个微服务并不能形成一个完整的系统（应用），设计的收银台微服务，\n还需要和其它模块、其它的微服务相互交互，就购物支付流程而言，我们至少还需要：\n\n* 基础服务，比如`GET /products`等基本信息\n* 订单服务，用来生成订单编号、控制订单的状态等\n\n## 收银中心的微服务设计\n\n### 将原来的一个`RESTful Server`拆分成多个微服务\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n +                                   +  ^\n |                                   |  | STEP 2 & 3\n | STEP 1                            |  |\n | put product into cart             |  | apply an order\n |                                   |  |\n |                                   |  | RESPONSE the\n v                                   v  + Order {_id, ...}\n+------------------------------------------+----------------+\n|                                          |                |\n|                                          |   Client Side  |\n|                                          |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n{% endhighlight %}\n\n### 集中收银台的设计图\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n   +                                   +  ^\n   |                                   |  | STEP 2 & 3\n   | STEP 1                            |  |\n   | put product into cart             |  | apply an order\n   |                                   |  |\n   |                                   |  | RESPONSE the\n   v                                   v  + Order {_id, ...}\n +------------------------------------------+----------------+\n |                                          |                |\n |                                          |   Client Side  |\n |                                          |                |\n |                                          +----------------+\n |    STEP 4                             STEP 7              | STEP 8\n |                                       (Ping++ Client SDK) |         +--------+\n |    use Order data                                         | finish  |        |\n |    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n |                                       request a payment   | +-----> |        |\n +-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n+  ^                            +  ^\n|  |  apply for Charge          |  |  apply for Charge\n|  |                            |  |\n|  |  payload with              |  |  payload with\n|  |  GenericOrder data         |  |  GenericOrder data\n|  |                            |  |\nv  +                            v  +\n+---------+     +---------+     +---------+\n|         |     |         |     |         |\n| App 1   |     | App 2   |     | App 3   |\n|         |     |         |     |         |\n+---------+     +---------+     +---------+\n\n{% endhighlight %}\n\n\n### 收银台服务的`RESTful API`设计\n\n{% highlight scala %}\n\n// STEP 4 apply for Charge data\nPOST /cashier/charge\n\npayload: {\n  order: Order { _id, ...}\n}\n\n// STEP 6\nRESPONSE: {\n  data: Ping++ Charge data\n}\n\n// STEP 9\nPOST /cashier/webhook\n\n{% endhighlight %}\n","source":"_posts/zh/2016-07-11-designing-cashier-microservice-with-ping-sdk.md","raw":"---\nlayout: post\ntitle: \"使用Ping++设计可供集中收银的微服务\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"ping++\",\"microservice\",\"scala\",\"restful\",\"payment\"]\nlang: \"zh\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 使用Ping++可以快速接入不同的支付渠道。\n> 通常情况下，每一个应用需要在Ping++后台系统中，对应地创建一个应用，\n> 用来调用Ping++的接口。\n>\n> 本文尝试设计这样的解决方案——该方案仅有一个Ping++应用，但同时满足多个（独立）应用的支付场景。\n> 本文提到的解决方案，目前处在设计阶段。\n>\n> 本文将提到如下话题：\n>\n> * 使用Ping++完成一般的支付流程\n> * 来自百货大楼购物的启发\n> * 设计可供集中收银的微服务\n>\n> 本文的不足之处在于：\n>\n> * 对微服务的理解还停留在概念阶段\n> * 暂时还未涉及退款、提现流程\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# 两种Ping++应用的使用方法\n\n`TL;DR`，你可以先阅读**术语**一节，对本文出现的名词的定义。\n\n## 通常的Ping++应用的使用方法\n\n通常情况下，我们的每一个应用，都会对应在Ping++后台管理页面，\n创建一个Ping++应用。\n\n## 来自百货大楼购物流程的启发\n\n百货大楼购物，通常都在收银台付款，而非店铺中，流程可以整理为：\n\n0. 用户在店铺购物，确认购物车\n0. 用户使用购物车，在店铺开具购物小票\n0. 用户凭店铺的购物小票前往收银台\n0. 用户支付并得到支付成功的凭证\n0. 用户使用支付凭证，回到店铺完成购物\n\n启发就是：\n\n* 将百货大楼的每一个店铺看作一个应用\n* 将唯一的一个收银台，设计成微服务，用来和Ping++联系\n* 将支付模块，从应用中独立出来\n\n# 术语\n\n为了便于阅读和理解，我解释一下文中将会出现的如下名词：\n\n## 应用\n\n应用是一个很抽象的名词，可以是一个功能简单的计算器软件，也可以是一个\n功能丰富的个人财务管理软件：小到一个程序，大到一个系统。\n\n应用也有不同的表现形式，可以是一个可执行文件、一个Web，或者是一个安装在智能手机（设备）\n上的App。\n\n本文的应用，通常：\n\n* 具有完整业务流程的一个系统\n* 它有`View`表现页面\n* 它有后台服务\n* 不同的应用，在业务上没有重合的地方\n\n## 应用的`View`层\n\n我在之前的文章提到：`View`和后台服务应该完全独立（代码、开发、部署都要独立），\n这里的`View`就是应用的表现形式，在下面的文章中：\n\n* 用户的操作，都在`View`层进行\n* 客户端，通常就是指`View`层\n\n## 应用的后台服务：`RESTful Server`\n\n我建议应用的所有后台服务，都应该封装成`RESTful API`的形式，在下面的文章中，\n如下的名词，应该都是指应用的后台服务：\n\n* 服务端\n* `RESTful Server`\n* 后台服务\n\n## Ping++应用\n\n可以在Ping++管理平台创建一个或者多个Ping++应用，每一个Ping++应用，都有一个`app_id`。\n每一个Ping++应用里面，可以配置独立的支付渠道。\n\n## 集中收银\n\n本文想要设计的集中收银解决方案，最终创建一个Ping++应用，\n完成多个独立应用的支付需求。\n\n# 使用Ping++完成一般购物的支付流程\n\n可以先去阅读官方的[支付流程说明](https://www.pingxx.com/docs/overview/flow/charge)。\n\n## 支付流程示意图\n\n如下的示例图，将以购物为例，更详细地解释支付流程：\n\n0. 客户端选择一系列（数组）的购买商品\n0. 客户端向RESTful Server申请订单\n0. RESTful Server向客户端Response返回带有订单编号的订单数据\n0. 客户端使用订单数据向RESTful Server申请Ping++的支付票据（Charge对象）\n0. RESTful Server向Ping++服务器，请求Charge对象\n0. RESTful Server收到Ping++服务器的Response，同时将Charge对象传递给客户端\n0. 客户端拿到Charge对象，调用Ping++ Client SDK开始支付\n0. （以下为异步流程）\n0. Ping++服务器确认支付结果之后，向RESTful Server发送一个POST请求，告知结果\n0. RESTful Server接收到这个Webhook之后，修改订单的支付状态\n\n{% highlight raw %}\n\n+------------------------------------------+----------------+\n|                                          |                |\n|    STEP 1                                |   Client Side  |\n|    put product into cart                 |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  + ^                  + ^\n  | |                  | |\n  | | STEP 2 & 3       | | STEP 4                STEP 5\n  | |                  | |                       (Ping++ Server SDK)\n  | | apply an order   | | apply for Charge\n  | |                  | |\n  | | RESPONSE the     | | payload with          apply for Charge\n  | | Order {_id, ...} | | previous Order data   from Ping++ Server\n  | |                  | |                           +\n  v +                  v +                           |\n+-------------------------------------+              |     +--------+\n|                                     | STEP 5       |     |        |\n|                  STEP 6             | +------------+---> |        |\n|                                     | <----------------+ |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n\n{% endhighlight %}\n\n## 将购物流程一般化\n\n上面的示意图流程，有两点要说明的：\n\n0. 对于任何的支付流程，我们都可以尝试包装成上述的流程，比如在电子阅读平台，“支付并阅读”这个按钮，\n是没有挑选商品到购物车流程的，我们可以将上述流程中的一系列变换为“包含一个元素的数组”。参考下面的\n订单类的设计\n0. RESTful Server可以按照功能，拆分成不同的服务，参考下面的收银微服务的设计\n\n## 订单类的设计\n\n目前在用的设计如下，只列出重要的属性（Property），从最上层订单类到所购商品：\n\n{% highlight scala %}\n\nclass Order {\n  cart: List[CartItem]\n}\n\nclass CartItem {\n  purchasedProducts: GenericProduct\n  quantity: Int\n}\n\ninterface GenericProduct {\n  productTitle: String\n  price: Double\n}\n\n{% endhighlight %}\n\n\n对于上面提到的“支付并阅读”这类的流程，\n最终的`Order`实例满足`cart`数组只有一个元素：\n\n{% highlight scala %}\n\nsingleItemOrder should be instanceOf Order\nsingleItemOrder.cart shoule be size(1)\n\n{% endhighlight %}\n\n# 设计可供集中收银的微服务\n\n## 一个微服务并不是微服务\n\n一个微服务并不能形成一个完整的系统（应用），设计的收银台微服务，\n还需要和其它模块、其它的微服务相互交互，就购物支付流程而言，我们至少还需要：\n\n* 基础服务，比如`GET /products`等基本信息\n* 订单服务，用来生成订单编号、控制订单的状态等\n\n## 收银中心的微服务设计\n\n### 将原来的一个`RESTful Server`拆分成多个微服务\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n +                                   +  ^\n |                                   |  | STEP 2 & 3\n | STEP 1                            |  |\n | put product into cart             |  | apply an order\n |                                   |  |\n |                                   |  | RESPONSE the\n v                                   v  + Order {_id, ...}\n+------------------------------------------+----------------+\n|                                          |                |\n|                                          |   Client Side  |\n|                                          |                |\n|                                          +----------------+\n|    STEP 4                             STEP 7              | STEP 8\n|                                       (Ping++ Client SDK) |         +--------+\n|    use Order data                                         | finish  |        |\n|    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n|                                       request a payment   | +-----> |        |\n+-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n\n{% endhighlight %}\n\n### 集中收银台的设计图\n\n{% highlight raw %}\n+------------------------+          +-----------------------+\n|                        |          |                       |\n|  RESTful Server        |          |  RESTful Server       |\n|                        |          |                       |\n|  Static data           |          |  Order system         |\n+------------------------+          +-----------------------+\n   +                                   +  ^\n   |                                   |  | STEP 2 & 3\n   | STEP 1                            |  |\n   | put product into cart             |  | apply an order\n   |                                   |  |\n   |                                   |  | RESPONSE the\n   v                                   v  + Order {_id, ...}\n +------------------------------------------+----------------+\n |                                          |                |\n |                                          |   Client Side  |\n |                                          |                |\n |                                          +----------------+\n |    STEP 4                             STEP 7              | STEP 8\n |                                       (Ping++ Client SDK) |         +--------+\n |    use Order data                                         | finish  |        |\n |    to apply Ping++ Charge data        use Charge data     | payment | AnyPay |\n |                                       request a payment   | +-----> |        |\n +-----------------------------------------------------------+         +--------+\n  +  STEP 4              ^\n  |                      |\n  |  apply for Charge    |\n  |                      |             STEP 5\n  |  payload with        |             (Ping++ Server SDK)\n  |  previous Order data |\n  v                      +             apply for Charge\n                                       from Ping++ Server\n+-------------------------------------+                    +--------+\n|                                     | +----------------> |        |\n|                  STEP 6             | <----------------+ |        |\n|                                     |                    |        |\n|                  get Charge data    |                    |        |\n|                  from Ping++ Server | <----------------+ | Ping++ |\n+---------------+                     | STEP 9             | Server |\n|               |  RESPONSE to View   | (Async)            |        |\n| RESTful Sever |                     |                    |        |\n|               |                     | Webhook            |        |\n| Cashier       |                     | POST notification  |        |\n|               |                     | to RESTful server  |        |\n+---------------+---------------------+                    +--------+\n+  ^                            +  ^\n|  |  apply for Charge          |  |  apply for Charge\n|  |                            |  |\n|  |  payload with              |  |  payload with\n|  |  GenericOrder data         |  |  GenericOrder data\n|  |                            |  |\nv  +                            v  +\n+---------+     +---------+     +---------+\n|         |     |         |     |         |\n| App 1   |     | App 2   |     | App 3   |\n|         |     |         |     |         |\n+---------+     +---------+     +---------+\n\n{% endhighlight %}\n\n\n### 收银台服务的`RESTful API`设计\n\n{% highlight scala %}\n\n// STEP 4 apply for Charge data\nPOST /cashier/charge\n\npayload: {\n  order: Order { _id, ...}\n}\n\n// STEP 6\nRESPONSE: {\n  data: Ping++ Charge data\n}\n\n// STEP 9\nPOST /cashier/webhook\n\n{% endhighlight %}\n","slug":"zh-2016-07-11-designing-cashier-microservice-with-ping-sdk","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryug005ryxcb99rig9tm"},{"layout":"post","title":"无代码不欢乐——使用统一的Bash脚本搭建开发环境","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文最终会给出一段脚本，执行类似如下的语句：\n>\n>       wget -qO- path/to/installation.sh | bash\n>\n> 将会在Ubuntu系统上面配置好所有的开发环境。\n>\n> 本文会讲解如何写出并部署`installation.sh`这样的脚本，和一些建议。\n>\n> 除此之外，本文更愿意表达如下几个意思：\n>\n> * 能用代码的，就别用鼠标；\n> * 既然用了代码，就纳入版本控制（Git）；\n> * 使用脚本（`installation.sh`），开发人员可以方便地配置统一的开发环境；\n> * 给开发人员更好的开发体验。\n>\n> 本文的脚本只运行在`Ubuntu 14.04+`上面，暂（JI）时（BEN）不考虑其它操作系统。\n>\n> 本文会提到`dotfiles` [^dotfiles] 这个概念，但不会详细解释它。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `installation.sh`初览\n\n你可以在`github`中看到安装脚本的源代码（[链接](https://github.com/scozv/dotfiles/blob/master/os/ubuntu-server.sh)）。\n或者，你也可以在虚拟机中执行如下命令：\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n{% endhighlight %}\n\n请注意：\n\n* 在`Ubuntu 14.04+`上执行以上脚本\n* 最好在虚拟机上尝试这段脚本，因为这段脚本配置的`Nodejs`、`MongoDB`的版本可能和你使用的版本不一样\n* 不要轻易地执行未知脚本\n\n# 成为`installation.sh`之前\n\n我从2014年就在`github`中托管我的`dotfiles`（[链接](https://github.com/scozv/dotfiles)）了。\n于2015年将`dotfiles`转为私有。截至到本文发表，`dotfiles`的源代码统计如下：\n\nmeta | data\n:----| :---\nProject name | dotfiles\nGenerated | 2016-07-23 11:37:11 (in 0 seconds)\nGenerator | [GitStats](http://gitstats.sourceforge.net/) (version 2015.10.03), git version 2.8.2, gnuplot 4.6 patchlevel 6\nReport Period | 2014-03-08 17:51:29 to 2016-07-21 18:14:15\nAge | 867 days, 67 active days (7.73%)\nTotal Files | 70\nTotal Lines of Code | 2187 (2835 added, 648 removed)\nTotal Commits | 137 (average 2.0 commits per active day, 0.2 per all days)\n\n建立`dotfiles`的最初目的是为了配置`bash`环境，之后就把Ubutnu使用过程中遇到的脚本，\n都记录下来。简单的脚本记录，并不能取代手动的复制、粘帖与执行。\n\n所以，我逐步地将所有的脚本封装，使得这些脚本能够通过`installation.sh`执行。\n也就是：\n\n* 记录各种命名行\n* 将常用的命令，设置为`bash_alias`\n* 将流程类的脚本（比如配置开发环境、安装JIRA）进可能地封装，让用户使用`wget`命名就能\n  轻松地配置好各类环境。\n\n\n# 编写`installation.sh`需要留意的地方\n\n## 兼容不同的Ubuntu版本\n\n本文提到的脚本，主要在`14.04+`上运行，建议生产环境使用`Ubuntu Server 14.04`。使用脚本可以区分\n系统的版本：\n\n{% highlight bash %}\n# http://ask.xmodulo.com/find-ubuntu-version-codename-shell-script.html\nif [[ `lsb_release --release | cut -f2` > \"15.10\" ]]; then\n  echo \"System Upgrade for `lsb_release --release | cut -f2`\"\n  sudo apt update && sudo apt upgrade\nelse\n  sudo apt-get update && sudo apt-get upgrade\nfi\n{% endhighlight %}\n\n## 兼容新旧环境\n\n可以通过，如下两个命令，判断某一个包是否已经安装成功：\n\n{% highlight bash %}\ncommand -v \"$1\" > /dev/null 2>&1\n[ -d \"$1\" ]\n{% endhighlight %}\n\n更详细的代码可以参考[此处`diff`](https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-dc9087fc5f049f9e1d8e365374bcc630R1)\n\n## 区分Server脚本和Desktop脚本\n\n很多可视化的工具都不需要在`Server`上运行，比如IDE工具等。所以`installation.sh`应该\n区分`Server`脚本和`Desktop`脚本。\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-desktop.sh | bash\n{% endhighlight %}\n\n查看上面的两个脚本的源代码，`installation.sh`封装的主要思路为：\n\n* 前置命令的配置，比如定义一些通用的方法\n\n      df_echo \"define temporary functions\"\n      . ~/opt/.df/00_define_functions.sh\n* 添加常用的PPA源并配置系统\n\n      df_echo \"apt sources\"\n      . ~/opt/.df/03_apt_sources.sh\n      df_echo \"system configure\"\n      . ~/opt/.df/05_system_config.sh\n* 配置Server，每一个应用都是独立的脚本，便于组合成不同的`installation.sh`\n* 配置Desktop\n* 清理临时定义的变量和函数\n\n      df_echo \"unset and clear\"\n      . ~/opt/.df/99_unset.sh\n\n## 控制Nodejs的版本\n\n最新的应用版本，并不一定就适合用在生产环境上。尤其是当前的生产环境用的低版本，\n最新的应用有可能涉及到重大的变更，比如：\n\n* `babel-5`到`babel-6`\n* `jekyll 2`到`jekyll 3`\n\n开发环境也是如此，最好和生产环境保持一致，便于调试。所以，如果生产环境\n一直使用的`Nodejs 5`，那就不要轻易地升级到`Nodejs 6`。\n\n在`installation.sh`脚本中，可以控制版本，参考`nodejs-5.sh`（[链接](https://github.com/scozv/dotfiles/blob/master/os/src/10/nodejs-5.sh)）。\n\n## 提高下载速度\n\n可以使用镜像提高下载速度。有些时候，软件包的源地址的访问速度较慢，可以尝试更换较快的镜像。\n\n`npm`、`ruby`以及`scala`等包管理的源地址都有较快的镜像站点。\n源代码中列出了一些镜像地址。\n\n另外，可以使用`sha1sum`对下载的文件做校验（参考[此处`diff`](https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-64ce3c35164131101fa3be487e13c7efL47)）。\n\n## `publi.sh`——让开发人员执行最少的命令\n\n除了将`installation.sh`部署到公共的Git Server上面以外，也可以将其部署到CDN上面。\n\n很多时候，我们的环境脚本要能在新安装的系统上运行，此时，`git`和`ssh`都还没有配置。\n我们的脚本运行不能依赖于`git clone`。\n\n在我私有的`dotfiles`中，我写了如下的发布脚本，用来部署`installation.sh`。\n其中，我使用了UCloud的CDN，因为它提供了`filemgr-linux64`脚本，可以在`bash`中方便\n地使用文件上传接口：\n\n{% highlight bash %}\n#!/usr/bin/env bash\n\necho \"将源文件打包\"\ntar -cjvf ~/repo/dotfiles/dotfiles-sh.tar -C ~/repo/dotfiles/os/src .\necho \"上传到UCloud的CDN中\"\ncd ~/opt/filemgr-linux64.elf\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/0.tar --file ~/repo/dotfiles/dotfiles-sh.tar\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/ubuntu-server.sh --file ~/repo/dotfiles/os/ubuntu-server.sh\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/ubuntu-desktop.sh --file ~/repo/dotfiles/os/ubuntu-desktop.sh\ncd ~/repo/dotfiles\n{% endhighlight %}\n\n\n## 使用花括号保证脚本的完整\n\n受`nvm`安装脚本[^nvm]的启发，为了保证`wget`的脚本的完整，使用花括号将所有的\n代码包含进入：\n\n{% highlight bash %}\n#!/usr/bin/env bash\n{\n  # code here\n}\n{% endhighlight %}\n\n# 持续集成的基础——脚本化\n\n`dotfiles`以及`installation.sh`这类的脚本化，我认为是持续集成的基础。\n未来如果我大范围地使用`docker`，依然也是一系列的脚本。\n\n## 脚本化的意义，不是为了显摆，而是为了持续集成\n\n大范围的使用脚本，并不是为了显得很`geek`（此处没有褒贬），而是为了更好的持续集成。\n\n通常持续集成的配置文件基本上分为如下步骤：\n\n* 前置的环境配置\n* 需要做哪些测试\n* 需要发布什么\n* 后续有什么收尾\n\n以上所有，都离不开完善的脚本。而第一步“前置的环境配置”就是本文的`installation.sh`。\n当然，我们还应该尝试使用`docker`快速地完成环境配置。\n\n## 我有哪些地方都在用代码\n\n* 这个blog [^scozv_blog]\n* 我的dotfiles [^scozv_dotfiles]\n* 我的所有笔记（LaTeX）\n* 部署脚本\n* 接口文档 [^algo-wiki]\n* 团队内部文档\n\n# 统一的开发流程——脚本化\n\n脚本化，除了作为持续集成的基础之外，还有一个好处，就是统一团队的开发流程。\n\n类似`installation.sh`这样的脚本，可以保证团队的开发环境一致。\n\n类似`gitl` [^gitl] 这样的脚本，就是为了控制统一的开发流程的，比如代码提交这个简单的动作，\n我们通过完善的脚本，可以在代码`push`到Git Server之前：\n\n* 强制单元测试\n* 和JIRA关联\n* 统一的代码风格检查（code hint）\n* 其它\n\n开发人员并不需要拿着Checklist去一步一步，人为地检查流程是否做完了。\n如此，可以给开发带来更好的体验。\n\n# 参考文献\n\n[^dotfiles]: [Your unofficial guide to dotfiles on GitHub](https://dotfiles.github.io/)\n[^nvm]: [Node Version Manager](https://github.com/creationix/nvm)\n[^scozv_blog]: https://github.com/scozv/blog\n[^scozv_dotfiles]: https://github.com/scozv/dotfiles\n[^algo-wiki]: https://github.com/scozv/algo-wiki\n[^gitl]: [一套简洁的基于Git的线性分支管理工作流](https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git)\n","source":"_posts/zh/2016-07-22-donot-ask-the-devs-to-prepare-env-by-click.md","raw":"---\nlayout: post\ntitle: \"无代码不欢乐——使用统一的Bash脚本搭建开发环境\"\ndescription: \"\"\ncategory: \"pattern\"\ntags: [\"bash\",\"ci\"]\nlang: zh\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文最终会给出一段脚本，执行类似如下的语句：\n>\n>       wget -qO- path/to/installation.sh | bash\n>\n> 将会在Ubuntu系统上面配置好所有的开发环境。\n>\n> 本文会讲解如何写出并部署`installation.sh`这样的脚本，和一些建议。\n>\n> 除此之外，本文更愿意表达如下几个意思：\n>\n> * 能用代码的，就别用鼠标；\n> * 既然用了代码，就纳入版本控制（Git）；\n> * 使用脚本（`installation.sh`），开发人员可以方便地配置统一的开发环境；\n> * 给开发人员更好的开发体验。\n>\n> 本文的脚本只运行在`Ubuntu 14.04+`上面，暂（JI）时（BEN）不考虑其它操作系统。\n>\n> 本文会提到`dotfiles` [^dotfiles] 这个概念，但不会详细解释它。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `installation.sh`初览\n\n你可以在`github`中看到安装脚本的源代码（[链接](https://github.com/scozv/dotfiles/blob/master/os/ubuntu-server.sh)）。\n或者，你也可以在虚拟机中执行如下命令：\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n{% endhighlight %}\n\n请注意：\n\n* 在`Ubuntu 14.04+`上执行以上脚本\n* 最好在虚拟机上尝试这段脚本，因为这段脚本配置的`Nodejs`、`MongoDB`的版本可能和你使用的版本不一样\n* 不要轻易地执行未知脚本\n\n# 成为`installation.sh`之前\n\n我从2014年就在`github`中托管我的`dotfiles`（[链接](https://github.com/scozv/dotfiles)）了。\n于2015年将`dotfiles`转为私有。截至到本文发表，`dotfiles`的源代码统计如下：\n\nmeta | data\n:----| :---\nProject name | dotfiles\nGenerated | 2016-07-23 11:37:11 (in 0 seconds)\nGenerator | [GitStats](http://gitstats.sourceforge.net/) (version 2015.10.03), git version 2.8.2, gnuplot 4.6 patchlevel 6\nReport Period | 2014-03-08 17:51:29 to 2016-07-21 18:14:15\nAge | 867 days, 67 active days (7.73%)\nTotal Files | 70\nTotal Lines of Code | 2187 (2835 added, 648 removed)\nTotal Commits | 137 (average 2.0 commits per active day, 0.2 per all days)\n\n建立`dotfiles`的最初目的是为了配置`bash`环境，之后就把Ubutnu使用过程中遇到的脚本，\n都记录下来。简单的脚本记录，并不能取代手动的复制、粘帖与执行。\n\n所以，我逐步地将所有的脚本封装，使得这些脚本能够通过`installation.sh`执行。\n也就是：\n\n* 记录各种命名行\n* 将常用的命令，设置为`bash_alias`\n* 将流程类的脚本（比如配置开发环境、安装JIRA）进可能地封装，让用户使用`wget`命名就能\n  轻松地配置好各类环境。\n\n\n# 编写`installation.sh`需要留意的地方\n\n## 兼容不同的Ubuntu版本\n\n本文提到的脚本，主要在`14.04+`上运行，建议生产环境使用`Ubuntu Server 14.04`。使用脚本可以区分\n系统的版本：\n\n{% highlight bash %}\n# http://ask.xmodulo.com/find-ubuntu-version-codename-shell-script.html\nif [[ `lsb_release --release | cut -f2` > \"15.10\" ]]; then\n  echo \"System Upgrade for `lsb_release --release | cut -f2`\"\n  sudo apt update && sudo apt upgrade\nelse\n  sudo apt-get update && sudo apt-get upgrade\nfi\n{% endhighlight %}\n\n## 兼容新旧环境\n\n可以通过，如下两个命令，判断某一个包是否已经安装成功：\n\n{% highlight bash %}\ncommand -v \"$1\" > /dev/null 2>&1\n[ -d \"$1\" ]\n{% endhighlight %}\n\n更详细的代码可以参考[此处`diff`](https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-dc9087fc5f049f9e1d8e365374bcc630R1)\n\n## 区分Server脚本和Desktop脚本\n\n很多可视化的工具都不需要在`Server`上运行，比如IDE工具等。所以`installation.sh`应该\n区分`Server`脚本和`Desktop`脚本。\n\n{% highlight bash %}\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-server.sh | bash\n\nwget -qO- https://raw.githubusercontent.com/scozv/dotfiles/master/os/ubuntu-desktop.sh | bash\n{% endhighlight %}\n\n查看上面的两个脚本的源代码，`installation.sh`封装的主要思路为：\n\n* 前置命令的配置，比如定义一些通用的方法\n\n      df_echo \"define temporary functions\"\n      . ~/opt/.df/00_define_functions.sh\n* 添加常用的PPA源并配置系统\n\n      df_echo \"apt sources\"\n      . ~/opt/.df/03_apt_sources.sh\n      df_echo \"system configure\"\n      . ~/opt/.df/05_system_config.sh\n* 配置Server，每一个应用都是独立的脚本，便于组合成不同的`installation.sh`\n* 配置Desktop\n* 清理临时定义的变量和函数\n\n      df_echo \"unset and clear\"\n      . ~/opt/.df/99_unset.sh\n\n## 控制Nodejs的版本\n\n最新的应用版本，并不一定就适合用在生产环境上。尤其是当前的生产环境用的低版本，\n最新的应用有可能涉及到重大的变更，比如：\n\n* `babel-5`到`babel-6`\n* `jekyll 2`到`jekyll 3`\n\n开发环境也是如此，最好和生产环境保持一致，便于调试。所以，如果生产环境\n一直使用的`Nodejs 5`，那就不要轻易地升级到`Nodejs 6`。\n\n在`installation.sh`脚本中，可以控制版本，参考`nodejs-5.sh`（[链接](https://github.com/scozv/dotfiles/blob/master/os/src/10/nodejs-5.sh)）。\n\n## 提高下载速度\n\n可以使用镜像提高下载速度。有些时候，软件包的源地址的访问速度较慢，可以尝试更换较快的镜像。\n\n`npm`、`ruby`以及`scala`等包管理的源地址都有较快的镜像站点。\n源代码中列出了一些镜像地址。\n\n另外，可以使用`sha1sum`对下载的文件做校验（参考[此处`diff`](https://github.com/scozv/dotfiles/commit/94f984ac1c23b2bbebea03e6b21b79748dc441c9#diff-64ce3c35164131101fa3be487e13c7efL47)）。\n\n## `publi.sh`——让开发人员执行最少的命令\n\n除了将`installation.sh`部署到公共的Git Server上面以外，也可以将其部署到CDN上面。\n\n很多时候，我们的环境脚本要能在新安装的系统上运行，此时，`git`和`ssh`都还没有配置。\n我们的脚本运行不能依赖于`git clone`。\n\n在我私有的`dotfiles`中，我写了如下的发布脚本，用来部署`installation.sh`。\n其中，我使用了UCloud的CDN，因为它提供了`filemgr-linux64`脚本，可以在`bash`中方便\n地使用文件上传接口：\n\n{% highlight bash %}\n#!/usr/bin/env bash\n\necho \"将源文件打包\"\ntar -cjvf ~/repo/dotfiles/dotfiles-sh.tar -C ~/repo/dotfiles/os/src .\necho \"上传到UCloud的CDN中\"\ncd ~/opt/filemgr-linux64.elf\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/0.tar --file ~/repo/dotfiles/dotfiles-sh.tar\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/ubuntu-server.sh --file ~/repo/dotfiles/os/ubuntu-server.sh\n./filemgr-linux64 --action mput --bucket <bucket_name> --key dotfiles/ubuntu-desktop.sh --file ~/repo/dotfiles/os/ubuntu-desktop.sh\ncd ~/repo/dotfiles\n{% endhighlight %}\n\n\n## 使用花括号保证脚本的完整\n\n受`nvm`安装脚本[^nvm]的启发，为了保证`wget`的脚本的完整，使用花括号将所有的\n代码包含进入：\n\n{% highlight bash %}\n#!/usr/bin/env bash\n{\n  # code here\n}\n{% endhighlight %}\n\n# 持续集成的基础——脚本化\n\n`dotfiles`以及`installation.sh`这类的脚本化，我认为是持续集成的基础。\n未来如果我大范围地使用`docker`，依然也是一系列的脚本。\n\n## 脚本化的意义，不是为了显摆，而是为了持续集成\n\n大范围的使用脚本，并不是为了显得很`geek`（此处没有褒贬），而是为了更好的持续集成。\n\n通常持续集成的配置文件基本上分为如下步骤：\n\n* 前置的环境配置\n* 需要做哪些测试\n* 需要发布什么\n* 后续有什么收尾\n\n以上所有，都离不开完善的脚本。而第一步“前置的环境配置”就是本文的`installation.sh`。\n当然，我们还应该尝试使用`docker`快速地完成环境配置。\n\n## 我有哪些地方都在用代码\n\n* 这个blog [^scozv_blog]\n* 我的dotfiles [^scozv_dotfiles]\n* 我的所有笔记（LaTeX）\n* 部署脚本\n* 接口文档 [^algo-wiki]\n* 团队内部文档\n\n# 统一的开发流程——脚本化\n\n脚本化，除了作为持续集成的基础之外，还有一个好处，就是统一团队的开发流程。\n\n类似`installation.sh`这样的脚本，可以保证团队的开发环境一致。\n\n类似`gitl` [^gitl] 这样的脚本，就是为了控制统一的开发流程的，比如代码提交这个简单的动作，\n我们通过完善的脚本，可以在代码`push`到Git Server之前：\n\n* 强制单元测试\n* 和JIRA关联\n* 统一的代码风格检查（code hint）\n* 其它\n\n开发人员并不需要拿着Checklist去一步一步，人为地检查流程是否做完了。\n如此，可以给开发带来更好的体验。\n\n# 参考文献\n\n[^dotfiles]: [Your unofficial guide to dotfiles on GitHub](https://dotfiles.github.io/)\n[^nvm]: [Node Version Manager](https://github.com/creationix/nvm)\n[^scozv_blog]: https://github.com/scozv/blog\n[^scozv_dotfiles]: https://github.com/scozv/dotfiles\n[^algo-wiki]: https://github.com/scozv/algo-wiki\n[^gitl]: [一套简洁的基于Git的线性分支管理工作流](https://scozv.github.io/blog/zh/pattern/2016/05/18/a-linear-branch-management-with-git)\n","slug":"zh-2016-07-22-donot-ask-the-devs-to-prepare-env-by-click","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryuh005uyxcb30z03iir"},{"layout":"post","title":"Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文介绍一套`RESTful`的代码模板（代号：`Bolero`）——使用`Scala`语言，基于`Play!`库以及`ReactiveMongo`。\n>\n> 除了基本的HTTP Request和Response处理、MongoDB的异步读写之外，`Bolero`还包含如下功能：\n>\n> * `Model`的几个建议；\n> * `RESTful API`设计的几个建议；\n> * `CORS`跨域配置；\n> * 基于Token认证的Request处理；\n> * 全局范围内设计的一套Monad规则：`EitherOrError`；\n> * 接收Webhook；\n> * 基于`Specs2`的`FakeApplication`集成测试；\n> * 基于`sbt-native`的发布脚本。\n>\n> 本文（尤其是阅读源代码）需要有一定的`Scala`语言基础，需要对Monad有初步的理解。\n> 最好能够（熟练地）使用`Future[T]`。\n>\n> `Bolero`目前主要基于`Play!`框架（`2.4`），但是不包含任何View的部分，所有的Action都返回`JSON`对象。\n> 我计划用`Spary.io`代替`Play!`。\n>\n> `Bolero`的源代码参见 [scozv/bolero](https://github.com/scozv/bolero)。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `Bolero`设计的基本理念\n\n本文介绍的这一套`RESTful`的代码模板，代号为`Bolero`，以下就将该套模板\n称为`Bolero`。`Bolero`的源代码参见：\n\n[https://github.com/scozv/bolero](https://github.com/scozv/bolero)\n\n先来看`Bolero`设计的一些基本理念。\n\n## 松耦合的架构思想\n\n`Bolero`基于松耦合 [^scozv_blog_archi] 的思想，就前后端分离而言：\n\n* `Bolero`只负责后端，我没有使用`Play!`提供的`View`引擎，并且计划使用`Spary.io`代替`Play!`；\n* 作为后台服务，`Bolero`保证所有的HTTP Response都是`JSON`格式，都使用`RESTful`的方式呈现。\n\n可以使用`Bolero`创建多个服务，不过目前，`Bolero`并不是一个Microservices的框架。\n关于微服务，可以关注Lightbend推出的`Lagom`框架，`Lagom`的`Scala`版本正在进行中 [^lagom_issue1]。\n\n## 建模中的一些问题：命名、多态和序列化\n\n数据的传递方向，一个是从前端通过HTTP Request将`payload`数据传递给后端，\n后端转换（`Validate[T]`）为代码层面的`models`，\n经过数据处理之后，持久化到数据库`MongoDB`中。\n\n另一个方向反之，从数据库读、代码层面加工，最后通过HTTP Response返回给前端。\n\n因此，整个过程中有三个层面需要建模：\n\n* 前端建模，虽然`JavaScript`是弱类型，但是建议使用`TypeScript`在前端建模；\n* 代码层面，在`Bolero`中，对应地使用`Scala`设计接口（`trait`）和类（`class`）；\n* 数据库层面，对应的就是`MongoDB`的设计。\n\n在这三个层面中，`Bolero`使用或者建议的命名规范是：\n\n* 所有的主键都叫`_id`；\n* 对象名使用驼峰命名，首字母大写；\n* 对象中的字段使用驼峰命名，首字母小写。\n\n这样，保证了三个层面上的数据建模都是一模一样的。\n\n此处有备住：\n\n> 以上的数据建模规范，不一定是最佳的实践。另外，我正在考虑将前端和数据库层面的建模，\n> 修改为下划线风格，代码层面继续使用驼峰。我是指，“我在考虑，但并没有决定”。\n\n`Play!`中提供了`Reads`和`Writes`模块 [^play_json]，用来处理对象类和`JSON`之间\n的转换：类到`JSON`我们用`Writes`，表示“写”；`JSON`到类，我们用`Reads`，表明“读”。\n\n`Play!`中也提供了用于automated mapping的`JSON`读写 [^play_json_auto]：\n\n{% highlight scala %}\nimport play.api.libs.json._\n\nimplicit val autoReads = Json.reads[T]\nimplicit val autoWrites = Json.writes[T]\n\n// format = reads + writes\nimplicit val autoFormat = Json.format[T]\n{% endhighlight %}\n\n此处有建议：\n\n> 尽管`Play!`提供了automated mapping，但是对于`models`比较复杂的\n> 系统，我建议手动配置`Reads`和`Writes`（**前提是，要有完备的读写测试来覆盖代码**）：\n>\n> * 当任何一层的建模，发生更改的时候，我们必须手动去对应地修改`Reads`和`Writes`，\n>   否则将会收到如下异常，此举，可以保证我们代码的质量：\n>\n>        play.api.libs.json.JsResultException: \"obj.field_name\":{\"msg\":[\"error.path.missing\"]\n> * 手动配置`Reads`和`Writes`的另一个原因就是，可以更加自由地处理`JSON`的序列化：\n>   * `Option[T]`为`None`时，可以不用`Writes`；\n>   * 可以兼容`Scala`建模用驼峰、`MongoDB`建模用下划线的情况。\n\n目前系统的建模，通常离不开继承和多态，使用`Reads`和`Writes`时，可能会遇到如下异常：\n\n{% highlight scala %}\nambiguous reference to overloaded definition\n{% endhighlight %}\n\n表明某一个类的`Reads`或者`Writes`有重复定义的情况。我之前花了9个`git commits`来处理这个问题。\n你可以参考`Bolero`的[源代码](https://github.com/scozv/bolero)，或者给我看看错误信息。\n\n## `RESTful API`设计的几个建议\n\n再次强调，`Bolero`只提供`RESTful`的服务，不提供View渲染。所有的\n`RESTful API`返回的都是`JSON`对象。\n\n### `RESTful API`的几个要素\n\n通常而言，`RESTful`接口在设计的时候，需要考虑这些要素：\n\n* HTTP Method：`GET`、`POST`、`PUT`等 [^rest_http_method]；\n* 资源路径，比如`/user/:id/profile`，可以在路径加入适当的参数，用来排序、分页或者筛选；\n* `payload`数据，传递给`RSETful`服务的`JSON`数据；\n* HTTP Header：可以为当前的HTTP Request添加一些元数据，比如Token认证过程中的用户身份Token；\n* HTTP Response：服务传递回来的`JSON`结果。\n\n### 一致的Payload和Response设计\n\n如果你经常使用`Scala`中的`map()`，你就会发现如下的一致性原则：\n\n{% highlight scala %}\nT.map(): T\n// such as\nList[A].map(): List[B]\nFuture[A].map(): Future[B]\n{% endhighlight %}\n\n受这一原则的启发，我在`Bolero`的`RESTful API`设计中，很多时候\n`payload`和HTTP Response的数据结构都是一样的，比如，\n如下是购物车页面，提交，生成（返回）带`_id`的订单的`RESTful`接口：\n\n{% highlight HTML %}\nPOST /checkout\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Order\"\n\n// Response\ndata: \"Bolero.models.Order\"\n{% endhighlight %}\n\n这样的设计，让接口的使用变得更简单——只需要记住一个数据结构。\n\n### 限制跨域还是开放跨域\n\nCORS是Cross Origin Resource Sharing [^mdn_cors] 的简写。\n\n最初在设计`Bolero`的时候，我是限制跨域的，我只希望某一个指定的`IP`客户端，才能访问`Bolero`接口。\n但是，当我后来需要接入Ping++支付的Webhook的时候，限制跨域就不能同时满足客户端和Ping++的访问了。\n\n因为，`Access-Control-Allow-Origin`\n并不支持多域（multiple origin）同时跨域访问 [^w3_cors_multi_issue]：\n\n> In practice the `origin-list-or-null` production is more constrained.\n> Rather than allowing a space-separated list of origins,\n> **it is either a single origin or the string \"null\"**.\n\n另外，面对松耦合和多个客户端的实例部署，限制跨域不是一个通用的选择。\n\n如果真的想控制跨域，或者统计HTTP Request的来源，可以选择：\n\n* 在`Bolero`中，使用`Play!`的`Filters`[^play_filter]，\n  从HTTP Request中的`origin`信息[^play_rqst_header] 来控制访问源（目前`Bolero`并没有这么做）；\n* 在客户端的Ｗeb Server层面，控制访问源，也就是，对于一些异常的高频访问，Web Server\n  都不会将该HTTP Request发送给`Bolero`服务。\n\n### 名词、单复数以及排序\n\n`Bolero`在设计`RESTful API`的时候，还有如下几个原则：\n\n* 资源地址（`URL`）中只使用名词，最好使用简单名词，\n  不应该出现除反斜线（`/`）以外的其它字符，也不能采用驼峰的命名风格；\n* 资源地址（`URL`）中的名词，统一使用单数，就算是返回一个数组，也应该使用单数，比如：\n\n      // get the list of user\n      GET /user\n      // get a user with specific id\n      GET /user/:id\n\n  我们将单个的用户看作一个文件（`:id`），将这些文件都放进一个叫`user`的目录。我们拿单个的文件，或者\n  取整个文件夹，都会经过`/user`这个路径，不会一个用`/user`；整体用`/users`。\n  所以我们的`URL`中的名词也按照这个原则设计；\n* 如果HTTP Response的是一个数组，那么我们是否需要将该数组排序？`Bolero`的HTTP Response排序原则是：\n    * 如果HTTP Request指定了排序规则，则按照该规则排序；\n    * 如果该接口对应的业务有默认的排序规则，则按照该规则排序；\n    * 其它情况，`Bolero`并不保证HTTP Response的有序性。\n\n# 开发代码详解\n\n`Bolero`的源代码见：[scozv/bolero](https://github.com/scozv/bolero)　。\n\n该源代码的文件结构为：\n\n{% highlight sh %}\n.\n├── app\n|   ├── base                // API中的辅助类\n|   ├── biz                 // 业务处理，仅仅在这一层做数据库的读写\n|   ├── contollers          // MVC 中的控制器\n|   └── models              \n|       ├── interop         // 第三方接口的models\n|       └── model.scala     // Scala建模\n|\n├── conf                    // Play!的配置文件\n|   ├── application.conf\n|   ├── play.plugins\n|   ├── release.conf\n|   └── routes\n|\n├── project                  // 项目编译配置\n|   ├── build.properties\n|   └── plugin.sbt\n|\n├── test                     // 测试脚本\n|\n└── build.sbt\n{% endhighlight %}\n\n## `models`中的几个`trait`解释\n\n### `CanBeHierarchic`，层级类\n\n层级类表示一系列有关联的类。使用并查集的算法，也就是：\n\n* 根节点的`rootId`为其本身；\n* 任意两个实例，如果两者的`rootId`相等，则表示这两者是相互关联的。\n\n### `CanBeJsonfied`，`Reads`和`Writes`的通用处理\n\n参考`models.Goods`中使用`CanBeJsonfied`的方式 [^scozv_git_goods]。\n\n### `CanBeMasked`，敏感字段的掩盖\n\n`Bolero`在将数据Response给前端的时候，有些敏感字段，是不应该返回出去的，比如用户`_id`，\n或者商品的成本价格。使用`CanBeMasked`接口，在Action那边，统一调用`T.asMasked()`，将敏感信息抹除。\n\nMask这个命名，受Oracle Data Masking [^oracle_mask] 的启发。\n\n## `OrderOrError`——基于Monad设计的全局规则校验\n\n就拿创建订单来看，通常订单的创建，会有一系列的规则需要校验：\n\n* 该用户是否有权限创建订单；\n* 订单中的商品数量是否满足库存；\n* 订单中的商品价格是否不小于当前价格；\n* 是否满足订单中列明的优惠；\n* 等等等等。\n\n`OrderOrError`的思路就是，对于任何一条规则，我们保证校验的结果：\n\n* 要么是原来的订单`order`，当此订单通过了校验；\n* 要么是`error`信息\n\n此处，借用了`Scala`对`Try` [^scala_try] 的设计：\n\n{% highlight scala %}\n\ntype OrderOrError = Either[Order, Error]\n\ndef genericValidation(order: Order, db: DB): Future[OrderOrError] = {\n  ???\n  /*\n  * we connect DB and validate the order,\n  * so a Future[T] will be returned\n  * */\n}\n\ndef genericRule\n(order: Future[OrderOrError], db: => DB)\n(implicit ec: ExecutionContext): Future[OrderOrError] =\n  order.flatMap {\n    case Right(e) => Future.successful(Right(e))\n    case Left(o) => genericValidation(o, db)\n  }\n{% endhighlight %}\n\n此处有备注：\n\n> 严格意义上讲，上述的设计并不是Monad模式，因为，它没有实现两个关键的方法 [^scozv_bolero_issue1]：\n>\n>       ModelOrError[A].map(A => B): ModelOrError[B]\n>       ModelOrError[A].flatMap(A => ModelOrError[B]): ModelOrError[B]\n>\n> 我正在考虑和设计。\n\n\n## `CanCrossOrigin`——处理`OPTION`以应对跨域\n\n跨域的处理有两个地方，需要实现：\n\n* 定义`OPTION`路由；\n* 处理`OPTION`，返回`HTTP 200`。\n\n{% highlight scala %}\n// routes\n// OPTIONS       /*path        controllers.CORSController.preFlight(path)\n// controllers\nclass CORSController\n  extends Controller\n  with CanCrossOrigin {\n  def preFlight(path: String) = Action { request =>\n    corsOPTION(path)\n  }\n}\n\n// CanCrossOrigin\ntrait CanCrossOrigin {\n  self: Controller =>\n\n  def corsOPTION(from: String = \"...\"): Result = {\n    ???\n    // add Access-Control-Allow-Origin to header\n  }\n}\n\n{% endhighlight %}\n\n## `CanConnectDB2[T]`——统一处理数据的读写\n\n`CanConnectDB2[T]`是对原先的`CanConnectDB`的改写。\n主要的意图是，让开发人员尽可能地少写重复的代码。\n\n具体的代码变更，参考`biz.Can.scala`，也可以访问[代码变更记录](https://github.com/scozv/bolero/commit/b0a5fd3c3ab58159305711e6e0f742786fccc30b)。\n\n目前提供如下的接口实现：\n\n{% highlight scala %}\ntrait CanConnectDB2[T] {\n  // 查询所有的T\n  def list(db: DB): Future[Seq[T]] = ???\n  // 查询一个指定_id的T\n  def one(db: DB, id: String): Future[Option[T]] = ???\n  // 查询指定_id的T的一个字段\n  def field[B](db: DB, id: String, fieldName: String): Future[Option[B]] = ???\n  // 查询一系列T的指定字段的所有值\n  def sequence[B](db: DB, selector: JsObject, fieldName: String): Future[Seq[B]] = ???\n  // 插入一条T\n  def insert(db: DB, document: T): Future[WriteResult] = ???\n  // 更新符合selector条件的一系列T\n  def update(db: DB, selector: JsObject, update: T): Future[UpdateWriteResult] = ???\n  // 更新指定_id的T\n  def edit(db: DB, id: String, update: T):Future[UpdateWriteResult] = ???\n}\n{% endhighlight %}\n\n## 基于Token的用户认证\n\n`Bolero`的所有接口都是无状态的，识别用户的方式，就是通过Authentication Token。\n在Google中搜索该名词，可以了解更多，也可以找到`auth0`的帖子 [^auth0_token]。\n\n我正在写一篇关于Token认证的帖子[^scozv_blog_auth_token]，\n目前还没有完成，你可以在参考文献中找到该帖子的草稿。\n\n此处有提醒：\n\n> 我对安全认证这一领域，还是很多不了解的地方。`Bolero`对Token认证的实现不能保证100%\n> 安全，我还在不断地改进中。\n\n在`Bolero`里面，使用了`Play!`提供的\nAction composition [^play_composition] 来完成Token认证。\n\n具体的实现，参考`controllers.CanAuthenticate.scala`。\n\n# 测试代码详解\n\n> **测试非常重要 [^scozv_blog_jira]，完备的测试是重构和持续集成的基础。**\n>\n> **测试非常重要，完备的测试是重构和持续集成的基础。**\n>\n> **测试非常重要，完备的测试是重构和持续集成的基础。**\n\n测试的[源代码](https://github.com/scozv/bolero)见`test`目录。\n\n## 测试文件的结构\n\n{% highlight sh %}\n.\n├── test\n|   ├── WithApplication.scala         // 升级至Play 2.4之后，使用旧版的WithApplication\n|   ├── CanConnectDB.scala            // 连接到测试数据库\n|   ├── CanFakeHTTP.scala             // 伪造HTTP Request\n|   └── BoleroApplicationSpec.scala   // 具体的测试脚本，可以将不同的测试逻辑分割成不同的文件\n\n{% endhighlight %}\n\n## 测试的无状态\n\n测试的脚本，要保证在任何库上都能通过，当然，这和测试用例的设计有关。\n\n通常，我们在测试开始时，准备数据，在测试完成之后，清理测试数据。\n\n## `CanFakeHTTP`——不依赖任何客户端的`RESTful`测试\n\n基于松耦合的原则，`RESTful`服务的开发流程中，不应该依赖前端View的开发进程。\n所以，我们使用`CanFakeHTTP`模拟HTTP Request。\n\n# 发布和部署介绍\n\n使用`Bolero`的一个生产环境目前部署在`Ubuntu 14.04`上面。\n\n部署脚本，可以参考`deploy.sh`，最好在`Ubuntu 14.04`上运行。该脚本\n使用了`sbt-native-packager` [^scala_sbt_native] 作常驻发布。\n\n另外，在实际的使用中`Bolero`的生产配置对开发是不可见的。\n我通常会使用多个`git repo`来托管源代码（假定项目代号为`PJ`）：\n\n{% highlight bash %}\npj-docs                 # 文档中心，使用`Markdown`来写项目的所有文档\npj-core-restful         # 本文的主要内容，使用`Bolero`代码模板\npj-core-web             # 核心的Web建模，使用`TypeScript`建模\npj-client-web           # View层，通用的用户访问页面，使用`pj-core-web`\npj-client-device        # View层，App客户端\npj-client-console       # View层，系统的后台管理平台，使用`pj-core-web`\npj-deploy               # 以上所有`repo`的发布配置脚本，对开发不可见\npj-data                 # 生产环境的数据备份，对开发不可见\n{% endhighlight %}\n\n# 参考文献\n\n[^play_json]: [`Play!` JSON Reads/Writes/Format Combinators](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators)\n[^play_json_auto]: [`Play!` JSON automated mapping](https://www.playframework.com/documentation/2.5.x/ScalaJsonAutomated)\n[^rest_http_method]: [Using HTTP Methods for RESTful Services](http://www.restapitutorial.com/lessons/httpmethods.html)\n[^mdn_cors]: [HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n[^w3_cors_multi_issue]: [5.1 Access-Control-Allow-Origin Response Header](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header) from w3.org\n[^play_filter]: [`Play!` Filters](https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters)\n[^play_rqst_header]: [`play.api.mvc.RequestHeader`](https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.mvc.RequestHeader)\n[^auth0_token]: [Cookies vs Tokens. Getting auth right with Angular.JS](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\n[^scozv_blog_auth_token]: [对登录和基于Token的认证机制的理解（草稿）](https://github.com/scozv/blog/blob/master/_drafts/2016-05-12-understanding-of-login-and-the-token-based-authentication.md)\n[^scozv_blog_archi]: [基于低耦合和持续集成的Web架构](https://scozv.github.io/blog/zh/pattern/2016/05/05/a-low-coupling-architecture-of-the-web-solution-with-continuous-integration)\n[^oracle_mask]: [Oracle Data Masking and Subsetting Pack](http://www.oracle.com/technetwork/database/options/data-masking-subsetting/overview/index.html)\n[^scala_try]: [`scala.util.Try`](http://www.scala-lang.org/api/2.9.3/scala/util/Try.html)\n[^play_composition]: [`Play!` Action composition](https://www.playframework.com/documentation/2.5.x/ScalaActionsComposition)\n[^scozv_blog_jira]: [Bitbucket Cloud的Issue至JIRA Server的完全迁移指南](https://scozv.github.io/blog/zh/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server)\n[^scala_sbt_native]: [Debian Plugin]([^scala_sbt_native])\n[^scozv_git_goods]: [`models.Goods`](https://github.com/scozv/bolero/blob/master/app/models/Goods.scala#L28)\n[^lagom_issue1]: [`Lagom` issue #1 Add Scala API](https://github.com/lagom/lagom/issues/1)\n[^scozv_bolero_issue1]: [`Bolero` issue #1 monad ModelOrError needed](https://github.com/scozv/bolero/issues/1)\n","source":"_posts/zh/2016-07-27-bolero-a-restful-scaffold-with-scala.md","raw":"---\nlayout: post\ntitle: \"Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\",\"scaffold\",\"project\",\"architecture\",\"restful\"]\nlang: \"zh\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文介绍一套`RESTful`的代码模板（代号：`Bolero`）——使用`Scala`语言，基于`Play!`库以及`ReactiveMongo`。\n>\n> 除了基本的HTTP Request和Response处理、MongoDB的异步读写之外，`Bolero`还包含如下功能：\n>\n> * `Model`的几个建议；\n> * `RESTful API`设计的几个建议；\n> * `CORS`跨域配置；\n> * 基于Token认证的Request处理；\n> * 全局范围内设计的一套Monad规则：`EitherOrError`；\n> * 接收Webhook；\n> * 基于`Specs2`的`FakeApplication`集成测试；\n> * 基于`sbt-native`的发布脚本。\n>\n> 本文（尤其是阅读源代码）需要有一定的`Scala`语言基础，需要对Monad有初步的理解。\n> 最好能够（熟练地）使用`Future[T]`。\n>\n> `Bolero`目前主要基于`Play!`框架（`2.4`），但是不包含任何View的部分，所有的Action都返回`JSON`对象。\n> 我计划用`Spary.io`代替`Play!`。\n>\n> `Bolero`的源代码参见 [scozv/bolero](https://github.com/scozv/bolero)。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# `Bolero`设计的基本理念\n\n本文介绍的这一套`RESTful`的代码模板，代号为`Bolero`，以下就将该套模板\n称为`Bolero`。`Bolero`的源代码参见：\n\n[https://github.com/scozv/bolero](https://github.com/scozv/bolero)\n\n先来看`Bolero`设计的一些基本理念。\n\n## 松耦合的架构思想\n\n`Bolero`基于松耦合 [^scozv_blog_archi] 的思想，就前后端分离而言：\n\n* `Bolero`只负责后端，我没有使用`Play!`提供的`View`引擎，并且计划使用`Spary.io`代替`Play!`；\n* 作为后台服务，`Bolero`保证所有的HTTP Response都是`JSON`格式，都使用`RESTful`的方式呈现。\n\n可以使用`Bolero`创建多个服务，不过目前，`Bolero`并不是一个Microservices的框架。\n关于微服务，可以关注Lightbend推出的`Lagom`框架，`Lagom`的`Scala`版本正在进行中 [^lagom_issue1]。\n\n## 建模中的一些问题：命名、多态和序列化\n\n数据的传递方向，一个是从前端通过HTTP Request将`payload`数据传递给后端，\n后端转换（`Validate[T]`）为代码层面的`models`，\n经过数据处理之后，持久化到数据库`MongoDB`中。\n\n另一个方向反之，从数据库读、代码层面加工，最后通过HTTP Response返回给前端。\n\n因此，整个过程中有三个层面需要建模：\n\n* 前端建模，虽然`JavaScript`是弱类型，但是建议使用`TypeScript`在前端建模；\n* 代码层面，在`Bolero`中，对应地使用`Scala`设计接口（`trait`）和类（`class`）；\n* 数据库层面，对应的就是`MongoDB`的设计。\n\n在这三个层面中，`Bolero`使用或者建议的命名规范是：\n\n* 所有的主键都叫`_id`；\n* 对象名使用驼峰命名，首字母大写；\n* 对象中的字段使用驼峰命名，首字母小写。\n\n这样，保证了三个层面上的数据建模都是一模一样的。\n\n此处有备住：\n\n> 以上的数据建模规范，不一定是最佳的实践。另外，我正在考虑将前端和数据库层面的建模，\n> 修改为下划线风格，代码层面继续使用驼峰。我是指，“我在考虑，但并没有决定”。\n\n`Play!`中提供了`Reads`和`Writes`模块 [^play_json]，用来处理对象类和`JSON`之间\n的转换：类到`JSON`我们用`Writes`，表示“写”；`JSON`到类，我们用`Reads`，表明“读”。\n\n`Play!`中也提供了用于automated mapping的`JSON`读写 [^play_json_auto]：\n\n{% highlight scala %}\nimport play.api.libs.json._\n\nimplicit val autoReads = Json.reads[T]\nimplicit val autoWrites = Json.writes[T]\n\n// format = reads + writes\nimplicit val autoFormat = Json.format[T]\n{% endhighlight %}\n\n此处有建议：\n\n> 尽管`Play!`提供了automated mapping，但是对于`models`比较复杂的\n> 系统，我建议手动配置`Reads`和`Writes`（**前提是，要有完备的读写测试来覆盖代码**）：\n>\n> * 当任何一层的建模，发生更改的时候，我们必须手动去对应地修改`Reads`和`Writes`，\n>   否则将会收到如下异常，此举，可以保证我们代码的质量：\n>\n>        play.api.libs.json.JsResultException: \"obj.field_name\":{\"msg\":[\"error.path.missing\"]\n> * 手动配置`Reads`和`Writes`的另一个原因就是，可以更加自由地处理`JSON`的序列化：\n>   * `Option[T]`为`None`时，可以不用`Writes`；\n>   * 可以兼容`Scala`建模用驼峰、`MongoDB`建模用下划线的情况。\n\n目前系统的建模，通常离不开继承和多态，使用`Reads`和`Writes`时，可能会遇到如下异常：\n\n{% highlight scala %}\nambiguous reference to overloaded definition\n{% endhighlight %}\n\n表明某一个类的`Reads`或者`Writes`有重复定义的情况。我之前花了9个`git commits`来处理这个问题。\n你可以参考`Bolero`的[源代码](https://github.com/scozv/bolero)，或者给我看看错误信息。\n\n## `RESTful API`设计的几个建议\n\n再次强调，`Bolero`只提供`RESTful`的服务，不提供View渲染。所有的\n`RESTful API`返回的都是`JSON`对象。\n\n### `RESTful API`的几个要素\n\n通常而言，`RESTful`接口在设计的时候，需要考虑这些要素：\n\n* HTTP Method：`GET`、`POST`、`PUT`等 [^rest_http_method]；\n* 资源路径，比如`/user/:id/profile`，可以在路径加入适当的参数，用来排序、分页或者筛选；\n* `payload`数据，传递给`RSETful`服务的`JSON`数据；\n* HTTP Header：可以为当前的HTTP Request添加一些元数据，比如Token认证过程中的用户身份Token；\n* HTTP Response：服务传递回来的`JSON`结果。\n\n### 一致的Payload和Response设计\n\n如果你经常使用`Scala`中的`map()`，你就会发现如下的一致性原则：\n\n{% highlight scala %}\nT.map(): T\n// such as\nList[A].map(): List[B]\nFuture[A].map(): Future[B]\n{% endhighlight %}\n\n受这一原则的启发，我在`Bolero`的`RESTful API`设计中，很多时候\n`payload`和HTTP Response的数据结构都是一样的，比如，\n如下是购物车页面，提交，生成（返回）带`_id`的订单的`RESTful`接口：\n\n{% highlight HTML %}\nPOST /checkout\n\n// Request\n// header: Token for authentication\npayload: \"Bolero.models.Order\"\n\n// Response\ndata: \"Bolero.models.Order\"\n{% endhighlight %}\n\n这样的设计，让接口的使用变得更简单——只需要记住一个数据结构。\n\n### 限制跨域还是开放跨域\n\nCORS是Cross Origin Resource Sharing [^mdn_cors] 的简写。\n\n最初在设计`Bolero`的时候，我是限制跨域的，我只希望某一个指定的`IP`客户端，才能访问`Bolero`接口。\n但是，当我后来需要接入Ping++支付的Webhook的时候，限制跨域就不能同时满足客户端和Ping++的访问了。\n\n因为，`Access-Control-Allow-Origin`\n并不支持多域（multiple origin）同时跨域访问 [^w3_cors_multi_issue]：\n\n> In practice the `origin-list-or-null` production is more constrained.\n> Rather than allowing a space-separated list of origins,\n> **it is either a single origin or the string \"null\"**.\n\n另外，面对松耦合和多个客户端的实例部署，限制跨域不是一个通用的选择。\n\n如果真的想控制跨域，或者统计HTTP Request的来源，可以选择：\n\n* 在`Bolero`中，使用`Play!`的`Filters`[^play_filter]，\n  从HTTP Request中的`origin`信息[^play_rqst_header] 来控制访问源（目前`Bolero`并没有这么做）；\n* 在客户端的Ｗeb Server层面，控制访问源，也就是，对于一些异常的高频访问，Web Server\n  都不会将该HTTP Request发送给`Bolero`服务。\n\n### 名词、单复数以及排序\n\n`Bolero`在设计`RESTful API`的时候，还有如下几个原则：\n\n* 资源地址（`URL`）中只使用名词，最好使用简单名词，\n  不应该出现除反斜线（`/`）以外的其它字符，也不能采用驼峰的命名风格；\n* 资源地址（`URL`）中的名词，统一使用单数，就算是返回一个数组，也应该使用单数，比如：\n\n      // get the list of user\n      GET /user\n      // get a user with specific id\n      GET /user/:id\n\n  我们将单个的用户看作一个文件（`:id`），将这些文件都放进一个叫`user`的目录。我们拿单个的文件，或者\n  取整个文件夹，都会经过`/user`这个路径，不会一个用`/user`；整体用`/users`。\n  所以我们的`URL`中的名词也按照这个原则设计；\n* 如果HTTP Response的是一个数组，那么我们是否需要将该数组排序？`Bolero`的HTTP Response排序原则是：\n    * 如果HTTP Request指定了排序规则，则按照该规则排序；\n    * 如果该接口对应的业务有默认的排序规则，则按照该规则排序；\n    * 其它情况，`Bolero`并不保证HTTP Response的有序性。\n\n# 开发代码详解\n\n`Bolero`的源代码见：[scozv/bolero](https://github.com/scozv/bolero)　。\n\n该源代码的文件结构为：\n\n{% highlight sh %}\n.\n├── app\n|   ├── base                // API中的辅助类\n|   ├── biz                 // 业务处理，仅仅在这一层做数据库的读写\n|   ├── contollers          // MVC 中的控制器\n|   └── models              \n|       ├── interop         // 第三方接口的models\n|       └── model.scala     // Scala建模\n|\n├── conf                    // Play!的配置文件\n|   ├── application.conf\n|   ├── play.plugins\n|   ├── release.conf\n|   └── routes\n|\n├── project                  // 项目编译配置\n|   ├── build.properties\n|   └── plugin.sbt\n|\n├── test                     // 测试脚本\n|\n└── build.sbt\n{% endhighlight %}\n\n## `models`中的几个`trait`解释\n\n### `CanBeHierarchic`，层级类\n\n层级类表示一系列有关联的类。使用并查集的算法，也就是：\n\n* 根节点的`rootId`为其本身；\n* 任意两个实例，如果两者的`rootId`相等，则表示这两者是相互关联的。\n\n### `CanBeJsonfied`，`Reads`和`Writes`的通用处理\n\n参考`models.Goods`中使用`CanBeJsonfied`的方式 [^scozv_git_goods]。\n\n### `CanBeMasked`，敏感字段的掩盖\n\n`Bolero`在将数据Response给前端的时候，有些敏感字段，是不应该返回出去的，比如用户`_id`，\n或者商品的成本价格。使用`CanBeMasked`接口，在Action那边，统一调用`T.asMasked()`，将敏感信息抹除。\n\nMask这个命名，受Oracle Data Masking [^oracle_mask] 的启发。\n\n## `OrderOrError`——基于Monad设计的全局规则校验\n\n就拿创建订单来看，通常订单的创建，会有一系列的规则需要校验：\n\n* 该用户是否有权限创建订单；\n* 订单中的商品数量是否满足库存；\n* 订单中的商品价格是否不小于当前价格；\n* 是否满足订单中列明的优惠；\n* 等等等等。\n\n`OrderOrError`的思路就是，对于任何一条规则，我们保证校验的结果：\n\n* 要么是原来的订单`order`，当此订单通过了校验；\n* 要么是`error`信息\n\n此处，借用了`Scala`对`Try` [^scala_try] 的设计：\n\n{% highlight scala %}\n\ntype OrderOrError = Either[Order, Error]\n\ndef genericValidation(order: Order, db: DB): Future[OrderOrError] = {\n  ???\n  /*\n  * we connect DB and validate the order,\n  * so a Future[T] will be returned\n  * */\n}\n\ndef genericRule\n(order: Future[OrderOrError], db: => DB)\n(implicit ec: ExecutionContext): Future[OrderOrError] =\n  order.flatMap {\n    case Right(e) => Future.successful(Right(e))\n    case Left(o) => genericValidation(o, db)\n  }\n{% endhighlight %}\n\n此处有备注：\n\n> 严格意义上讲，上述的设计并不是Monad模式，因为，它没有实现两个关键的方法 [^scozv_bolero_issue1]：\n>\n>       ModelOrError[A].map(A => B): ModelOrError[B]\n>       ModelOrError[A].flatMap(A => ModelOrError[B]): ModelOrError[B]\n>\n> 我正在考虑和设计。\n\n\n## `CanCrossOrigin`——处理`OPTION`以应对跨域\n\n跨域的处理有两个地方，需要实现：\n\n* 定义`OPTION`路由；\n* 处理`OPTION`，返回`HTTP 200`。\n\n{% highlight scala %}\n// routes\n// OPTIONS       /*path        controllers.CORSController.preFlight(path)\n// controllers\nclass CORSController\n  extends Controller\n  with CanCrossOrigin {\n  def preFlight(path: String) = Action { request =>\n    corsOPTION(path)\n  }\n}\n\n// CanCrossOrigin\ntrait CanCrossOrigin {\n  self: Controller =>\n\n  def corsOPTION(from: String = \"...\"): Result = {\n    ???\n    // add Access-Control-Allow-Origin to header\n  }\n}\n\n{% endhighlight %}\n\n## `CanConnectDB2[T]`——统一处理数据的读写\n\n`CanConnectDB2[T]`是对原先的`CanConnectDB`的改写。\n主要的意图是，让开发人员尽可能地少写重复的代码。\n\n具体的代码变更，参考`biz.Can.scala`，也可以访问[代码变更记录](https://github.com/scozv/bolero/commit/b0a5fd3c3ab58159305711e6e0f742786fccc30b)。\n\n目前提供如下的接口实现：\n\n{% highlight scala %}\ntrait CanConnectDB2[T] {\n  // 查询所有的T\n  def list(db: DB): Future[Seq[T]] = ???\n  // 查询一个指定_id的T\n  def one(db: DB, id: String): Future[Option[T]] = ???\n  // 查询指定_id的T的一个字段\n  def field[B](db: DB, id: String, fieldName: String): Future[Option[B]] = ???\n  // 查询一系列T的指定字段的所有值\n  def sequence[B](db: DB, selector: JsObject, fieldName: String): Future[Seq[B]] = ???\n  // 插入一条T\n  def insert(db: DB, document: T): Future[WriteResult] = ???\n  // 更新符合selector条件的一系列T\n  def update(db: DB, selector: JsObject, update: T): Future[UpdateWriteResult] = ???\n  // 更新指定_id的T\n  def edit(db: DB, id: String, update: T):Future[UpdateWriteResult] = ???\n}\n{% endhighlight %}\n\n## 基于Token的用户认证\n\n`Bolero`的所有接口都是无状态的，识别用户的方式，就是通过Authentication Token。\n在Google中搜索该名词，可以了解更多，也可以找到`auth0`的帖子 [^auth0_token]。\n\n我正在写一篇关于Token认证的帖子[^scozv_blog_auth_token]，\n目前还没有完成，你可以在参考文献中找到该帖子的草稿。\n\n此处有提醒：\n\n> 我对安全认证这一领域，还是很多不了解的地方。`Bolero`对Token认证的实现不能保证100%\n> 安全，我还在不断地改进中。\n\n在`Bolero`里面，使用了`Play!`提供的\nAction composition [^play_composition] 来完成Token认证。\n\n具体的实现，参考`controllers.CanAuthenticate.scala`。\n\n# 测试代码详解\n\n> **测试非常重要 [^scozv_blog_jira]，完备的测试是重构和持续集成的基础。**\n>\n> **测试非常重要，完备的测试是重构和持续集成的基础。**\n>\n> **测试非常重要，完备的测试是重构和持续集成的基础。**\n\n测试的[源代码](https://github.com/scozv/bolero)见`test`目录。\n\n## 测试文件的结构\n\n{% highlight sh %}\n.\n├── test\n|   ├── WithApplication.scala         // 升级至Play 2.4之后，使用旧版的WithApplication\n|   ├── CanConnectDB.scala            // 连接到测试数据库\n|   ├── CanFakeHTTP.scala             // 伪造HTTP Request\n|   └── BoleroApplicationSpec.scala   // 具体的测试脚本，可以将不同的测试逻辑分割成不同的文件\n\n{% endhighlight %}\n\n## 测试的无状态\n\n测试的脚本，要保证在任何库上都能通过，当然，这和测试用例的设计有关。\n\n通常，我们在测试开始时，准备数据，在测试完成之后，清理测试数据。\n\n## `CanFakeHTTP`——不依赖任何客户端的`RESTful`测试\n\n基于松耦合的原则，`RESTful`服务的开发流程中，不应该依赖前端View的开发进程。\n所以，我们使用`CanFakeHTTP`模拟HTTP Request。\n\n# 发布和部署介绍\n\n使用`Bolero`的一个生产环境目前部署在`Ubuntu 14.04`上面。\n\n部署脚本，可以参考`deploy.sh`，最好在`Ubuntu 14.04`上运行。该脚本\n使用了`sbt-native-packager` [^scala_sbt_native] 作常驻发布。\n\n另外，在实际的使用中`Bolero`的生产配置对开发是不可见的。\n我通常会使用多个`git repo`来托管源代码（假定项目代号为`PJ`）：\n\n{% highlight bash %}\npj-docs                 # 文档中心，使用`Markdown`来写项目的所有文档\npj-core-restful         # 本文的主要内容，使用`Bolero`代码模板\npj-core-web             # 核心的Web建模，使用`TypeScript`建模\npj-client-web           # View层，通用的用户访问页面，使用`pj-core-web`\npj-client-device        # View层，App客户端\npj-client-console       # View层，系统的后台管理平台，使用`pj-core-web`\npj-deploy               # 以上所有`repo`的发布配置脚本，对开发不可见\npj-data                 # 生产环境的数据备份，对开发不可见\n{% endhighlight %}\n\n# 参考文献\n\n[^play_json]: [`Play!` JSON Reads/Writes/Format Combinators](https://www.playframework.com/documentation/2.5.x/ScalaJsonCombinators)\n[^play_json_auto]: [`Play!` JSON automated mapping](https://www.playframework.com/documentation/2.5.x/ScalaJsonAutomated)\n[^rest_http_method]: [Using HTTP Methods for RESTful Services](http://www.restapitutorial.com/lessons/httpmethods.html)\n[^mdn_cors]: [HTTP access control (CORS)](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n[^w3_cors_multi_issue]: [5.1 Access-Control-Allow-Origin Response Header](https://www.w3.org/TR/cors/#access-control-allow-origin-response-header) from w3.org\n[^play_filter]: [`Play!` Filters](https://www.playframework.com/documentation/2.5.x/ScalaHttpFilters)\n[^play_rqst_header]: [`play.api.mvc.RequestHeader`](https://www.playframework.com/documentation/2.5.x/api/scala/index.html#play.api.mvc.RequestHeader)\n[^auth0_token]: [Cookies vs Tokens. Getting auth right with Angular.JS](https://auth0.com/blog/2014/01/07/angularjs-authentication-with-cookies-vs-token/)\n[^scozv_blog_auth_token]: [对登录和基于Token的认证机制的理解（草稿）](https://github.com/scozv/blog/blob/master/_drafts/2016-05-12-understanding-of-login-and-the-token-based-authentication.md)\n[^scozv_blog_archi]: [基于低耦合和持续集成的Web架构](https://scozv.github.io/blog/zh/pattern/2016/05/05/a-low-coupling-architecture-of-the-web-solution-with-continuous-integration)\n[^oracle_mask]: [Oracle Data Masking and Subsetting Pack](http://www.oracle.com/technetwork/database/options/data-masking-subsetting/overview/index.html)\n[^scala_try]: [`scala.util.Try`](http://www.scala-lang.org/api/2.9.3/scala/util/Try.html)\n[^play_composition]: [`Play!` Action composition](https://www.playframework.com/documentation/2.5.x/ScalaActionsComposition)\n[^scozv_blog_jira]: [Bitbucket Cloud的Issue至JIRA Server的完全迁移指南](https://scozv.github.io/blog/zh/guide/2016/04/05/fully-migrating-from-bitbucket-cloud-issue-system-to-jira-server)\n[^scala_sbt_native]: [Debian Plugin]([^scala_sbt_native])\n[^scozv_git_goods]: [`models.Goods`](https://github.com/scozv/bolero/blob/master/app/models/Goods.scala#L28)\n[^lagom_issue1]: [`Lagom` issue #1 Add Scala API](https://github.com/lagom/lagom/issues/1)\n[^scozv_bolero_issue1]: [`Bolero` issue #1 monad ModelOrError needed](https://github.com/scozv/bolero/issues/1)\n","slug":"zh-2016-07-27-bolero-a-restful-scaffold-with-scala","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryuk005xyxcbmikj0yhh"},{"layout":"post","title":"Scala函数编程（一）","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 接下来的一系列《Scala函数编程》，得益于公开课《Functional Programming Principles in Scala》[^open_progfun1]。\n> 我整理了函数编程中的重要概念，并加入了我两年`Scala`开发的心得体会 [^blog_bolero]。\n>\n> 为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n>\n> 《Scala函数编程》这一系列，不单纯只是原公开课的笔记整理。\n> 我也加入了自己的理解、一些理论化的表述和一些练习题，供加深理解。\n> 但我依然建议去听原版公开课，并完成所有的Assignment。另外，还要多写代码。\n>\n> 这一系列的文章，将按照如下顺序来写：\n>\n> * 一、函数编程的基本概念、函数类型和类型推断\n> * 二、尾递归（Tail Recursion）和`List[T]`\n> * 三、OOP在`Scala`中的体现\n> * 四、模式匹配\n> * 五、其它线性数据结构类型介绍\n> * 六、延迟执行和Monad、`map`和`flatMap`\n> * 七、`Future[T]`、For Comprehension\n> * 八、`Bolero`代码模板 [^github_bolero] 详解\n>\n> 本文是第一部分，包括如下内容：\n>\n> * 函数编程初览；\n> * Evaluation：CBN和CBV；\n> * 函数的类型（Type）；\n> * 类型推断和类型匹配。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 函数编程初览\n\n## 常用的术语\n\n为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n\n如下先来看一些术语：\n\n* Immutable，如果一个变量（对象）在构造之后，不能重新赋值，我们称其为不可变。\n  其对应的反义词mutable（可变）表示一个变量（对象）可以多次被赋值。\n* Type，类型包括：\n  - 基本类型（Primative）：比如整数、数组，布尔等；\n  - 类或者接口；\n  - 函数类型，过会儿会详细解释。\n* 表达式，精确的表达式定义可参考Scala Specification [^scala_spec_exp]。\n* Evaluation：将一个表达式的最终值给计算出来，我们称之为Evaluation。\n* FP：Functional Programming，函数式编程（语言），简称FP。\n\n\n## 命令式和声明式\n\n我们通常把编程 Paradigm 分成如下两种（参考C#讲座[^c9_lang_future]，公开课提到了三种）：\n\n命令式 | 声明式\n:-----|:-----\nmutable | immutable\n赋值 | 定义之后不能再赋值\nif-else，循环等 | 模式匹配，递归等\n\n命令式的编程，通常关注实现细节——怎么做（How），比如我们常见的自上而下的程序化\n编程语言，使用`for-loop`去控制实现的细节。\n\n对应地，声明式的编程，通常关注最后的目标——做什么（What），比如我们写如下的`SQL`语句：\n\n{% highlight SQL %}\nSELECT _id, name, age\nFROM person\nWHERE class_id = 3\n;\n{% endhighlight %}\n\n我们“声明”了三个指令：\n\n* 从`person`表中；\n* 筛选班级编号为`3`的人；\n* 输出`_id`、`name`和`age`三个字段（Property）；\n\n我们没有使用`for-loop`去“命令”数据库，如何去实现筛选的：\n\n{% highlight JavaScript %}\nres = []\nfor (i = 0; i < person.length; i++) {\n  if (person[i].class_id == 3) {\n    res.push({person[i]._id, person[i].name, person[i].age})\n  }\n} // end loop\n\nreturn res\n{% endhighlight %}\n\n## 运算法则（Theroy）并没有定义Mutable\n\n我们有如下的加法结合律：\n\n$$ (a + b) + c = a + (b + c)  $$\n\n我们把这个结合律，分解成如下几个赋值的步骤：\n\n{% highlight JavaScript %}\nx = a + b\ny = c\nr1 = x + y\nx = a\ny = b + c\nr2 = x + y\n\nAssert.equals(r1, r2)\n{% endhighlight %}\n\n上述的赋值，意味着各个变量都是可变的（Mutable）。\n\n但是，这个结合律里面，实际上，我们只定义了一个加法运算，\n如果我们把一个加法运算提炼成一个函数，那么，这个函数\n接收两个Number类型的参数，并返回它们的和：\n\n$$ f(x, y) \\triangleq x + y $$\n\n上述的结合律，其实对应了如下的函数调用：\n\n$$ f(f(a, b), c) == f(a, f(b, c)) $$\n\n也就是说，加法结合律，这一个运算法则并没有定义任何的Mutable变量。\n\n## 历史和定义\n\n函数编程早期的语言是`Lisp`，与其相关的语言是`Scheme`。\n在`Scheme`论坛里面，有一本称之为“The Bible”的书叫\n《Structure and Interpretation of Computer Programs (SICP)》[^sicp]。\n\n随后出现的函数式编程语言还有`Erlang`、`Haskell`。\n\n运行在`.NET`上的FP是`F#`，而运行在`JVM`上的FP是`Scala`。\n\n通常的，我们将函数式编程定义为：\n\n* Immutable；\n* 没有赋值；\n* 没有`if-else`、循环；\n* 函数是Pure的；\n* 函数和其它Type处在同一地位：可作参数、可作返回值。\n\n# 两种Evaluation的方式\n\n## REPL\n\n我们可以在REPL下面执行`Scala`语句，REPL全称为：Read-Evaluation-Print-Loop，\n表示：\n\n* 读取输入的表达式；\n* 求值；\n* 输出结果；\n* 重复第一步。\n\n其中E就是Evaluation的意思——计算表达式的值。\n\n可以在命令行中输入`scala`，开启`Scala`语言的REPL页面：\n\n{% highlight bash %}\n$ scala\nWelcome to Scala version 2.11.6 (OpenJDK 64-Bit Server VM, Java 1.8.0_91).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\n{% endhighlight %}\n\n## 表达式\n\n精确的表达式定义可参考Scala Specification [^scala_spec_exp]，规格文档中，\n采用了递归定义的方式。\n\n为了便于理解，什么是递归定义，此处引用一阶谓词逻辑的“命题”的定义 [^wiki_formula]：\n\n* 一个简单的句子是一个命题，比如“天是蓝色的”、“我是人”，在这些句子中，“是”是一个一阶谓词；\n* 任意的一个命题$$A$$，它的否定形式也是一个命题 $$\\neg A$$；\n* 更一般地，对于任意一个命题$$A$$，使用任意一个一元操作符$$\\otimes$$，也能称之为命题$$\\otimes A$$；\n* 任意两个命题$$A$$、$$B$$，使用任意一个二元操作符 [^wiki_connective]$$\\otimes$$，也称之为命题$$A \\otimes B$$。\n  在谓词逻辑中，常见的二元操作符有“与”、“或”和“蕴含” [^fn_if-then]；\n* 任意一个命题$$A$$，使用括号之后，依然是一个命题$$(A)$$，其真值表和原命题相同，并在表达式中享有计算的最高优先级。\n\n## Call By-Value，CBV\n\n我们来看第一种Evaluation的方式，定义如下两个函数：\n\n函数一，求和：\n\n$$f(x, y) = x + y$$\n\n函数二，计算平方：\n\n$$g(x) = x^2$$\n\n对于复合函数平方和计算，我们有：\n\n$$h(x, y) = x^2+y^2 = f(x^2, y^2) = f\\left[ g(x), g(y) \\right]$$\n\n下面我们给出$$h(3, f(4,1))$$的求值过程：\n\n{% highlight JavaScript %}\n  h(3, f(4, 1))\n= h(3, 4+1)\n\n= h(3, 5)\n= f(g(3), g(5)) = f(3*3, g(5)) = f(9, g(5))\n= f(9, 5*5)\n\n= f(9, 25)\n= 9 + 25\n= 34\n{% endhighlight %}\n\n在上面的Evaluation过程中，我们优先将“值”应用（Apply）到\n表达式中的各个参数上，比如第一步里面，我们先计算出第二个参数$$f(4,1)$$\n的最终值，再代入（Apply）函数$$h(3,5)$$中做后续的计算。\n\n这样的模式，我们称为Application模式。\n并将这种模式下面的Evaluation，称为Call By-Value，简写为CBV。\n\n## Call By-Name，CBN\n\n同样上面的函数定义，我们来看第二种Evaluation的方式：\n\n{% highlight JavaScript %}\n  h(3, f(4, 1))\n= f[g(3), g( f(4, 1) )]\n= g(3) + g[f(4, 1)]\n= 3*3 + g[f(4, 1)]          // A\n\n= 9 + g[f(4, 1)]\n= 9 + f(4, 1) * f(4, 1)     // B\n= 9 + (4 + 1) * f(4, 1)\n\n= 9 + 5 * f(4, 1)           \n= 9 + 5 * (4 + 1)           // C\n= 9 + 5 * 5\n= 9 + 25\n= 34\n{% endhighlight %}\n\n上面的Evalution过程，我们作如下解释。\n\n步骤A的解释：\n\n* 要想求得两个数相加的和，必须先Evaluate左边的值；\n* 此时，对于二元操作符“加”而言，左边的表达式可以求值了，我们得到$$3*3=9$$；\n* 加号右边的表达式是一个复合函数；\n* 我们还可以继续将参数$$f(4, 1)$$替换（Substitute）进函数$$g(x)=x^2$$中；\n* 替换（Substitute）得到步骤B的表达式$$g(f(4,1)) = \\left[ f(4,1) \\right]^2$$。\n\n步骤B的解释：\n\n* 对于表达式$$f(4, 1) * f(4, 1)$$这样一个乘法运算；\n* 我们首先计算乘号左边的值；\n* 替换（Substitute）得到$$(4 + 1) * f(4, 1)$$；\n* 计算得到$$5 * f(4, 1)$$；\n* 此时，乘号左边的值已经确定，我们“不得不”去Evaluate乘号右边的表达式$$f(4, 1)$$。\n\n步骤C的解释：\n\n* 既然已经求得第一个$$f(4,1)=5$$了，为什么不在同一时刻代入乘号右边的$$f(4,1)$$？\n* 如果我们先后调用了两次$$f(4,1)$$，如何保证两次调用，最终Evaluate的值是一样的？\n* 上面两个问题，包含函数编程的两个重要思想：Immutable和Pure，以后再解释。\n\n上面的步骤，我们优先尝试将参数最原始的状态替代（Substitute）进入表达式。\n直到，表达式没有参数可以替代了，“不得不”去计算一个原始状态，我们才调用加号、或者乘号求值。\n\n这样的模式，我们称为Substitution模式。\n并将这种模式下面的Evaluation，称为Call By-Name，简写为CBN。\n\n## 收敛\n\n如果一个Evaluation的过程，在有限的时间内，可以终止（Terminate）计算。\n我们称该Evaluation是收敛的。\n\n我们作如下的定义：\n\n> 表达式$$A$$收敛，表示为$$\\Lambda(A)$$，意味着：\n>\n> 在有限的时间内，存在一个值$$a$$，使得$$\\Lambda(A) = a$$；\n>\n> 同时，我们记$$\\overline{\\Lambda(A)}$$，表示为表达式$$A$$不收敛。\n>\n> 我们将CBV下的收敛，简写为$$\\Lambda_{\\text{CBV}}(A)$$，\n> 将CBN下的收敛，简写为$$\\Lambda_{\\text{CBN}}(A)$$\n\n\n我们可得如下结论：\n\n> 如果$$\\Lambda_{\\text{CBV}}(A)$$，则一定有$$\\Lambda_{\\text{CBN}}(A)$$；\n>\n> 反之未必。\n\n练习：\n\n> 举出一个“反之未必”的例子；\n>\n> 基于一阶谓词逻辑的命题定义，证明上述结论：$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$。\n\n# 函数的基础知识\n\n本小节不会介绍`Scala`中的基本Data Type，这些基础知识，可以在`Scala`的官方文档或者\n《Programming in Scala》[^scala_progfun_2nd]（Chapter 5 Basic Types and Operations）中找到。\n\n本小节，暂时不会涉及到泛型相关的话题。\n\n## 通常的函数定义\n\n{% highlight Scala %}\nscala> def sum(x: Int, y: Int): Int = x + y\nsum: (x: Int, y: Int)Int\n\nscala> def square(x: Int): Int = x * x\nsquare: (x: Int)Int\n{% endhighlight %}\n\n完整的函数定义规格文档参考官方文档（引用），如下做简要说明，通常的函数定义从左到右依次为：\n\n* `def`关键字，表示开始定义一个函数；\n* 函数名称，如上面的`sum`和`square`；\n* 函数参数定义列表，由一个括号包围，定义如下：\n    - 函数可以不接受任何参数，此时参数列表为空，括号可以省略；\n    - 函数只有一个参数定义，包含参数名称、冒号和参数类型（Type）；\n    - 函数如果有多个参数，则使用逗号分割；\n* 函数的返回类型定义，由冒号和类型（Type）组成；\n* 函数的函数体，由等号和表达式组成。\n\n## 函数调用\n\n`Scala`中函数调用和大多数语言一样，唯一的不同在于，如果函数接收空参数，那么\n调用时，括号可以省略：\n\n{% highlight Scala %}\nscala> sum(1, 2)\nres6: Int = 3\n\nscala> def random(): Int = scala.util.Random.nextInt(5)\nrandom: ()Int\n\nscala> random()\nres8: Int = 4\n\nscala> random\nres9: Int = 1\n{% endhighlight %}\n\n此处有备注：\n\n> 有关随机函数是否为Pure的讨论，可以参考StackOverflow中的讨论：\n>\n> stackoverflow.com/questions/31818787\n\n\n## Scope\n\n使用花括号包围的一个Block，构成了一个局部的Scope。\n\n在`Scala`中，一个Block也是一个表达式，它的值就是这个Block中，最后一个表达式的值。\n\n练习：\n\n> 请问`result`的值是多少？\n>   \n>     val x = 0\n    def f(x: Int) = x + 1\n    val result = {\n      val x = f(1)\n      x * x\n    } + x\n\n\n正因为一个Block也是一个表达式，我们也说过，函数体是由等号和表达式构成的，所以\n函数的定义也可以包含一个Block：\n\n{% highlight Scala %}\nscala> def f(x: Int): Int = {\n         val y = x + 1\n         y\n       }\n\nf: (x: Int)Int\n\nscala> f(3)\nres10: Int = 4\n\n{% endhighlight %}\n\n## 匿名函数\n\n我们可以定义一个匿名函数：\n\n{% highlight Scala %}\nscala> (x: Int, y: Int) => x + y\nres19: (Int, Int) => Int = <function2>\n\nscala> res19(1, 2)\nres20: Int = 3\n{% endhighlight %}\n\n上述的匿名函数，等价于一个Block：\n\n{% highlight Scala %}\n{\n  def res19(x: Int, y: Int): Int = x + y\n  res19\n}\n{% endhighlight %}\n\n# 函数类型\n\n仔细留意`Scala`的REPL输出值（Print）。\n类型\n对于具名函数的定义：\n\n{% highlight Scala %}\nscala> def sum(x: Int, y: Int): Int = x + y\nsum: (x: Int, y: Int)Int\n{% endhighlight %}\n\n对于匿名函数的定义：\n\n{% highlight Scala %}\nscala> (x: Int, y: Int) => x + y\nres19: (Int, Int) => Int = <function2>\n{% endhighlight %}\n\n\n我们称，`(Int, Int) => Int`是一个函数类型，它是一个无穷集合，该集合：\n\n* 每一个元素都是一个函数；\n* 任意一个函数满足：\n    - 接收两个参数；\n    - 第一个参数是`Int`类型；\n    - 第二个参数是`Int`类型；\n    - 函数返回一个`Int`类型；\n* 不满足如上条件的函数定义，不能成为该集合的一个元素。\n\n如果函数不需要参数，则它对应的函数类型为：`() => ?`，比如：\n\n{% highlight Scala %}\nscala> () => 1\nres24: () => Int = <function0>\n{% endhighlight %}\n\n## 函数作为参数\n\n函数类型（Type）类似于其它普通类型——比如`Int`——可以作为参数传递：\n\n{% highlight Scala %}\nscala> def sumBy(x: Int, y: Int, by: Int => Int) = by(x) + by(y)\nsumBy: (x: Int, y: Int, by: Int => Int)Int\n\nscala> sumBy(1, 2, x => x * x)\nres27: Int = 5\n{% endhighlight %}\n\n`sumBy`中的第三个参数`by`是一个函数类型，它表示：\n\n* `by`这个参数接收一个函数；\n     - 这个函数接收一个`Int`作为参数；\n     - 并返回一个`Int`；\n* 不满足`Int => Int`类型的，都无法传递给`by`这个参数。\n\n上述`sumBy`对应的函数类型为：\n\n{% highlight Scala %}\n(Int, Int, Int => Int) => Int\n{% endhighlight %}\n\n## 函数作为返回值\n\n同样地，函数类型（Type）类似于其它普通类型——比如`Int`——可以作为值返回：\n\n{% highlight Scala %}\nscala> def g(step: Int) = (x: Int) => step + x\ng: (step: Int)Int => Int\n\nscala> val s1 = g(1)\ns1: Int => Int = <function1>\n\nscala> val s3 = g(3)\ns3: Int => Int = <function1>\n\nscala> s1(2)\nres28: Int = 3\n\nscala> s3(2)\nres29: Int = 5\n{% endhighlight %}\n\n上述`g`的定义等价于：\n\n{% highlight Scala %}\ndef g(step: Int): Int => Int = {\n  def f(x: Int) = step + x\n\n  f\n}\n{% endhighlight %}\n\n对应的函数类型为：\n\n{% highlight Scala %}\nInt => Int => Int\n{% endhighlight %}\n\n在函数类型的表示中，默认从右向左看，所以如下两个定义是等价的：\n\n{% highlight Scala %}\nInt => Int => Int\nInt => (Int => Int)\n{% endhighlight %}\n\n表示：\n\n* 使用一个`Int`参数；\n* 可以返回（构造出）一个函数；\n* 构造出来的函数接收一个`Int`参数；\n* 构造出来的函数最终返回一个`Int`值。\n\n所以，上述的函数类型，有别于如下的函数类型：\n\n{% highlight Scala %}\n(Int => Int) => Int\n{% endhighlight %}\n\n`(Int => Int) => Int`，表示为：\n\n* 首先接收一个函数作为参数；\n* 这个函数参数将`Int`映射成一个`Int`；\n* 整个函数，最终返回一个`Int`。\n\n练习：\n\n> 定义一个函数，使其函数类型满足`(Int => Int) => Int`。\n\n## 类型推断\n\n我们可以让`Scala`编译器，来推断函数的返回值，比如：\n\n{% highlight Scala %}\nscala> def f(x: Int, y: Int) = x + y\nf: (x: Int, y: Int)Int\n{% endhighlight %}\n\n应用在两个`Int`上的加法运算，得到的结果也是一个 `Int`。\n这就是类型推断的结果，帮助我们简化了函数定义。\n\n类型推断，也可以推出函数类型：\n\n{% highlight Scala %}\nscala> def g(step: Int) = (x: Int) => step + x\ng: (step: Int)Int => Int\n{% endhighlight %}\n\n如果编译器的类型推断和函数定义的返回类型一致，则称该函数的定义合法。\n\n## 类型匹配\n\n函数的调用需要进行类型匹配，先来看基本类型的匹配：\n\n{% highlight Scala %}\nscala> def f(x: Int, y: Double) = x + y\nf: (x: Int, y: Double)Double\n\nscala> f(1, 2)\nres34: Double = 3.0\n\nscala> f(1.0, 2.0)\n<console>:9: error: type mismatch;\n found   : Double(1.0)\n required: Int\n              f(1.0, 2.0)\n                ^\n{% endhighlight %}\n\n\n函数类型（Type）类似于其它普通类型——比如`Int`——调用包含函数参数的函数，也\n需要进行类型匹配：\n\n{% highlight Scala %}\nscala> def sumBy(x: Int, y: Int, by: Int => Int) = by(x) + by(y)\nsumBy: (x: Int, y: Int, by: Int => Int)Int\n\nscala> sumBy(1, 2, 3)\n<console>:9: error: type mismatch;\n found   : Int(3)\n required: Int => Int\n              sumBy(1, 2, 3)\n                          ^\n\nscala> sumBy(1, 2, x => x*x)\nres37: Int = 5\n\nscala> def f(x: Int) = x + 1\nf: (x: Int)Int\n\nscala> sumBy(1, 2, f)\nres38: Int = 5\n{% endhighlight %}\n\n我们将参数列表数量相同，并且类型匹配的函数调用，称为合法的函数调用。\n\n## 函数的返回值不要过度依赖类型推断\n\n不要过度依赖类型推断，在设计复杂类（尤其存在泛型）的时候，显式地定义函数返回类型，\n可以保证函数的逻辑正确，如果不显式定义返回类型的话， `Bolero`中常用的如下的类型，很容易混淆：\n\n{% highlight Scala %}\nFuture[T]\nFuture[Option[T]]\nFuture[Future[T]]\nFuture[Seq[T]]\nSeq[Future[T]]\n// 未来的章节，会提到这些类型\n{% endhighlight %}\n\n## `Scala`语言中如何定义Call By-Value\n\n使用`val`可以定义一个CBV的表达式，在定义的那一刻就完成Evaluation。\n\n## `Scala`语言中如何定义Call By-Name\n\n使用`def`可以定义一个CBN的表达式，只有在“不得不”的时候，才会Evaluate。\n\n## 函数参数中的CBV和CBN\n\n通常的，所有函数参数都是CBV的，可以按照如下方式，定义一个CBN：\n\n{% highlight Scala %}\ndef f(x: Int, y: => Int) =\n  if (x > 0) x else y\n{% endhighlight %}\n\n\n可以改写为：\n\n{% highlight Scala %}\ndef f(x: Int, y: () => Int) =\n  if (x > 0) x else y()\n{% endhighlight %}\n\n# 综合练习\n\n## 根据函数定义，写出它们对应的函数类型\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x + 1\n// 对应的函数类型为：Int => Int\n{% endhighlight %}\n\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: Int, z: Int): Int = x + y - z\ndef f(x: Int, y: Int, z: Int) = x * (y / z)\ndef f(x: Int, y: Int, z: Int) = (x * 1.0) * (y + z)\n\ndef f(x: Int): Int => Int = {\n  def g(y: Int) = x + y\n  g\n}\ndef f(x: Int) = y => x + y\n\ndef f(x: Int, y: () => Int) = x + y()\ndef f(x: Int, y: (Int, Int) => Int) = y(x, x+1)\n\ndef f(x: Int) = (y: Int) => x + y\n\ndef f(x: Int, y: () => Int) = (z: Int) => x + y() + z\ndef f(x: Int) = (y: Int, z: Int) => x + y + z\n\ndef f(x: Int, y: () => Int) = x + (() => y())()\n{% endhighlight %}\n\n## 判断下列的函数定义，是否合法\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x + 1\n// 该函数定义合法，因为当x是整数的时候，(x + 1) 也是一个整数；\n// 类型推断符合函数返回类型\n\ndef f(x: Int): String = x + 1\n// 该函数定义不合法，因为(x + 1)是一个整数，但是函数需要一个String作返回值；\n// 类型推断不符合函数的返回类型\n{% endhighlight %}\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x\ndef f(x: Int): Double = x\ndef f(x: Int): Double = x + 0.0\n\ndef f(x: Int, y: Double, z: String): Int = x + y - z.length\ndef f(x: Int, y: Double, z: String): Int = z\n\ndef f(x: Int, y: () => Int): Int = x + y()\ndef f(x: Int, y: () => Int): Int = y\n\ndef f(x: Int, y: Int => Int): Int = y(x)\ndef f(x: Int, y: Int => Int): Int = (z: Int) => y(x) + z\n{% endhighlight %}\n\n## 判断下列的函数调用，是否合法\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Double): Double = x + 1.0\nf()         // 调用不合法，因为参数列表的数量不匹配\nf(1.0)      // 调用合法，参数列表的数量、类型都匹配\nf(1)        // 调用合法，参数列表的数量相同，Int类型可以隐式转换为Double类型\n{% endhighlight %}\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: Double, z: String): Int = x + y - z.length\nf(1, 2, 3)\nf(1, 2, \"3\")\nf(1.0, 2.0, \"3.0\")\n\ndef f(x: Int, y: () => Int) = x + y()\ndef g: Int = 2\ndef h() = 2\nf(1, 2)\nf(1, () => 2)\nf(1, (x: Int) => 2)\nf(1, g)\nf(1, g())\nf(1, h)\nf(1, h())\n\ndef f(x: Int, y: Int => Int) = y(x)\nf(1, 2)\nf(1, x => x)\nf(1, (x: Int) => x)\nf(1, (x: Int, y: Int) => x)\n{% endhighlight %}\n\n## 根据函数类型，定义一个满足该类型的函数\n\n尽量使用匿名表达式定义如下函数。\n\n举例：\n\n{% highlight Scala %}\n// 对于函数类型：Int => Double，可定义\ndef f(x: Int) = x * 1.0\n// 对应的匿名表达式为\n(x: Int) => x * 1.0\n{% endhighlight %}\n\n\n题目：\n\n{% highlight Scala %}\n() => Int\nInt => Int\n\n(Int, Int) => Int\n\nInt => Int => Int\nInt => (Int => Int)\n\n(Int, Int => Int) => Int\n(Int, Int => Int) => Int => Int\n\nInt => Int => Int => Int\n\nInt => (Int => Int) => Int\n{% endhighlight %}\n\n## 将包含CBN参数的函数，改写成类似的普通函数\n\n举例参考正文中的例子。\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: => Int) = x + y\n\ndef f(x: Int, y: => Int) =\n  if (x > 0) x else y\n\ndef f(x: Int, y: => Int) =\n  (z: Int) => x + y + z\n{% endhighlight %}\n\n## 设计一个布尔类型\n\n（略）\n\n注意CBV和CBN的使用。\n\n# 练习题参考答案\n\n## 举出一个“反之未必”的例子\n\n定义两个函数：\n\n函数一，永久循环累加：\n\n$$f(x) = x + (x+1) + (x+2) + \\ldots + \\infty = \\sum_{t=x}^{\\infty} t$$\n\n\n函数二，有条件地返回第一个参数：\n\n$$g(x, y) =  (x > 0) \\; ? \\;x : y $$\n\n则：\n\n$$\\Lambda_{\\text{CBN}}\\left( g[1, f(0)]\\right) = 1$$，但是$$\\overline{\\Lambda_{\\text{CBV}}(g[1, f(0)])}$$\n\n\n## 基于一阶谓词逻辑的命题定义的证明过程\n\n题目：\n\n> 基于一阶谓词逻辑的命题定义，证明：$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$\n\n证明：\n\n根据一阶谓词逻辑下，对“命题”的递归定义，使用归纳法证明：\n\n首先考虑命题$$A$$、$$B$$是一个简单句，此时$$\\Lambda_{\\text{CBV}}(A)$$等同于$$\\Lambda_{\\text{CBN}}(A)$$。\n\n于是不难证明，当$$A$$是一个简单句时：\n\n* (1)，$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$；\n* (2)，$$\\Lambda_{\\text{CBV}}(\\neg A) \\rightarrow \\Lambda_{\\text{CBN}}(\\neg A)$$，该结论使用反证法可得；\n* (3)，$$\\Lambda_{\\text{CBV}}[(A)] \\rightarrow \\Lambda_{\\text{CBN}}[(A)]$$，该结论使用反证法可得；\n\n下面证明，当命题$$A$$、$$B$$是一个简单句，对于任意的二元操作符$$\\otimes$$，同样满足：\n\n$$\\Lambda_{\\text{CBV}}(A \\otimes B) \\rightarrow \\Lambda_{\\text{CBN}}(A \\otimes B) $$\n\n先看蕴含式的左边，我们可得：\n\n$$\\Lambda_{\\text{CBV}}(A \\otimes B) \\rightarrow \\Lambda_{\\text{CBV}}(A) \\wedge \\Lambda_{\\text{CBV}}(B) $$\n\n因为（反证法），在CBV的情况下，若$$A$$和$$B$$中存在任意一个无法Evaluation的情况，二元操作符$$\\otimes$$都不能执行，最终\n导致$$\\overline{\\Lambda_{\\text{CBV}}(A \\otimes B)}$$，和题目本意矛盾。\n\n于是，我们证明了，当命题$$A$$、$$B$$是一个简单句，对于任意的二元操作符$$\\otimes$$，如果\n$$\\Lambda_{\\text{CBV}}(A \\otimes B)$$，则在有限的时间内：\n\n* (4)，$$\\exists a \\rightarrow \\Lambda_{\\text{CBV}}(A) = a$$；\n* (5)，$$\\exists b \\rightarrow \\Lambda_{\\text{CBV}}(B) = b$$；\n\n进而，\n\n$$\\Lambda_{\\text{CBN}}(A \\otimes B)  \\;{\\tiny\\begin{matrix}\\\\ \\normalsize = \\\\ ^{\\scriptsize (4)}\\end{matrix}}\\; \\Lambda_{\\text{CBN}}(a \\otimes B)  \\;{\\tiny\\begin{matrix}\\\\ \\normalsize = \\\\ ^{\\scriptsize (5)}\\end{matrix}}\\; \\Lambda_{\\text{CBN}}(a \\otimes b) = a\\otimes b$$\n\n之后，使用递归，对复杂命题同理证明。\n\n\n（略）\n\n# 参考文献\n\n[^c9_lang_future]: [TechDays 2010 Keynote by Anders Hejlsberg: Trends and future directions in programming languages](https://channel9.msdn.com/blogs/adebruyn/techdays-2010-developer-keynote-by-anders-hejlsberg)\n[^blog_bolero]: [Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板](https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, 源代码](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","source":"_posts/zh/2016-08-21-scala-quick-tour-part-i.md","raw":"---\nlayout: post\ntitle: \"Scala函数编程（一）\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\"]\nlang: zh\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 接下来的一系列《Scala函数编程》，得益于公开课《Functional Programming Principles in Scala》[^open_progfun1]。\n> 我整理了函数编程中的重要概念，并加入了我两年`Scala`开发的心得体会 [^blog_bolero]。\n>\n> 为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n>\n> 《Scala函数编程》这一系列，不单纯只是原公开课的笔记整理。\n> 我也加入了自己的理解、一些理论化的表述和一些练习题，供加深理解。\n> 但我依然建议去听原版公开课，并完成所有的Assignment。另外，还要多写代码。\n>\n> 这一系列的文章，将按照如下顺序来写：\n>\n> * 一、函数编程的基本概念、函数类型和类型推断\n> * 二、尾递归（Tail Recursion）和`List[T]`\n> * 三、OOP在`Scala`中的体现\n> * 四、模式匹配\n> * 五、其它线性数据结构类型介绍\n> * 六、延迟执行和Monad、`map`和`flatMap`\n> * 七、`Future[T]`、For Comprehension\n> * 八、`Bolero`代码模板 [^github_bolero] 详解\n>\n> 本文是第一部分，包括如下内容：\n>\n> * 函数编程初览；\n> * Evaluation：CBN和CBV；\n> * 函数的类型（Type）；\n> * 类型推断和类型匹配。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 函数编程初览\n\n## 常用的术语\n\n为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n\n如下先来看一些术语：\n\n* Immutable，如果一个变量（对象）在构造之后，不能重新赋值，我们称其为不可变。\n  其对应的反义词mutable（可变）表示一个变量（对象）可以多次被赋值。\n* Type，类型包括：\n  - 基本类型（Primative）：比如整数、数组，布尔等；\n  - 类或者接口；\n  - 函数类型，过会儿会详细解释。\n* 表达式，精确的表达式定义可参考Scala Specification [^scala_spec_exp]。\n* Evaluation：将一个表达式的最终值给计算出来，我们称之为Evaluation。\n* FP：Functional Programming，函数式编程（语言），简称FP。\n\n\n## 命令式和声明式\n\n我们通常把编程 Paradigm 分成如下两种（参考C#讲座[^c9_lang_future]，公开课提到了三种）：\n\n命令式 | 声明式\n:-----|:-----\nmutable | immutable\n赋值 | 定义之后不能再赋值\nif-else，循环等 | 模式匹配，递归等\n\n命令式的编程，通常关注实现细节——怎么做（How），比如我们常见的自上而下的程序化\n编程语言，使用`for-loop`去控制实现的细节。\n\n对应地，声明式的编程，通常关注最后的目标——做什么（What），比如我们写如下的`SQL`语句：\n\n{% highlight SQL %}\nSELECT _id, name, age\nFROM person\nWHERE class_id = 3\n;\n{% endhighlight %}\n\n我们“声明”了三个指令：\n\n* 从`person`表中；\n* 筛选班级编号为`3`的人；\n* 输出`_id`、`name`和`age`三个字段（Property）；\n\n我们没有使用`for-loop`去“命令”数据库，如何去实现筛选的：\n\n{% highlight JavaScript %}\nres = []\nfor (i = 0; i < person.length; i++) {\n  if (person[i].class_id == 3) {\n    res.push({person[i]._id, person[i].name, person[i].age})\n  }\n} // end loop\n\nreturn res\n{% endhighlight %}\n\n## 运算法则（Theroy）并没有定义Mutable\n\n我们有如下的加法结合律：\n\n$$ (a + b) + c = a + (b + c)  $$\n\n我们把这个结合律，分解成如下几个赋值的步骤：\n\n{% highlight JavaScript %}\nx = a + b\ny = c\nr1 = x + y\nx = a\ny = b + c\nr2 = x + y\n\nAssert.equals(r1, r2)\n{% endhighlight %}\n\n上述的赋值，意味着各个变量都是可变的（Mutable）。\n\n但是，这个结合律里面，实际上，我们只定义了一个加法运算，\n如果我们把一个加法运算提炼成一个函数，那么，这个函数\n接收两个Number类型的参数，并返回它们的和：\n\n$$ f(x, y) \\triangleq x + y $$\n\n上述的结合律，其实对应了如下的函数调用：\n\n$$ f(f(a, b), c) == f(a, f(b, c)) $$\n\n也就是说，加法结合律，这一个运算法则并没有定义任何的Mutable变量。\n\n## 历史和定义\n\n函数编程早期的语言是`Lisp`，与其相关的语言是`Scheme`。\n在`Scheme`论坛里面，有一本称之为“The Bible”的书叫\n《Structure and Interpretation of Computer Programs (SICP)》[^sicp]。\n\n随后出现的函数式编程语言还有`Erlang`、`Haskell`。\n\n运行在`.NET`上的FP是`F#`，而运行在`JVM`上的FP是`Scala`。\n\n通常的，我们将函数式编程定义为：\n\n* Immutable；\n* 没有赋值；\n* 没有`if-else`、循环；\n* 函数是Pure的；\n* 函数和其它Type处在同一地位：可作参数、可作返回值。\n\n# 两种Evaluation的方式\n\n## REPL\n\n我们可以在REPL下面执行`Scala`语句，REPL全称为：Read-Evaluation-Print-Loop，\n表示：\n\n* 读取输入的表达式；\n* 求值；\n* 输出结果；\n* 重复第一步。\n\n其中E就是Evaluation的意思——计算表达式的值。\n\n可以在命令行中输入`scala`，开启`Scala`语言的REPL页面：\n\n{% highlight bash %}\n$ scala\nWelcome to Scala version 2.11.6 (OpenJDK 64-Bit Server VM, Java 1.8.0_91).\nType in expressions to have them evaluated.\nType :help for more information.\n\nscala>\n{% endhighlight %}\n\n## 表达式\n\n精确的表达式定义可参考Scala Specification [^scala_spec_exp]，规格文档中，\n采用了递归定义的方式。\n\n为了便于理解，什么是递归定义，此处引用一阶谓词逻辑的“命题”的定义 [^wiki_formula]：\n\n* 一个简单的句子是一个命题，比如“天是蓝色的”、“我是人”，在这些句子中，“是”是一个一阶谓词；\n* 任意的一个命题$$A$$，它的否定形式也是一个命题 $$\\neg A$$；\n* 更一般地，对于任意一个命题$$A$$，使用任意一个一元操作符$$\\otimes$$，也能称之为命题$$\\otimes A$$；\n* 任意两个命题$$A$$、$$B$$，使用任意一个二元操作符 [^wiki_connective]$$\\otimes$$，也称之为命题$$A \\otimes B$$。\n  在谓词逻辑中，常见的二元操作符有“与”、“或”和“蕴含” [^fn_if-then]；\n* 任意一个命题$$A$$，使用括号之后，依然是一个命题$$(A)$$，其真值表和原命题相同，并在表达式中享有计算的最高优先级。\n\n## Call By-Value，CBV\n\n我们来看第一种Evaluation的方式，定义如下两个函数：\n\n函数一，求和：\n\n$$f(x, y) = x + y$$\n\n函数二，计算平方：\n\n$$g(x) = x^2$$\n\n对于复合函数平方和计算，我们有：\n\n$$h(x, y) = x^2+y^2 = f(x^2, y^2) = f\\left[ g(x), g(y) \\right]$$\n\n下面我们给出$$h(3, f(4,1))$$的求值过程：\n\n{% highlight JavaScript %}\n  h(3, f(4, 1))\n= h(3, 4+1)\n\n= h(3, 5)\n= f(g(3), g(5)) = f(3*3, g(5)) = f(9, g(5))\n= f(9, 5*5)\n\n= f(9, 25)\n= 9 + 25\n= 34\n{% endhighlight %}\n\n在上面的Evaluation过程中，我们优先将“值”应用（Apply）到\n表达式中的各个参数上，比如第一步里面，我们先计算出第二个参数$$f(4,1)$$\n的最终值，再代入（Apply）函数$$h(3,5)$$中做后续的计算。\n\n这样的模式，我们称为Application模式。\n并将这种模式下面的Evaluation，称为Call By-Value，简写为CBV。\n\n## Call By-Name，CBN\n\n同样上面的函数定义，我们来看第二种Evaluation的方式：\n\n{% highlight JavaScript %}\n  h(3, f(4, 1))\n= f[g(3), g( f(4, 1) )]\n= g(3) + g[f(4, 1)]\n= 3*3 + g[f(4, 1)]          // A\n\n= 9 + g[f(4, 1)]\n= 9 + f(4, 1) * f(4, 1)     // B\n= 9 + (4 + 1) * f(4, 1)\n\n= 9 + 5 * f(4, 1)           \n= 9 + 5 * (4 + 1)           // C\n= 9 + 5 * 5\n= 9 + 25\n= 34\n{% endhighlight %}\n\n上面的Evalution过程，我们作如下解释。\n\n步骤A的解释：\n\n* 要想求得两个数相加的和，必须先Evaluate左边的值；\n* 此时，对于二元操作符“加”而言，左边的表达式可以求值了，我们得到$$3*3=9$$；\n* 加号右边的表达式是一个复合函数；\n* 我们还可以继续将参数$$f(4, 1)$$替换（Substitute）进函数$$g(x)=x^2$$中；\n* 替换（Substitute）得到步骤B的表达式$$g(f(4,1)) = \\left[ f(4,1) \\right]^2$$。\n\n步骤B的解释：\n\n* 对于表达式$$f(4, 1) * f(4, 1)$$这样一个乘法运算；\n* 我们首先计算乘号左边的值；\n* 替换（Substitute）得到$$(4 + 1) * f(4, 1)$$；\n* 计算得到$$5 * f(4, 1)$$；\n* 此时，乘号左边的值已经确定，我们“不得不”去Evaluate乘号右边的表达式$$f(4, 1)$$。\n\n步骤C的解释：\n\n* 既然已经求得第一个$$f(4,1)=5$$了，为什么不在同一时刻代入乘号右边的$$f(4,1)$$？\n* 如果我们先后调用了两次$$f(4,1)$$，如何保证两次调用，最终Evaluate的值是一样的？\n* 上面两个问题，包含函数编程的两个重要思想：Immutable和Pure，以后再解释。\n\n上面的步骤，我们优先尝试将参数最原始的状态替代（Substitute）进入表达式。\n直到，表达式没有参数可以替代了，“不得不”去计算一个原始状态，我们才调用加号、或者乘号求值。\n\n这样的模式，我们称为Substitution模式。\n并将这种模式下面的Evaluation，称为Call By-Name，简写为CBN。\n\n## 收敛\n\n如果一个Evaluation的过程，在有限的时间内，可以终止（Terminate）计算。\n我们称该Evaluation是收敛的。\n\n我们作如下的定义：\n\n> 表达式$$A$$收敛，表示为$$\\Lambda(A)$$，意味着：\n>\n> 在有限的时间内，存在一个值$$a$$，使得$$\\Lambda(A) = a$$；\n>\n> 同时，我们记$$\\overline{\\Lambda(A)}$$，表示为表达式$$A$$不收敛。\n>\n> 我们将CBV下的收敛，简写为$$\\Lambda_{\\text{CBV}}(A)$$，\n> 将CBN下的收敛，简写为$$\\Lambda_{\\text{CBN}}(A)$$\n\n\n我们可得如下结论：\n\n> 如果$$\\Lambda_{\\text{CBV}}(A)$$，则一定有$$\\Lambda_{\\text{CBN}}(A)$$；\n>\n> 反之未必。\n\n练习：\n\n> 举出一个“反之未必”的例子；\n>\n> 基于一阶谓词逻辑的命题定义，证明上述结论：$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$。\n\n# 函数的基础知识\n\n本小节不会介绍`Scala`中的基本Data Type，这些基础知识，可以在`Scala`的官方文档或者\n《Programming in Scala》[^scala_progfun_2nd]（Chapter 5 Basic Types and Operations）中找到。\n\n本小节，暂时不会涉及到泛型相关的话题。\n\n## 通常的函数定义\n\n{% highlight Scala %}\nscala> def sum(x: Int, y: Int): Int = x + y\nsum: (x: Int, y: Int)Int\n\nscala> def square(x: Int): Int = x * x\nsquare: (x: Int)Int\n{% endhighlight %}\n\n完整的函数定义规格文档参考官方文档（引用），如下做简要说明，通常的函数定义从左到右依次为：\n\n* `def`关键字，表示开始定义一个函数；\n* 函数名称，如上面的`sum`和`square`；\n* 函数参数定义列表，由一个括号包围，定义如下：\n    - 函数可以不接受任何参数，此时参数列表为空，括号可以省略；\n    - 函数只有一个参数定义，包含参数名称、冒号和参数类型（Type）；\n    - 函数如果有多个参数，则使用逗号分割；\n* 函数的返回类型定义，由冒号和类型（Type）组成；\n* 函数的函数体，由等号和表达式组成。\n\n## 函数调用\n\n`Scala`中函数调用和大多数语言一样，唯一的不同在于，如果函数接收空参数，那么\n调用时，括号可以省略：\n\n{% highlight Scala %}\nscala> sum(1, 2)\nres6: Int = 3\n\nscala> def random(): Int = scala.util.Random.nextInt(5)\nrandom: ()Int\n\nscala> random()\nres8: Int = 4\n\nscala> random\nres9: Int = 1\n{% endhighlight %}\n\n此处有备注：\n\n> 有关随机函数是否为Pure的讨论，可以参考StackOverflow中的讨论：\n>\n> stackoverflow.com/questions/31818787\n\n\n## Scope\n\n使用花括号包围的一个Block，构成了一个局部的Scope。\n\n在`Scala`中，一个Block也是一个表达式，它的值就是这个Block中，最后一个表达式的值。\n\n练习：\n\n> 请问`result`的值是多少？\n>   \n>     val x = 0\n    def f(x: Int) = x + 1\n    val result = {\n      val x = f(1)\n      x * x\n    } + x\n\n\n正因为一个Block也是一个表达式，我们也说过，函数体是由等号和表达式构成的，所以\n函数的定义也可以包含一个Block：\n\n{% highlight Scala %}\nscala> def f(x: Int): Int = {\n         val y = x + 1\n         y\n       }\n\nf: (x: Int)Int\n\nscala> f(3)\nres10: Int = 4\n\n{% endhighlight %}\n\n## 匿名函数\n\n我们可以定义一个匿名函数：\n\n{% highlight Scala %}\nscala> (x: Int, y: Int) => x + y\nres19: (Int, Int) => Int = <function2>\n\nscala> res19(1, 2)\nres20: Int = 3\n{% endhighlight %}\n\n上述的匿名函数，等价于一个Block：\n\n{% highlight Scala %}\n{\n  def res19(x: Int, y: Int): Int = x + y\n  res19\n}\n{% endhighlight %}\n\n# 函数类型\n\n仔细留意`Scala`的REPL输出值（Print）。\n类型\n对于具名函数的定义：\n\n{% highlight Scala %}\nscala> def sum(x: Int, y: Int): Int = x + y\nsum: (x: Int, y: Int)Int\n{% endhighlight %}\n\n对于匿名函数的定义：\n\n{% highlight Scala %}\nscala> (x: Int, y: Int) => x + y\nres19: (Int, Int) => Int = <function2>\n{% endhighlight %}\n\n\n我们称，`(Int, Int) => Int`是一个函数类型，它是一个无穷集合，该集合：\n\n* 每一个元素都是一个函数；\n* 任意一个函数满足：\n    - 接收两个参数；\n    - 第一个参数是`Int`类型；\n    - 第二个参数是`Int`类型；\n    - 函数返回一个`Int`类型；\n* 不满足如上条件的函数定义，不能成为该集合的一个元素。\n\n如果函数不需要参数，则它对应的函数类型为：`() => ?`，比如：\n\n{% highlight Scala %}\nscala> () => 1\nres24: () => Int = <function0>\n{% endhighlight %}\n\n## 函数作为参数\n\n函数类型（Type）类似于其它普通类型——比如`Int`——可以作为参数传递：\n\n{% highlight Scala %}\nscala> def sumBy(x: Int, y: Int, by: Int => Int) = by(x) + by(y)\nsumBy: (x: Int, y: Int, by: Int => Int)Int\n\nscala> sumBy(1, 2, x => x * x)\nres27: Int = 5\n{% endhighlight %}\n\n`sumBy`中的第三个参数`by`是一个函数类型，它表示：\n\n* `by`这个参数接收一个函数；\n     - 这个函数接收一个`Int`作为参数；\n     - 并返回一个`Int`；\n* 不满足`Int => Int`类型的，都无法传递给`by`这个参数。\n\n上述`sumBy`对应的函数类型为：\n\n{% highlight Scala %}\n(Int, Int, Int => Int) => Int\n{% endhighlight %}\n\n## 函数作为返回值\n\n同样地，函数类型（Type）类似于其它普通类型——比如`Int`——可以作为值返回：\n\n{% highlight Scala %}\nscala> def g(step: Int) = (x: Int) => step + x\ng: (step: Int)Int => Int\n\nscala> val s1 = g(1)\ns1: Int => Int = <function1>\n\nscala> val s3 = g(3)\ns3: Int => Int = <function1>\n\nscala> s1(2)\nres28: Int = 3\n\nscala> s3(2)\nres29: Int = 5\n{% endhighlight %}\n\n上述`g`的定义等价于：\n\n{% highlight Scala %}\ndef g(step: Int): Int => Int = {\n  def f(x: Int) = step + x\n\n  f\n}\n{% endhighlight %}\n\n对应的函数类型为：\n\n{% highlight Scala %}\nInt => Int => Int\n{% endhighlight %}\n\n在函数类型的表示中，默认从右向左看，所以如下两个定义是等价的：\n\n{% highlight Scala %}\nInt => Int => Int\nInt => (Int => Int)\n{% endhighlight %}\n\n表示：\n\n* 使用一个`Int`参数；\n* 可以返回（构造出）一个函数；\n* 构造出来的函数接收一个`Int`参数；\n* 构造出来的函数最终返回一个`Int`值。\n\n所以，上述的函数类型，有别于如下的函数类型：\n\n{% highlight Scala %}\n(Int => Int) => Int\n{% endhighlight %}\n\n`(Int => Int) => Int`，表示为：\n\n* 首先接收一个函数作为参数；\n* 这个函数参数将`Int`映射成一个`Int`；\n* 整个函数，最终返回一个`Int`。\n\n练习：\n\n> 定义一个函数，使其函数类型满足`(Int => Int) => Int`。\n\n## 类型推断\n\n我们可以让`Scala`编译器，来推断函数的返回值，比如：\n\n{% highlight Scala %}\nscala> def f(x: Int, y: Int) = x + y\nf: (x: Int, y: Int)Int\n{% endhighlight %}\n\n应用在两个`Int`上的加法运算，得到的结果也是一个 `Int`。\n这就是类型推断的结果，帮助我们简化了函数定义。\n\n类型推断，也可以推出函数类型：\n\n{% highlight Scala %}\nscala> def g(step: Int) = (x: Int) => step + x\ng: (step: Int)Int => Int\n{% endhighlight %}\n\n如果编译器的类型推断和函数定义的返回类型一致，则称该函数的定义合法。\n\n## 类型匹配\n\n函数的调用需要进行类型匹配，先来看基本类型的匹配：\n\n{% highlight Scala %}\nscala> def f(x: Int, y: Double) = x + y\nf: (x: Int, y: Double)Double\n\nscala> f(1, 2)\nres34: Double = 3.0\n\nscala> f(1.0, 2.0)\n<console>:9: error: type mismatch;\n found   : Double(1.0)\n required: Int\n              f(1.0, 2.0)\n                ^\n{% endhighlight %}\n\n\n函数类型（Type）类似于其它普通类型——比如`Int`——调用包含函数参数的函数，也\n需要进行类型匹配：\n\n{% highlight Scala %}\nscala> def sumBy(x: Int, y: Int, by: Int => Int) = by(x) + by(y)\nsumBy: (x: Int, y: Int, by: Int => Int)Int\n\nscala> sumBy(1, 2, 3)\n<console>:9: error: type mismatch;\n found   : Int(3)\n required: Int => Int\n              sumBy(1, 2, 3)\n                          ^\n\nscala> sumBy(1, 2, x => x*x)\nres37: Int = 5\n\nscala> def f(x: Int) = x + 1\nf: (x: Int)Int\n\nscala> sumBy(1, 2, f)\nres38: Int = 5\n{% endhighlight %}\n\n我们将参数列表数量相同，并且类型匹配的函数调用，称为合法的函数调用。\n\n## 函数的返回值不要过度依赖类型推断\n\n不要过度依赖类型推断，在设计复杂类（尤其存在泛型）的时候，显式地定义函数返回类型，\n可以保证函数的逻辑正确，如果不显式定义返回类型的话， `Bolero`中常用的如下的类型，很容易混淆：\n\n{% highlight Scala %}\nFuture[T]\nFuture[Option[T]]\nFuture[Future[T]]\nFuture[Seq[T]]\nSeq[Future[T]]\n// 未来的章节，会提到这些类型\n{% endhighlight %}\n\n## `Scala`语言中如何定义Call By-Value\n\n使用`val`可以定义一个CBV的表达式，在定义的那一刻就完成Evaluation。\n\n## `Scala`语言中如何定义Call By-Name\n\n使用`def`可以定义一个CBN的表达式，只有在“不得不”的时候，才会Evaluate。\n\n## 函数参数中的CBV和CBN\n\n通常的，所有函数参数都是CBV的，可以按照如下方式，定义一个CBN：\n\n{% highlight Scala %}\ndef f(x: Int, y: => Int) =\n  if (x > 0) x else y\n{% endhighlight %}\n\n\n可以改写为：\n\n{% highlight Scala %}\ndef f(x: Int, y: () => Int) =\n  if (x > 0) x else y()\n{% endhighlight %}\n\n# 综合练习\n\n## 根据函数定义，写出它们对应的函数类型\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x + 1\n// 对应的函数类型为：Int => Int\n{% endhighlight %}\n\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: Int, z: Int): Int = x + y - z\ndef f(x: Int, y: Int, z: Int) = x * (y / z)\ndef f(x: Int, y: Int, z: Int) = (x * 1.0) * (y + z)\n\ndef f(x: Int): Int => Int = {\n  def g(y: Int) = x + y\n  g\n}\ndef f(x: Int) = y => x + y\n\ndef f(x: Int, y: () => Int) = x + y()\ndef f(x: Int, y: (Int, Int) => Int) = y(x, x+1)\n\ndef f(x: Int) = (y: Int) => x + y\n\ndef f(x: Int, y: () => Int) = (z: Int) => x + y() + z\ndef f(x: Int) = (y: Int, z: Int) => x + y + z\n\ndef f(x: Int, y: () => Int) = x + (() => y())()\n{% endhighlight %}\n\n## 判断下列的函数定义，是否合法\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x + 1\n// 该函数定义合法，因为当x是整数的时候，(x + 1) 也是一个整数；\n// 类型推断符合函数返回类型\n\ndef f(x: Int): String = x + 1\n// 该函数定义不合法，因为(x + 1)是一个整数，但是函数需要一个String作返回值；\n// 类型推断不符合函数的返回类型\n{% endhighlight %}\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int): Int = x\ndef f(x: Int): Double = x\ndef f(x: Int): Double = x + 0.0\n\ndef f(x: Int, y: Double, z: String): Int = x + y - z.length\ndef f(x: Int, y: Double, z: String): Int = z\n\ndef f(x: Int, y: () => Int): Int = x + y()\ndef f(x: Int, y: () => Int): Int = y\n\ndef f(x: Int, y: Int => Int): Int = y(x)\ndef f(x: Int, y: Int => Int): Int = (z: Int) => y(x) + z\n{% endhighlight %}\n\n## 判断下列的函数调用，是否合法\n\n举例：\n\n{% highlight Scala %}\ndef f(x: Double): Double = x + 1.0\nf()         // 调用不合法，因为参数列表的数量不匹配\nf(1.0)      // 调用合法，参数列表的数量、类型都匹配\nf(1)        // 调用合法，参数列表的数量相同，Int类型可以隐式转换为Double类型\n{% endhighlight %}\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: Double, z: String): Int = x + y - z.length\nf(1, 2, 3)\nf(1, 2, \"3\")\nf(1.0, 2.0, \"3.0\")\n\ndef f(x: Int, y: () => Int) = x + y()\ndef g: Int = 2\ndef h() = 2\nf(1, 2)\nf(1, () => 2)\nf(1, (x: Int) => 2)\nf(1, g)\nf(1, g())\nf(1, h)\nf(1, h())\n\ndef f(x: Int, y: Int => Int) = y(x)\nf(1, 2)\nf(1, x => x)\nf(1, (x: Int) => x)\nf(1, (x: Int, y: Int) => x)\n{% endhighlight %}\n\n## 根据函数类型，定义一个满足该类型的函数\n\n尽量使用匿名表达式定义如下函数。\n\n举例：\n\n{% highlight Scala %}\n// 对于函数类型：Int => Double，可定义\ndef f(x: Int) = x * 1.0\n// 对应的匿名表达式为\n(x: Int) => x * 1.0\n{% endhighlight %}\n\n\n题目：\n\n{% highlight Scala %}\n() => Int\nInt => Int\n\n(Int, Int) => Int\n\nInt => Int => Int\nInt => (Int => Int)\n\n(Int, Int => Int) => Int\n(Int, Int => Int) => Int => Int\n\nInt => Int => Int => Int\n\nInt => (Int => Int) => Int\n{% endhighlight %}\n\n## 将包含CBN参数的函数，改写成类似的普通函数\n\n举例参考正文中的例子。\n\n题目：\n\n{% highlight Scala %}\ndef f(x: Int, y: => Int) = x + y\n\ndef f(x: Int, y: => Int) =\n  if (x > 0) x else y\n\ndef f(x: Int, y: => Int) =\n  (z: Int) => x + y + z\n{% endhighlight %}\n\n## 设计一个布尔类型\n\n（略）\n\n注意CBV和CBN的使用。\n\n# 练习题参考答案\n\n## 举出一个“反之未必”的例子\n\n定义两个函数：\n\n函数一，永久循环累加：\n\n$$f(x) = x + (x+1) + (x+2) + \\ldots + \\infty = \\sum_{t=x}^{\\infty} t$$\n\n\n函数二，有条件地返回第一个参数：\n\n$$g(x, y) =  (x > 0) \\; ? \\;x : y $$\n\n则：\n\n$$\\Lambda_{\\text{CBN}}\\left( g[1, f(0)]\\right) = 1$$，但是$$\\overline{\\Lambda_{\\text{CBV}}(g[1, f(0)])}$$\n\n\n## 基于一阶谓词逻辑的命题定义的证明过程\n\n题目：\n\n> 基于一阶谓词逻辑的命题定义，证明：$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$\n\n证明：\n\n根据一阶谓词逻辑下，对“命题”的递归定义，使用归纳法证明：\n\n首先考虑命题$$A$$、$$B$$是一个简单句，此时$$\\Lambda_{\\text{CBV}}(A)$$等同于$$\\Lambda_{\\text{CBN}}(A)$$。\n\n于是不难证明，当$$A$$是一个简单句时：\n\n* (1)，$$\\Lambda_{\\text{CBV}}(A) \\rightarrow \\Lambda_{\\text{CBN}}(A)$$；\n* (2)，$$\\Lambda_{\\text{CBV}}(\\neg A) \\rightarrow \\Lambda_{\\text{CBN}}(\\neg A)$$，该结论使用反证法可得；\n* (3)，$$\\Lambda_{\\text{CBV}}[(A)] \\rightarrow \\Lambda_{\\text{CBN}}[(A)]$$，该结论使用反证法可得；\n\n下面证明，当命题$$A$$、$$B$$是一个简单句，对于任意的二元操作符$$\\otimes$$，同样满足：\n\n$$\\Lambda_{\\text{CBV}}(A \\otimes B) \\rightarrow \\Lambda_{\\text{CBN}}(A \\otimes B) $$\n\n先看蕴含式的左边，我们可得：\n\n$$\\Lambda_{\\text{CBV}}(A \\otimes B) \\rightarrow \\Lambda_{\\text{CBV}}(A) \\wedge \\Lambda_{\\text{CBV}}(B) $$\n\n因为（反证法），在CBV的情况下，若$$A$$和$$B$$中存在任意一个无法Evaluation的情况，二元操作符$$\\otimes$$都不能执行，最终\n导致$$\\overline{\\Lambda_{\\text{CBV}}(A \\otimes B)}$$，和题目本意矛盾。\n\n于是，我们证明了，当命题$$A$$、$$B$$是一个简单句，对于任意的二元操作符$$\\otimes$$，如果\n$$\\Lambda_{\\text{CBV}}(A \\otimes B)$$，则在有限的时间内：\n\n* (4)，$$\\exists a \\rightarrow \\Lambda_{\\text{CBV}}(A) = a$$；\n* (5)，$$\\exists b \\rightarrow \\Lambda_{\\text{CBV}}(B) = b$$；\n\n进而，\n\n$$\\Lambda_{\\text{CBN}}(A \\otimes B)  \\;{\\tiny\\begin{matrix}\\\\ \\normalsize = \\\\ ^{\\scriptsize (4)}\\end{matrix}}\\; \\Lambda_{\\text{CBN}}(a \\otimes B)  \\;{\\tiny\\begin{matrix}\\\\ \\normalsize = \\\\ ^{\\scriptsize (5)}\\end{matrix}}\\; \\Lambda_{\\text{CBN}}(a \\otimes b) = a\\otimes b$$\n\n之后，使用递归，对复杂命题同理证明。\n\n\n（略）\n\n# 参考文献\n\n[^c9_lang_future]: [TechDays 2010 Keynote by Anders Hejlsberg: Trends and future directions in programming languages](https://channel9.msdn.com/blogs/adebruyn/techdays-2010-developer-keynote-by-anders-hejlsberg)\n[^blog_bolero]: [Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板](https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n[^github_bolero]: [Bolero, 源代码](https://github.com/scozv/bolero)\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^sicp]: [ Structure and Interpretation of Computer Programs](https://mitpress.mit.edu/sicp/)\n[^scala_spec_exp]: [Scala Specification, Chapter 6 Expressions](http://www.scala-lang.org/files/archive/spec/2.11/06-expressions.html)\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^wiki_formula]: [原子公式](https://zh.wikipedia.org/wiki/%E5%8E%9F%E5%AD%90%E5%85%AC%E5%BC%8F)\n[^wiki_connective]: [逻辑运算符](https://zh.wikipedia.org/wiki/%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E7%AC%A6)\n[^fn_if-then]: 可以通过枚举真值表的方式证明，“蕴含”（$$A \\rightarrow B$$）等价于复合命题$$\\neg A \\vee B$$。更一般地，可以证明，一阶谓词逻辑的所有命题，最多只需要“否定”、“或”两个连接词表示。\n","slug":"zh-2016-08-21-scala-quick-tour-part-i","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryuq0060yxcbej2s0vx5"},{"layout":"post","title":"Scala函数编程（二）","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文是《Scala函数编程》系列的第二部分，[第一部分](https://scozv.github.io/blog/zh/guide/2016/08/21/scala-quick-tour-part-i)\n> 介绍了函数编程（FP）的基本概念、函数分别可以作为参数和返回值。\n>\n> 在第二个部分里面，我们将介绍一个非常重要的设计模式——尾递归（Tail Recursion）。之后\n> 会通过`Scala`里面的`List[T]`来阐述尾递归在线性集合的应用，包括如下内容：\n>\n> * 迭代和递归的相互转化；\n> * 递归和尾递归的区别；\n> * `Scala`中的泛型简介；\n> * 使用递归的方式构造一个`List[Int]`；\n> * 模式匹配简介（未完成）；\n> * `head`、`tail`等方法的尾递归实现（未完成）；\n> * `take`、`reverse`等方法的尾递归实现（未完成）；\n> * `append`、`prepend`等方法的尾递归实现（未完成）；\n> * 遍历映射（`map`）和`reduce`的尾递归实现（未完成）;\n> * `Scala`中的`List[T]`源代码分析（未完成）。\n>\n> 为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n>\n> 我依然建议去听原版公开课[^open_progfun1]，并完成所有的Assignment。另外，还要多写代码。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# 迭代和递归\n\n考虑正整数的阶乘（Factorial）函数：\n\n$$f(x) = x! = \\Pi_{i=1}^{x} i = x \\cdot (x-1) \\cdot (x-2) \\cdot \\ldots \\cdot 2 \\cdot 1 $$\n\n其中我们约定$$x$$为正整数：\n\n$$x \\in \\mathbb{Z}^{+}$$\n\n## 阶乘函数的迭代计算\n\n本文中的迭代计算，使用`JavaScript`语言，因为，你可以直接在浏览器中（F12进入调试面板）运行这段脚本：\n\n{% highlight JavaScript %}\nfunction f(x) {\n  var acc = 1;\n  for (var i = x; i > 0; i--) {\n    acc = acc * i;\n  }  // end for-loop\n\n  return acc;\n}\n{% endhighlight %}\n\n以上代码，等价于：\n\n{% highlight JavaScript %}\nfunction f(x) {\n  var acc = 1, i = x;\n  while (i > 0) {\n    acc = acc * i;\n    i--;\n  }\n\n  return acc;\n}\n{% endhighlight %}\n\n## 迭代计算的一般定义\n\n从上面的阶乘迭代，可以总结出迭代的几个组成要素：\n\n* 迭代的退出条件，比如，当`i > 0`不满足的时候，迭代退出；\n* 迭代的累积器（Accumulator），比如上面的`acc`变量，未来，我们将使用`acc`表示累积器。需要注意的是，\n  这里“累积”的“积”不是“乘积”的意思（只是碰巧，我们在此使用乘法而已）。Accumulator这个单词，很好地\n  解释了“累积”的含义；\n* `acc`的初始值，此处我们是乘法，所以初始值设置为`1`，如果是加法，我们的初始值可以使用`0`；\n* 每一次迭代，`acc`将会和一个元素发生运算，运算结果会重复赋值给`acc`；\n* 迭代进入下一个元素，我们将这些元素成为`item`；\n* 注意到，迭代版本中，`acc`会被重复赋值，并在循环退出之后，按值返回（`return`）。\n\n根据这几个要素，我们给出迭代的一般定义：\n\n{% highlight JavaScript %}\nvar acc = init()\n\nwhile (NOT shouldQuit(item)) {\n  acc = calc(acc, item)\n  item = nextItem()\n}\n\nreturn acc\n{% endhighlight %}\n\n## `calc(acc, item)`还是`calc(item, acc)`？\n\n使用二叉数，前序和后序遍历来表示两种不同的计算方式。\n\n可以看出`calc(acc, item)`和`calc(item, acc)`的区别。\n我们也会在`List[T]`的部分，更多地提到这两者的区别。\n\n{% highlight raw %}\n          calc(acc, item)                      calc(item, acc)\n            /       \\                             /        \\\n           /   ...   \\                           /   ...    \\\n          /           item_n               item_1            \\\n        calc()                                             calc()\n        /     \\                                            /   \\\n      calc()   item_3                              item_(n-2)  calc()\n      /     \\                                                /   \\\n   calc()  item_2                                   item_(n-1)  calc()\n   /     \\                                                     /   \\\ninit()  item_1                                            item_n   init()\n\n{% endhighlight %}\n\n\n练习：\n\n> 通过上面的两张图示，阐述`calc(acc, item)`和`calc(item, acc)`的区别。\n\n## 从迭代，到递归\n\n练习：\n\n> 请（用伪代码）写出阶乘计算的递归实现。\n\n写完之后，需要检验如下的Test Case：\n\n{% highlight JavaScript %}\nf(-1) = 1\nf(0) = 1\nf(1) = 1\nf(2) = 2\nf(5) = 120\n{% endhighlight %}\n\n下面给出`Scala`的递归实现：\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n{% endhighlight %}\n\n\n迭代那一小节里面，我们给出了迭代的一般定义，这里\n我们将迭代的一般定义，转化为递归的一般定义：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType =\n  if (NOT shouldQuit(x)) calc(f(nextItem()), x)\n  else init()\n{% endhighlight %}\n\n练习（非常重要）：\n\n> 根据上面的递归一般定义，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     shouldQuit\n     calc\n     nextItem\n     init\n\n## 递归的Call Stack\n\n练习：\n\n> 根据我们上面定义的阶乘递归函数，Evaluate $$5!$$。\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n{% endhighlight %}\n\n{% highlight JavaScript %}\n  f(5)\n= 5 * f(4)                   \n= 5 * 4 * f(3)\n= 5 * 4 * 3 * f(2)\n= 5 * 4 * 3 * 2 * f(1)\n= 5 * 4 * 3 * 2 * (1)\n= 5 * 4 * 3 * (2)\n= 5 * 4 * (6)\n= 5 * (24)\n= 120\n{% endhighlight %}\n\n我们对上面的Call Stack作如下说明：\n\n* 整个调用堆栈最大耗用长度为5；\n* 至少需要5个`push`操作，才能实现状态`5 * 4 * 3 * 2 * f(1)`；\n* 至少需要另外5个`pop`、另外5个`push`操作，才能缩短堆栈的长度，最终完成Evaluation。\n\n所以使用递归面临的最大问题就是，Call Stack过长。\n\n# 尾递归（Tail Recursion）\n\n下面我们来看尾递归（Tail Recursion），这是一个非常重要的概念。\n\n## 尾递归初览\n\n我们首先给出尾递归的阶乘实现：\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n\n// Tail Recursion\ndef f(x: Int): Int = {\n  def g(acc: Int, item: Int) =\n    if (item > 0) g(item * acc, item-1) else acc\n\n  g(1, x)\n}\n{% endhighlight %}\n\n我们对上述尾递归的实现，备注如下：\n\n* 当递归终止条件满足时，我们退出递归，返回`acc`，此时，计算已经完成；\n* 由于退出递归的时候，Evaluation已经完成，所以理论上，我们连Call Stack都不需要维护；\n* 实际上，`Scala`和其它大多数FP一样，会对尾递归作出优化。\n\n## 尾递归的一般形式\n\n回顾一下递归的一般形式：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType =\n  if (NOT shouldQuit(x)) calc(f(nextItem()), x)\n  else init()\n{% endhighlight %}\n\n我们给出尾递归的一般形式：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType = {\n  def g(acc: AccumulatorType, item: ItemType) =\n    if (NOT shouldQuit(item)) g(calc(acc, item), nextItem())\n    else acc\n\n  g(init(), x)\n}\n{% endhighlight %}\n\n练习（非常重要）：\n\n> 根据上面的尾递归一般形式，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     g\n     shouldQuit\n     calc\n     nextItem\n     init\n\n## 递归和尾递归的区别\n\n请先完成递归和尾递归一般定义的类型推断的练习题。\n\n在尾递归中，我们通常需要引入一个临时局部函数`g`，实际上，函数`g`才是递归函数。\n这样的思想，也非常符合函数编程的思想——函数是Pure，不带状态（Stateless）的。\n因为，就递归`g`而言，初始状态`init()`不应该带入函数的实现（Implementation）中。\n\n## 尾递归的练习题\n\n习题1：\n\n> 在`Scala`的REPL中编写尾递归一般形式的严格定义，保证编译通过。\n\n习题2：\n\n## 尾递归对数组求和\n\n到此，尾递归的介绍马上就要告一段落了。我们马上要开始\n讲解《Scala函数编程》（二）的另一个重要内容——`List[T]`。\n\n在正式进入`List[T]`的讲解前，我们先来做一个练习：\n\n> 使用尾递归，实现数组的求和。\n\n我给出一个伪代码实现：\n\n{% highlight JavaScript %}\nfunction f(xs) {\n  function g(acc, xs) {\n    if (xs.length < 1) return acc\n    else return g(acc + xs[0], subArray(xs, 1))\n  }\n\n  function subArray(xs, startIndex) {\n    var res = []\n    for (var i = startIndex; i < xs.length; i++) {\n      res.push(xs[i])\n    }\n    return res\n  }\n\n  return g(0, acc)\n}\n{% endhighlight %}\n\n需要注意的是，上述`subArray`的时间复杂度为$$O_{i\\in [1,n]}(i)$$，\n这将导致整个递归的时间复杂度为$$O(\\sum_{i=0}^{n} i) = O(\\frac{n(n+1)}{2})=O(n^2)$$。\n\n实际情况是，我们期望的数组求和的时间复杂度必须为$$O(n)$$。\n\n# `List[T]`\n\n## 泛型简介（Type Parameterization）\n\n泛型在某些语言中（比如`C#`）称为“Generic Type”，\n在`Scala`的参考书《Programming in Scala》[^scala_progfun_2nd]（Chapter 19 Type Parameterization）中，使用的是“Type Parameterization”。\n\n前者说，泛型是一种“通用”的类型，后者表示泛型是“一种参数化的类型”。\n\n本文使用中文“泛型”，如果涉及到英文，我将采用 “Type Parameterization”。\n\n和大多数语言的泛型定义一样：\n\n* 需要在类或者方法上，声明一个或多个类型参数（Type Parameter）名称，比如\n\n      class Traversable[T] {}\n      def field[T](query: String, fieldName: String): T = ???\n* 和普通的参数一样，类型参数的名称可以任取，比如：\n\n      class Dictionary[KeyType,ValueType] {}\n      def insert[IndexType, ItemType]: List[ItemType] = ???\n\n* 但是，从`Scala`的接口文档[^scala_api_doc]和源代码[^github_scala]可以看出，\n  因为是“泛”型，我们的参数类型名称不应该被限定，所以，\n  可以使用如下的风格定义参数类型：\n\n      class List[A] {}\n      class Map[A, B]{}\n\n## `List[T]`的递归定义\n\n我们按照如下的递归方式，定义一个`List[T]`：\n\n* `List[T]`可以为空，我们称其为`Nil`；\n* 任意一个元素`x: T`，可以和任意一个`xs: List[T]`，组成一个新的`List[T]`，我们称\n  这个组合动作（function）为`cons`——取\"construction\"的前四个字母。\n\n## `List[T]`的递归实现\n\n这一小节，我们使用递归定义，实现`List[T]`。\n如果有语法上，不明白的地方，请自行搜索相关资料。\n\n有关OOP的内容，我会在之后的部分中重新讲。\n\n建议阅读`List[T]`的`Scala`的源代码 [^github_scala_list_t]。\n\n为了不和`Scala`中的`List[T]`和`Nil`冲突，以下的实现\n有意更换了名称。\n\n### 实现一个泛型链表\n\n### 使用`#:`右关联操作符\n\n### 模式匹配\n\n{% highlight Scala %}\ntrait GenericList[+T] {\n  val isEmpty: Boolean\n  def size: Int\n\n  def head: T\n  def tail: GenericList[T]\n}\n\ncase object EmptyList extends GenericList[Nothing] {\n  val isEmpty = true\n  def size = 0\n\n  def head = throw new NoSuchElementException(\"head of empty list\")\n  def tail = throw new UnsupportedOperationException(\"tail of empty list\")\n}\n\ncase class NonEmptyList[T](head: T, tail: GenericList[T]) extends GenericList[T] {\n  def this(x: T) = this(x, EmptyList)\n\n  val isEmpty = false\n  def size: Int = {\n    def g(acc: Int, xs: GenericList[T]): Int = xs match {\n      case EmptyList => acc\n      case NonEmptyList(_, ys) => g(acc + 1, ys)\n    }\n\n    g(0, this)\n  }\n}\n\ncase object GenericList {\n  def apply(): GenericList[Nothing] = EmptyList\n  def apply[T](x: T): GenericList[T] = NonEmptyList(x, EmptyList)\n  def apply[T](x1: T, x2: T): GenericList[T] = NonEmptyList(x1, GenericList(x2))\n  def apply[T](x1: T, x2: T, x3: T): GenericList[T] = NonEmptyList(x1, GenericList(x2, x3))\n}\n\nval xs0 = GenericList()\nxs0.size\nxs0.isEmpty\nGenericList(\"Apple\")\nGenericList(1.2, 3.5)\nval xs1 = GenericList(1, 2, 3)\nxs1.size\nxs1.isEmpty\n{% endhighlight %}\n\n以上的实现，使用了“单向链式列表”这一数据结构，\n我认为这些基础的数据结构，是程序员的基本修养，请\n自行查阅相关资料。\n\n\n思考：\n\n> 0. 为什么`head`和`tail`的声明是`def`而不是`val`？\n> 0. 为什么`Nil`的继承来自`ListLike[Nothing]`，而非`ListLike[T]`?\n> 0. 如果去掉`trait GenericList[+T]`中的`+`号，是否能够编译通过？\n> 0. 请问如下代码的输出结果为：\n>\n        val xs0 = GenericList()\n        xs0.size\n        xs0.isEmpty\n        GenericList(\"Apple\")\n        GenericList(1.2, 3.5)\n        val xs1 = GenericList(1, 2, 3)\n        xs1.size\n        xs1.isEmpty\n> 0. 请问如下代码的输出结果（请仔细思考）：\n>\n>\n        val xs2 = GenericList(1, 2, 3, 4)\n        xs2.size\n        xs2.isEmpty      \n\n## `Scala`中的`List[T]`\n\n## 模式匹配简介\n\n## 使用模式匹配和尾递归，实现`List[Int]`的求和\n\n## `map`和`foreach`\n\n## 其它`List[T]`方法的实现\n\n## `map`和`reduce`\n\n## `map`和`flatMap`\n\n# `List[T]`接口文档和源代码分析\n\n实际上`List[T]`的很多实现并没有使用递归，而是使用的迭代。\n因为迭代的效率和性能高。\n\n# 综合练习\n\n## 使用指定的一系列函数定义，完成函数的实现\n\n举例：\n\n{% highlight Scala %}\n// 已知\ndef f0(x: Int): Int = ???\ndef f1(x: Int, y: Int) = ???\n// 实现\ndef f(x: Int): Int = ???\n// 参考答案\ndef f(x: Int): Int = f1(x, f0(x))\n{% endhighlight %}\n\n# 练习题参考答案\n\n## 递归一般定义中的函数类型推断\n\n重申一下，我认为这道练习题非常重要，建议先独立完成这道练习题。\n\n给出如下的递归一般定义：\n\n{% highlight Scala %}\ndef f[ItemType, AccumulatorType](x: ItemType): AccumulatorType =\n  if (! shouldQuit(x)) calc(f(nextItem()), x) else init()\n{% endhighlight %}\n\n练习：\n\n> 根据上面的递归一般定义，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     shouldQuit\n     calc\n     nextItem\n     init\n\n参考答案：\n\n{% highlight Scala %}\ndef shouldQuit[ItemType](x: ItemType): Boolean = ???\ndef calc[ItemType, AccumulatorType](acc: AccumulatorType, x: ItemType): AccumulatorType = ???\ndef nextItem[ItemType](): ItemType = ???\ndef init[AccumulatorType](): AccumulatorType = ???\n{% endhighlight %}\n\n上面的几个函数定义，必须在`Scala`的REPL中编译通过。\n这里使用了泛型定义，如果不理解，请尝试阅读\n《Programming in Scala》[^scala_progfun_2nd]（Chapter 19 Type Parameterization）。\n\n\n## 尾递归的一般形式（严格定义）\n\n> 使用匿名函数，代替尾递归一般定义中的临时函数`g`。\n\n{% highlight Scala %}\ndef f[ItemType, AccumulatorType](x: ItemType): AccumulatorType = {\n  def g(acc: AccumulatorType, item: ItemType): AccumulatorType =\n    if (! shouldQuit(item)) g(calc(acc, item), nextItem())\n    else acc\n\n  g(init(), x)\n}\n{% endhighlight %}\n\n\n# 参考文献\n\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^scala_api_doc]: [Scala API Documentation](http://www.scala-lang.org/api/current/index.html)\n[^github_scala]: [Scala on Github](https://github.com/scala/scala)\n[^github_scala_list_t]: [`List.scala` Source Code on Github](https://github.com/scala/scala/blob/v2.11.8/src/library/scala/collection/immutable/List.scala)\n","source":"_posts/zh/2016-08-22-scala-quick-tour-part-ii.md","raw":"---\nlayout: post\ntitle: \"Scala函数编程（二）\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\"]\nlang: zh\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文是《Scala函数编程》系列的第二部分，[第一部分](https://scozv.github.io/blog/zh/guide/2016/08/21/scala-quick-tour-part-i)\n> 介绍了函数编程（FP）的基本概念、函数分别可以作为参数和返回值。\n>\n> 在第二个部分里面，我们将介绍一个非常重要的设计模式——尾递归（Tail Recursion）。之后\n> 会通过`Scala`里面的`List[T]`来阐述尾递归在线性集合的应用，包括如下内容：\n>\n> * 迭代和递归的相互转化；\n> * 递归和尾递归的区别；\n> * `Scala`中的泛型简介；\n> * 使用递归的方式构造一个`List[Int]`；\n> * 模式匹配简介（未完成）；\n> * `head`、`tail`等方法的尾递归实现（未完成）；\n> * `take`、`reverse`等方法的尾递归实现（未完成）；\n> * `append`、`prepend`等方法的尾递归实现（未完成）；\n> * 遍历映射（`map`）和`reduce`的尾递归实现（未完成）;\n> * `Scala`中的`List[T]`源代码分析（未完成）。\n>\n> 为了便于理解，部分名词、专有术语，我直接使用英文，不作任何翻译。\n>\n> 我依然建议去听原版公开课[^open_progfun1]，并完成所有的Assignment。另外，还要多写代码。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n\n# 迭代和递归\n\n考虑正整数的阶乘（Factorial）函数：\n\n$$f(x) = x! = \\Pi_{i=1}^{x} i = x \\cdot (x-1) \\cdot (x-2) \\cdot \\ldots \\cdot 2 \\cdot 1 $$\n\n其中我们约定$$x$$为正整数：\n\n$$x \\in \\mathbb{Z}^{+}$$\n\n## 阶乘函数的迭代计算\n\n本文中的迭代计算，使用`JavaScript`语言，因为，你可以直接在浏览器中（F12进入调试面板）运行这段脚本：\n\n{% highlight JavaScript %}\nfunction f(x) {\n  var acc = 1;\n  for (var i = x; i > 0; i--) {\n    acc = acc * i;\n  }  // end for-loop\n\n  return acc;\n}\n{% endhighlight %}\n\n以上代码，等价于：\n\n{% highlight JavaScript %}\nfunction f(x) {\n  var acc = 1, i = x;\n  while (i > 0) {\n    acc = acc * i;\n    i--;\n  }\n\n  return acc;\n}\n{% endhighlight %}\n\n## 迭代计算的一般定义\n\n从上面的阶乘迭代，可以总结出迭代的几个组成要素：\n\n* 迭代的退出条件，比如，当`i > 0`不满足的时候，迭代退出；\n* 迭代的累积器（Accumulator），比如上面的`acc`变量，未来，我们将使用`acc`表示累积器。需要注意的是，\n  这里“累积”的“积”不是“乘积”的意思（只是碰巧，我们在此使用乘法而已）。Accumulator这个单词，很好地\n  解释了“累积”的含义；\n* `acc`的初始值，此处我们是乘法，所以初始值设置为`1`，如果是加法，我们的初始值可以使用`0`；\n* 每一次迭代，`acc`将会和一个元素发生运算，运算结果会重复赋值给`acc`；\n* 迭代进入下一个元素，我们将这些元素成为`item`；\n* 注意到，迭代版本中，`acc`会被重复赋值，并在循环退出之后，按值返回（`return`）。\n\n根据这几个要素，我们给出迭代的一般定义：\n\n{% highlight JavaScript %}\nvar acc = init()\n\nwhile (NOT shouldQuit(item)) {\n  acc = calc(acc, item)\n  item = nextItem()\n}\n\nreturn acc\n{% endhighlight %}\n\n## `calc(acc, item)`还是`calc(item, acc)`？\n\n使用二叉数，前序和后序遍历来表示两种不同的计算方式。\n\n可以看出`calc(acc, item)`和`calc(item, acc)`的区别。\n我们也会在`List[T]`的部分，更多地提到这两者的区别。\n\n{% highlight raw %}\n          calc(acc, item)                      calc(item, acc)\n            /       \\                             /        \\\n           /   ...   \\                           /   ...    \\\n          /           item_n               item_1            \\\n        calc()                                             calc()\n        /     \\                                            /   \\\n      calc()   item_3                              item_(n-2)  calc()\n      /     \\                                                /   \\\n   calc()  item_2                                   item_(n-1)  calc()\n   /     \\                                                     /   \\\ninit()  item_1                                            item_n   init()\n\n{% endhighlight %}\n\n\n练习：\n\n> 通过上面的两张图示，阐述`calc(acc, item)`和`calc(item, acc)`的区别。\n\n## 从迭代，到递归\n\n练习：\n\n> 请（用伪代码）写出阶乘计算的递归实现。\n\n写完之后，需要检验如下的Test Case：\n\n{% highlight JavaScript %}\nf(-1) = 1\nf(0) = 1\nf(1) = 1\nf(2) = 2\nf(5) = 120\n{% endhighlight %}\n\n下面给出`Scala`的递归实现：\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n{% endhighlight %}\n\n\n迭代那一小节里面，我们给出了迭代的一般定义，这里\n我们将迭代的一般定义，转化为递归的一般定义：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType =\n  if (NOT shouldQuit(x)) calc(f(nextItem()), x)\n  else init()\n{% endhighlight %}\n\n练习（非常重要）：\n\n> 根据上面的递归一般定义，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     shouldQuit\n     calc\n     nextItem\n     init\n\n## 递归的Call Stack\n\n练习：\n\n> 根据我们上面定义的阶乘递归函数，Evaluate $$5!$$。\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n{% endhighlight %}\n\n{% highlight JavaScript %}\n  f(5)\n= 5 * f(4)                   \n= 5 * 4 * f(3)\n= 5 * 4 * 3 * f(2)\n= 5 * 4 * 3 * 2 * f(1)\n= 5 * 4 * 3 * 2 * (1)\n= 5 * 4 * 3 * (2)\n= 5 * 4 * (6)\n= 5 * (24)\n= 120\n{% endhighlight %}\n\n我们对上面的Call Stack作如下说明：\n\n* 整个调用堆栈最大耗用长度为5；\n* 至少需要5个`push`操作，才能实现状态`5 * 4 * 3 * 2 * f(1)`；\n* 至少需要另外5个`pop`、另外5个`push`操作，才能缩短堆栈的长度，最终完成Evaluation。\n\n所以使用递归面临的最大问题就是，Call Stack过长。\n\n# 尾递归（Tail Recursion）\n\n下面我们来看尾递归（Tail Recursion），这是一个非常重要的概念。\n\n## 尾递归初览\n\n我们首先给出尾递归的阶乘实现：\n\n{% highlight Scala %}\ndef f(x: Int): Int =\n  if (x > 0) x * f(x-1) else 1\n\n// Tail Recursion\ndef f(x: Int): Int = {\n  def g(acc: Int, item: Int) =\n    if (item > 0) g(item * acc, item-1) else acc\n\n  g(1, x)\n}\n{% endhighlight %}\n\n我们对上述尾递归的实现，备注如下：\n\n* 当递归终止条件满足时，我们退出递归，返回`acc`，此时，计算已经完成；\n* 由于退出递归的时候，Evaluation已经完成，所以理论上，我们连Call Stack都不需要维护；\n* 实际上，`Scala`和其它大多数FP一样，会对尾递归作出优化。\n\n## 尾递归的一般形式\n\n回顾一下递归的一般形式：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType =\n  if (NOT shouldQuit(x)) calc(f(nextItem()), x)\n  else init()\n{% endhighlight %}\n\n我们给出尾递归的一般形式：\n\n{% highlight Scala %}\ndef f(x: ItemType): AccumulatorType = {\n  def g(acc: AccumulatorType, item: ItemType) =\n    if (NOT shouldQuit(item)) g(calc(acc, item), nextItem())\n    else acc\n\n  g(init(), x)\n}\n{% endhighlight %}\n\n练习（非常重要）：\n\n> 根据上面的尾递归一般形式，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     g\n     shouldQuit\n     calc\n     nextItem\n     init\n\n## 递归和尾递归的区别\n\n请先完成递归和尾递归一般定义的类型推断的练习题。\n\n在尾递归中，我们通常需要引入一个临时局部函数`g`，实际上，函数`g`才是递归函数。\n这样的思想，也非常符合函数编程的思想——函数是Pure，不带状态（Stateless）的。\n因为，就递归`g`而言，初始状态`init()`不应该带入函数的实现（Implementation）中。\n\n## 尾递归的练习题\n\n习题1：\n\n> 在`Scala`的REPL中编写尾递归一般形式的严格定义，保证编译通过。\n\n习题2：\n\n## 尾递归对数组求和\n\n到此，尾递归的介绍马上就要告一段落了。我们马上要开始\n讲解《Scala函数编程》（二）的另一个重要内容——`List[T]`。\n\n在正式进入`List[T]`的讲解前，我们先来做一个练习：\n\n> 使用尾递归，实现数组的求和。\n\n我给出一个伪代码实现：\n\n{% highlight JavaScript %}\nfunction f(xs) {\n  function g(acc, xs) {\n    if (xs.length < 1) return acc\n    else return g(acc + xs[0], subArray(xs, 1))\n  }\n\n  function subArray(xs, startIndex) {\n    var res = []\n    for (var i = startIndex; i < xs.length; i++) {\n      res.push(xs[i])\n    }\n    return res\n  }\n\n  return g(0, acc)\n}\n{% endhighlight %}\n\n需要注意的是，上述`subArray`的时间复杂度为$$O_{i\\in [1,n]}(i)$$，\n这将导致整个递归的时间复杂度为$$O(\\sum_{i=0}^{n} i) = O(\\frac{n(n+1)}{2})=O(n^2)$$。\n\n实际情况是，我们期望的数组求和的时间复杂度必须为$$O(n)$$。\n\n# `List[T]`\n\n## 泛型简介（Type Parameterization）\n\n泛型在某些语言中（比如`C#`）称为“Generic Type”，\n在`Scala`的参考书《Programming in Scala》[^scala_progfun_2nd]（Chapter 19 Type Parameterization）中，使用的是“Type Parameterization”。\n\n前者说，泛型是一种“通用”的类型，后者表示泛型是“一种参数化的类型”。\n\n本文使用中文“泛型”，如果涉及到英文，我将采用 “Type Parameterization”。\n\n和大多数语言的泛型定义一样：\n\n* 需要在类或者方法上，声明一个或多个类型参数（Type Parameter）名称，比如\n\n      class Traversable[T] {}\n      def field[T](query: String, fieldName: String): T = ???\n* 和普通的参数一样，类型参数的名称可以任取，比如：\n\n      class Dictionary[KeyType,ValueType] {}\n      def insert[IndexType, ItemType]: List[ItemType] = ???\n\n* 但是，从`Scala`的接口文档[^scala_api_doc]和源代码[^github_scala]可以看出，\n  因为是“泛”型，我们的参数类型名称不应该被限定，所以，\n  可以使用如下的风格定义参数类型：\n\n      class List[A] {}\n      class Map[A, B]{}\n\n## `List[T]`的递归定义\n\n我们按照如下的递归方式，定义一个`List[T]`：\n\n* `List[T]`可以为空，我们称其为`Nil`；\n* 任意一个元素`x: T`，可以和任意一个`xs: List[T]`，组成一个新的`List[T]`，我们称\n  这个组合动作（function）为`cons`——取\"construction\"的前四个字母。\n\n## `List[T]`的递归实现\n\n这一小节，我们使用递归定义，实现`List[T]`。\n如果有语法上，不明白的地方，请自行搜索相关资料。\n\n有关OOP的内容，我会在之后的部分中重新讲。\n\n建议阅读`List[T]`的`Scala`的源代码 [^github_scala_list_t]。\n\n为了不和`Scala`中的`List[T]`和`Nil`冲突，以下的实现\n有意更换了名称。\n\n### 实现一个泛型链表\n\n### 使用`#:`右关联操作符\n\n### 模式匹配\n\n{% highlight Scala %}\ntrait GenericList[+T] {\n  val isEmpty: Boolean\n  def size: Int\n\n  def head: T\n  def tail: GenericList[T]\n}\n\ncase object EmptyList extends GenericList[Nothing] {\n  val isEmpty = true\n  def size = 0\n\n  def head = throw new NoSuchElementException(\"head of empty list\")\n  def tail = throw new UnsupportedOperationException(\"tail of empty list\")\n}\n\ncase class NonEmptyList[T](head: T, tail: GenericList[T]) extends GenericList[T] {\n  def this(x: T) = this(x, EmptyList)\n\n  val isEmpty = false\n  def size: Int = {\n    def g(acc: Int, xs: GenericList[T]): Int = xs match {\n      case EmptyList => acc\n      case NonEmptyList(_, ys) => g(acc + 1, ys)\n    }\n\n    g(0, this)\n  }\n}\n\ncase object GenericList {\n  def apply(): GenericList[Nothing] = EmptyList\n  def apply[T](x: T): GenericList[T] = NonEmptyList(x, EmptyList)\n  def apply[T](x1: T, x2: T): GenericList[T] = NonEmptyList(x1, GenericList(x2))\n  def apply[T](x1: T, x2: T, x3: T): GenericList[T] = NonEmptyList(x1, GenericList(x2, x3))\n}\n\nval xs0 = GenericList()\nxs0.size\nxs0.isEmpty\nGenericList(\"Apple\")\nGenericList(1.2, 3.5)\nval xs1 = GenericList(1, 2, 3)\nxs1.size\nxs1.isEmpty\n{% endhighlight %}\n\n以上的实现，使用了“单向链式列表”这一数据结构，\n我认为这些基础的数据结构，是程序员的基本修养，请\n自行查阅相关资料。\n\n\n思考：\n\n> 0. 为什么`head`和`tail`的声明是`def`而不是`val`？\n> 0. 为什么`Nil`的继承来自`ListLike[Nothing]`，而非`ListLike[T]`?\n> 0. 如果去掉`trait GenericList[+T]`中的`+`号，是否能够编译通过？\n> 0. 请问如下代码的输出结果为：\n>\n        val xs0 = GenericList()\n        xs0.size\n        xs0.isEmpty\n        GenericList(\"Apple\")\n        GenericList(1.2, 3.5)\n        val xs1 = GenericList(1, 2, 3)\n        xs1.size\n        xs1.isEmpty\n> 0. 请问如下代码的输出结果（请仔细思考）：\n>\n>\n        val xs2 = GenericList(1, 2, 3, 4)\n        xs2.size\n        xs2.isEmpty      \n\n## `Scala`中的`List[T]`\n\n## 模式匹配简介\n\n## 使用模式匹配和尾递归，实现`List[Int]`的求和\n\n## `map`和`foreach`\n\n## 其它`List[T]`方法的实现\n\n## `map`和`reduce`\n\n## `map`和`flatMap`\n\n# `List[T]`接口文档和源代码分析\n\n实际上`List[T]`的很多实现并没有使用递归，而是使用的迭代。\n因为迭代的效率和性能高。\n\n# 综合练习\n\n## 使用指定的一系列函数定义，完成函数的实现\n\n举例：\n\n{% highlight Scala %}\n// 已知\ndef f0(x: Int): Int = ???\ndef f1(x: Int, y: Int) = ???\n// 实现\ndef f(x: Int): Int = ???\n// 参考答案\ndef f(x: Int): Int = f1(x, f0(x))\n{% endhighlight %}\n\n# 练习题参考答案\n\n## 递归一般定义中的函数类型推断\n\n重申一下，我认为这道练习题非常重要，建议先独立完成这道练习题。\n\n给出如下的递归一般定义：\n\n{% highlight Scala %}\ndef f[ItemType, AccumulatorType](x: ItemType): AccumulatorType =\n  if (! shouldQuit(x)) calc(f(nextItem()), x) else init()\n{% endhighlight %}\n\n练习：\n\n> 根据上面的递归一般定义，推断出下列函数的函数类型：\n>\n>      f: ItemType => AccumulatorType\n     shouldQuit\n     calc\n     nextItem\n     init\n\n参考答案：\n\n{% highlight Scala %}\ndef shouldQuit[ItemType](x: ItemType): Boolean = ???\ndef calc[ItemType, AccumulatorType](acc: AccumulatorType, x: ItemType): AccumulatorType = ???\ndef nextItem[ItemType](): ItemType = ???\ndef init[AccumulatorType](): AccumulatorType = ???\n{% endhighlight %}\n\n上面的几个函数定义，必须在`Scala`的REPL中编译通过。\n这里使用了泛型定义，如果不理解，请尝试阅读\n《Programming in Scala》[^scala_progfun_2nd]（Chapter 19 Type Parameterization）。\n\n\n## 尾递归的一般形式（严格定义）\n\n> 使用匿名函数，代替尾递归一般定义中的临时函数`g`。\n\n{% highlight Scala %}\ndef f[ItemType, AccumulatorType](x: ItemType): AccumulatorType = {\n  def g(acc: AccumulatorType, item: ItemType): AccumulatorType =\n    if (! shouldQuit(item)) g(calc(acc, item), nextItem())\n    else acc\n\n  g(init(), x)\n}\n{% endhighlight %}\n\n\n# 参考文献\n\n[^open_progfun1]: [Functional Programming Principles in Scala](https://www.coursera.org/learn/progfun1) from École Polytechnique Fédérale de Lausanne\n[^scala_progfun_2nd]: Martin Odersky, Lex Spoon, Bill Venners. Programming in Scala (Second Edition), Artima Press\n[^scala_api_doc]: [Scala API Documentation](http://www.scala-lang.org/api/current/index.html)\n[^github_scala]: [Scala on Github](https://github.com/scala/scala)\n[^github_scala_list_t]: [`List.scala` Source Code on Github](https://github.com/scala/scala/blob/v2.11.8/src/library/scala/collection/immutable/List.scala)\n","slug":"zh-2016-08-22-scala-quick-tour-part-ii","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryus0063yxcbsalczwa8"},{"layout":"post","title":"Bolero，累积更新说明（2016-09-04）","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文是对`Bolero`代码模板的累积更新的说明和解释。\n> 有关`Bolero`的整体介绍，请参考早期的文章[^blog_bolero]。\n>\n>\n> `Bolero`的源代码参见 [scozv/bolero](https://github.com/scozv/bolero)。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 约定和规范\n\n`Bolero`中的一些命名规则，并不一定是最佳的实践。\n\n* `trait`大部分使用`Can`做前缀，表示具备某一中能力；\n* `interop`文件夹最初用来存放一些用于第三方交互的类，目前这个含义已经有些淡化了；\n* `_id`表示主键，并使用`String`类型\n\n## 统一的HTTP Response\n\n所有的HTTP Response都返回如下统一的格式：\n\n{% highlight raw %}\n{\n  ok: Boolean,\n  data: T,\n  error: String\n}\n{% endhighlight %}\n\n## Payload和Respose的一致性\n\n为了便于接口的方便使用，受`map()`的启发，Payload的数据格式，\n和Response的返回格式，保持一致。\n\n允许字段不一样，比如`_id`在Payload为空，在Response中会被赋予新的编号。\n\n# 几处重构和增强\n\n## 升级的`CanConnectDB2`\n\n使用了一些`implicit`，完成更加通用的数据库读写操作。同时\n限定了一些泛型方法的返回值。\n\n具体请参见源代码。\n\n## 拆分`CanBeHierarchic`\n\n`Hierarchic`在未来，可以使用并查集维护关联关系。\n\n目前拆分成两个`trait`，分别对应静态属性和实例属性。\n\n参考：\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/ea24ab2c443a802145488b81c15e2fa7266492ae\n{% endhighlight %}\n\n## 全局的`Action Not Found`处理\n\n将`Action Not Found`的异常，统一交给`ResponseError`类处理。\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/e8991bc146adeabaf5d5f713f253a2a6fa1fe950\n{% endhighlight %}\n\n## 增强了`ResponseOk`的功能\n\n使用`implicit writes`，避免了参数传入`ResponseOk`\n之前，还要手动`Json.toJson`的问题。\n\n## 清理`unused import`\n\n清理了多处`unused import`。\n\n# 未能解决的问题\n\n## 服务启动之后的编译\n\n我发现，不管通过`activator run`还是IntelliJ IDEA启动`Play!`，\n命令行提示，服务已经在`9000`端口开启了。\n\n但是初次访问接口，依然会触发新的编译。\n\n## `routes`更新之后，需要`run`过，才能测试\n\n`routes`变更，或者代码变更很多，直接跑测试，可能没有触发最新的编译。\n建议，后台常驻启动一个`9000`端口的`run`。\n\n## 测试和调式数据库没有分离\n\n目前发现，`WithApplication`里面的模拟HTTP Request将使用`application.conf`\n的配置。导致，没法另外指定测试数据库。\n\n# 参考文献\n\n[^blog_bolero]: [Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板](https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n","source":"_posts/zh/2016-09-05-bolero-cumulative-update-on-sep-04-2016.md","raw":"---\nlayout: post\ntitle: \"Bolero，累积更新说明（2016-09-04）\"\ndescription: \"\"\ncategory: \"guide\"\ntags: [\"scala\",\"scaffold\",\"project\",\"architecture\",\"restful\"]\nlang: \"zh\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 本文是对`Bolero`代码模板的累积更新的说明和解释。\n> 有关`Bolero`的整体介绍，请参考早期的文章[^blog_bolero]。\n>\n>\n> `Bolero`的源代码参见 [scozv/bolero](https://github.com/scozv/bolero)。\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 约定和规范\n\n`Bolero`中的一些命名规则，并不一定是最佳的实践。\n\n* `trait`大部分使用`Can`做前缀，表示具备某一中能力；\n* `interop`文件夹最初用来存放一些用于第三方交互的类，目前这个含义已经有些淡化了；\n* `_id`表示主键，并使用`String`类型\n\n## 统一的HTTP Response\n\n所有的HTTP Response都返回如下统一的格式：\n\n{% highlight raw %}\n{\n  ok: Boolean,\n  data: T,\n  error: String\n}\n{% endhighlight %}\n\n## Payload和Respose的一致性\n\n为了便于接口的方便使用，受`map()`的启发，Payload的数据格式，\n和Response的返回格式，保持一致。\n\n允许字段不一样，比如`_id`在Payload为空，在Response中会被赋予新的编号。\n\n# 几处重构和增强\n\n## 升级的`CanConnectDB2`\n\n使用了一些`implicit`，完成更加通用的数据库读写操作。同时\n限定了一些泛型方法的返回值。\n\n具体请参见源代码。\n\n## 拆分`CanBeHierarchic`\n\n`Hierarchic`在未来，可以使用并查集维护关联关系。\n\n目前拆分成两个`trait`，分别对应静态属性和实例属性。\n\n参考：\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/ea24ab2c443a802145488b81c15e2fa7266492ae\n{% endhighlight %}\n\n## 全局的`Action Not Found`处理\n\n将`Action Not Found`的异常，统一交给`ResponseError`类处理。\n\n{% highlight raw %}\nhttps://github.com/scozv/bolero/commit/e8991bc146adeabaf5d5f713f253a2a6fa1fe950\n{% endhighlight %}\n\n## 增强了`ResponseOk`的功能\n\n使用`implicit writes`，避免了参数传入`ResponseOk`\n之前，还要手动`Json.toJson`的问题。\n\n## 清理`unused import`\n\n清理了多处`unused import`。\n\n# 未能解决的问题\n\n## 服务启动之后的编译\n\n我发现，不管通过`activator run`还是IntelliJ IDEA启动`Play!`，\n命令行提示，服务已经在`9000`端口开启了。\n\n但是初次访问接口，依然会触发新的编译。\n\n## `routes`更新之后，需要`run`过，才能测试\n\n`routes`变更，或者代码变更很多，直接跑测试，可能没有触发最新的编译。\n建议，后台常驻启动一个`9000`端口的`run`。\n\n## 测试和调式数据库没有分离\n\n目前发现，`WithApplication`里面的模拟HTTP Request将使用`application.conf`\n的配置。导致，没法另外指定测试数据库。\n\n# 参考文献\n\n[^blog_bolero]: [Bolero——基于Scala、Play!和ReactiveMongo的RESTful代码模板](https://scozv.github.io/blog/zh/guide/2016/07/27/bolero-a-restful-scaffold-with-scala)\n","slug":"zh-2016-09-05-bolero-cumulative-update-on-sep-04-2016","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryut0066yxcbc083ufs3"},{"layout":"post","title":"纠结于具体的代码实现，不妨准备更完备的测试用例","description":"","lang":"zh","_content":"{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 如果我们有如下的一个需求：\n>\n> * 在数据库中存储带有通配符的匹配规则，比如`*a.com`，\n> * 该规则可以匹配出，`s1.a.com`，但是不应该匹配出`a.com`。\n>\n> 本文将简单介绍两种可行的方法，但是更想强调，在这样的情况下，完备的测试\n> 比具体的实现细节更重要。\n\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 需求描述\n\n假如想支持如下四种通配规则（按照规则的先后执行）：\n\n{% highlight bash %}\na.*       -> 1\na-*       -> 2\n*.a.com   -> 3\n*.a.*     -> 4\n{% endhighlight %}\n\n箭头左边的表示通配规则，右边表示，当一个域名（输入参数）匹配的时候，\n应该返回什么。\n\n比如，如下两个匹配的例子：\n\n{% highlight bash %}\nz.a.com   -> 3\nz.a.io    -> 4\n{% endhighlight %}\n\n# 两种实现方式\n\n因为有通配符的存在，直接使用`substring`的方式并不可行。\n\n我们可以尝试想把输入参数中的关键字符串（比如 `a`）提取出来，\n再构造出匹配规则，最后和数据库相匹配。\n\n## 使用`InternetDomainName`查找关键字符串\n\n因为是域名的匹配，可以使用`InternetDomainName` [^_guava_int_dn]先\n提取出根域名。总之，我们假定，我们能找到一个方法，从一个域名里面提出\n根域名。\n\n定义该方法为：\n\n{% highlight JavaScript %}\nfunction getRootDomain(domain) {\n  // ...\n}\n{% endhighlight %}\n\n## 构造出匹配规则\n\n已知四种匹配规则，并且也知道了根域名。我们可以拼接成精确的匹配字符串。\n\n示例代码如下：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`)) return 1\n  if (db.find(`$rootDomain-*`)) return 2\n  if (db.find(`*.$rootDomain.com`)) return 3\n  if (db.find(`*.$rootDomain.*`)) return 4\n}\n{% endhighlight %}\n\n如果我们适当地写几个测试用例，就会发现，上面的代码是有问题的，比如\n如下的测试用例：\n\n{% highlight JavaScript %}\nmatchAndGetResult('z.a.com') should equal to 3\n{% endhighlight %}\n\n但实际上，返回的值确是`1`。\n\n所以我们想了想，又匆匆忙忙得改改代码：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`) && domain.startWith(`$rootDomain.`))\n    return 1\n  // ...\n}\n{% endhighlight %}\n\n这样的方法是可行的，但是会发现两个不足的地方：\n\n* 部分匹配规则需要使用`startWith`，部分匹配规则需要使用`contains()`。\n* 如果匹配规则多的话，`if-return` 的次数也会增多。\n\n\n## 使用正则\n\n对于上面的两个不足，可以总结为：\n\n* 如何判断，字符串匹配的时候，是发生在“开始”，还是“中间”？\n* 如何在还原匹配规则的时候，可以匹配更多的情况，减少`if-return`的分支？\n\n我们可以使用正则，因为：\n\n* 正则可以判断字符串匹配的位置；\n* 也可以匹配多种情况。\n\n一种实现方式，可以参考如下的示例代码：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n\n  if (var dbResult = db.find(`$rootDomain.*`)) {\n    // build the regex\n    var regex = dbResult\n      .string\n      .replace('*', '[\\\\S]*')\n      .replace('.', '\\\\.')\n\n    if (/^$regex/g).test(domain) {\n      return dbResult.value\n    }\n  }\n}\n{% endhighlight %}\n\n# 优先考虑测试用例的完善\n\n除了以上两种实现，应该还有更好的代码实现。\n\n但本文想要表达的意思是：“有的情况下，完备的测试用例，比代码的具体实现方式（细节）更加的重要”。\n\n我认为本文属于这样的情况：\n\n一来，需求有清晰直观的输入输出值。本文的需求拿到之后，已经可以直接写出一系列的输入输出了。\n具体的代码实现，反而需要思考不同的情况。\n\n再者，代码的实现，通常是私有的，内部的方法，而且代码量并不大。不需要过度纠结实现的细节。\n\n最后，代码的实现方式也有很多种，不同的人，有不同的思路，代码的可读性也不同。\n该谁做，就用谁的思路。\n\n只要保证，满足所有的测试用例就行了。因此，适当的测试驱动开发，是合理的。\n\n\n# 总结\n\n上面提到的，代码细节不重要，有一定的限定条件：\n\n* 在某些情况下；\n* “不重要”不代表，完全不遵从社区、或者团队之间的开发规范\n\n在这样的限定下，在开发过程中，还有很多优先级，可以排在“精益求精”的代码细节之前的：\n\n* 正确的实现；\n* 尽快地实现功能；\n* 完备的测试可供检查和重构；\n* 等等等等。\n\n# 参考文献\n\n[^_guava_int_dn]: [Explanation of `InternetDomainName`](https://github.com/google/guava/wiki/InternetDomainNameExplained)\n","source":"_posts/zh/2017-03-23-use-minimum-matched-string-and-extended-regex-for-wildcard-matching.md","raw":"---\nlayout: post\ntitle: \"纠结于具体的代码实现，不妨准备更完备的测试用例\"\ndescription: \"\"\ncategory: \"algo\"\ntags: [\"algorithm\",\"regex\",\"string\",\"pattern\"]\nlang: \"zh\"\n---\n{% include JB/setup %}\n\n# 摘要\n{:.no_toc}\n\n> 如果我们有如下的一个需求：\n>\n> * 在数据库中存储带有通配符的匹配规则，比如`*a.com`，\n> * 该规则可以匹配出，`s1.a.com`，但是不应该匹配出`a.com`。\n>\n> 本文将简单介绍两种可行的方法，但是更想强调，在这样的情况下，完备的测试\n> 比具体的实现细节更重要。\n\n\n<!--more-->\n\n* Will be replaced with the ToC, excluding the \"Contents\" header\n{:toc}\n\n# 需求描述\n\n假如想支持如下四种通配规则（按照规则的先后执行）：\n\n{% highlight bash %}\na.*       -> 1\na-*       -> 2\n*.a.com   -> 3\n*.a.*     -> 4\n{% endhighlight %}\n\n箭头左边的表示通配规则，右边表示，当一个域名（输入参数）匹配的时候，\n应该返回什么。\n\n比如，如下两个匹配的例子：\n\n{% highlight bash %}\nz.a.com   -> 3\nz.a.io    -> 4\n{% endhighlight %}\n\n# 两种实现方式\n\n因为有通配符的存在，直接使用`substring`的方式并不可行。\n\n我们可以尝试想把输入参数中的关键字符串（比如 `a`）提取出来，\n再构造出匹配规则，最后和数据库相匹配。\n\n## 使用`InternetDomainName`查找关键字符串\n\n因为是域名的匹配，可以使用`InternetDomainName` [^_guava_int_dn]先\n提取出根域名。总之，我们假定，我们能找到一个方法，从一个域名里面提出\n根域名。\n\n定义该方法为：\n\n{% highlight JavaScript %}\nfunction getRootDomain(domain) {\n  // ...\n}\n{% endhighlight %}\n\n## 构造出匹配规则\n\n已知四种匹配规则，并且也知道了根域名。我们可以拼接成精确的匹配字符串。\n\n示例代码如下：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`)) return 1\n  if (db.find(`$rootDomain-*`)) return 2\n  if (db.find(`*.$rootDomain.com`)) return 3\n  if (db.find(`*.$rootDomain.*`)) return 4\n}\n{% endhighlight %}\n\n如果我们适当地写几个测试用例，就会发现，上面的代码是有问题的，比如\n如下的测试用例：\n\n{% highlight JavaScript %}\nmatchAndGetResult('z.a.com') should equal to 3\n{% endhighlight %}\n\n但实际上，返回的值确是`1`。\n\n所以我们想了想，又匆匆忙忙得改改代码：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n  // rule 1\n  if (db.find(`$rootDomain.*`) && domain.startWith(`$rootDomain.`))\n    return 1\n  // ...\n}\n{% endhighlight %}\n\n这样的方法是可行的，但是会发现两个不足的地方：\n\n* 部分匹配规则需要使用`startWith`，部分匹配规则需要使用`contains()`。\n* 如果匹配规则多的话，`if-return` 的次数也会增多。\n\n\n## 使用正则\n\n对于上面的两个不足，可以总结为：\n\n* 如何判断，字符串匹配的时候，是发生在“开始”，还是“中间”？\n* 如何在还原匹配规则的时候，可以匹配更多的情况，减少`if-return`的分支？\n\n我们可以使用正则，因为：\n\n* 正则可以判断字符串匹配的位置；\n* 也可以匹配多种情况。\n\n一种实现方式，可以参考如下的示例代码：\n\n{% highlight raw %}\nfunction matchAndGetResult(domain) {\n  var rootDomain = getRootDomain(domain)\n\n  if (var dbResult = db.find(`$rootDomain.*`)) {\n    // build the regex\n    var regex = dbResult\n      .string\n      .replace('*', '[\\\\S]*')\n      .replace('.', '\\\\.')\n\n    if (/^$regex/g).test(domain) {\n      return dbResult.value\n    }\n  }\n}\n{% endhighlight %}\n\n# 优先考虑测试用例的完善\n\n除了以上两种实现，应该还有更好的代码实现。\n\n但本文想要表达的意思是：“有的情况下，完备的测试用例，比代码的具体实现方式（细节）更加的重要”。\n\n我认为本文属于这样的情况：\n\n一来，需求有清晰直观的输入输出值。本文的需求拿到之后，已经可以直接写出一系列的输入输出了。\n具体的代码实现，反而需要思考不同的情况。\n\n再者，代码的实现，通常是私有的，内部的方法，而且代码量并不大。不需要过度纠结实现的细节。\n\n最后，代码的实现方式也有很多种，不同的人，有不同的思路，代码的可读性也不同。\n该谁做，就用谁的思路。\n\n只要保证，满足所有的测试用例就行了。因此，适当的测试驱动开发，是合理的。\n\n\n# 总结\n\n上面提到的，代码细节不重要，有一定的限定条件：\n\n* 在某些情况下；\n* “不重要”不代表，完全不遵从社区、或者团队之间的开发规范\n\n在这样的限定下，在开发过程中，还有很多优先级，可以排在“精益求精”的代码细节之前的：\n\n* 正确的实现；\n* 尽快地实现功能；\n* 完备的测试可供检查和重构；\n* 等等等等。\n\n# 参考文献\n\n[^_guava_int_dn]: [Explanation of `InternetDomainName`](https://github.com/google/guava/wiki/InternetDomainNameExplained)\n","slug":"zh-2017-03-23-use-minimum-matched-string-and-extended-regex-for-wildcard-matching","published":1,"date":"2017-03-31T08:34:18.000Z","updated":"2017-03-31T08:34:18.000Z","comments":1,"photos":[],"link":"","_id":"cj0xkryut0069yxcbtep6ker4"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0xkryrc0000yxcbh93d3ul3","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkryrx000ayxcbolzpskpj"},{"post_id":"cj0xkryrh0001yxcb0u3q6e74","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkrys2000fyxcbvrmntihc"},{"post_id":"cj0xkryrm0004yxcb8pvqsbnq","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkrys5000kyxcb7tw90iti"},{"post_id":"cj0xkryro0005yxcb5qz1qayk","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrys9000ryxcb9ypzv862"},{"post_id":"cj0xkryrt0006yxcb64yh6ujt","category_id":"cj0xkrys6000myxcbencip6f3","_id":"cj0xkryse000yyxcbhmqogcuh"},{"post_id":"cj0xkrysa000vyxcbpp36kqmd","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkrysg0013yxcbpuruyequ"},{"post_id":"cj0xkryrw0009yxcbsmv181a1","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkrysi0015yxcbc5lma0l1"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrysl0019yxcbhy1fjcvt"},{"post_id":"cj0xkrysf0012yxcb20mdl9rs","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrysn001cyxcbbnlcpyk4"},{"post_id":"cj0xkryrx000byxcbkvn20zex","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryso001gyxcbyfh7gaso"},{"post_id":"cj0xkrysg0014yxcb7w1l19ia","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryso001iyxcb9qglwbap"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrysp001lyxcbk98n1f5j"},{"post_id":"cj0xkrys1000eyxcbepmcgslv","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrysq001myxcbq01zeqaq"},{"post_id":"cj0xkrysl001byxcb95w2k6fj","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkrysq001pyxcbdb5ejw2q"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkrysq001ryxcbjxlct6ze"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryst001vyxcbe5q1isnw"},{"post_id":"cj0xkrys5000lyxcbi7r8mhe6","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryst001xyxcbt9n3u5j0"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkrysu0020yxcbvcppi9lo"},{"post_id":"cj0xkrys9000qyxcbz050v59u","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkrysu0022yxcb0c4hs877"},{"post_id":"cj0xkrytz004wyxcbk6u1m0cs","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkryu40050yxcb825bpm28"},{"post_id":"cj0xkryu1004xyxcb9ny5rpv1","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkryu50053yxcbg1bom76i"},{"post_id":"cj0xkryu3004zyxcbkj5n5llo","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkryu60056yxcb5omdo2jl"},{"post_id":"cj0xkryu40052yxcblgxcm96f","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryu80059yxcbuuwe1v8b"},{"post_id":"cj0xkryu50055yxcbkdph3zky","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryu9005cyxcbi2rpuimf"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryub005gyxcbzmtlizef"},{"post_id":"cj0xkryu8005byxcbvezt9mrh","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryud005jyxcb2pzz892a"},{"post_id":"cj0xkryu9005eyxcbj34eyb1r","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryue005myxcbbg8mt36z"},{"post_id":"cj0xkryub005iyxcboitg3p5q","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryug005pyxcbxefthy31"},{"post_id":"cj0xkryud005lyxcbckruqlw5","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryuh005syxcb85e0vmyr"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryuk005vyxcbca3ic8k6"},{"post_id":"cj0xkryug005ryxcb99rig9tm","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryuq005yyxcb6r20c97h"},{"post_id":"cj0xkryuh005uyxcb30z03iir","category_id":"cj0xkrys9000syxcbblhw0qni","_id":"cj0xkryus0061yxcbcgtt2p9h"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryut0064yxcb6gyolrfk"},{"post_id":"cj0xkryuq0060yxcbej2s0vx5","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryut0067yxcbiw14gz8o"},{"post_id":"cj0xkryus0063yxcbsalczwa8","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryuu006ayxcb4l8z3x40"},{"post_id":"cj0xkryut0066yxcbc083ufs3","category_id":"cj0xkrys3000hyxcbn8ep3hr2","_id":"cj0xkryuv006cyxcbo58ijx39"},{"post_id":"cj0xkryut0069yxcbtep6ker4","category_id":"cj0xkryrj0002yxcb9u2g5ess","_id":"cj0xkryuv006eyxcbnz7irky5"}],"PostTag":[{"post_id":"cj0xkryrc0000yxcbh93d3ul3","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkrys8000pyxcbm0g1u3x5"},{"post_id":"cj0xkryrc0000yxcbh93d3ul3","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkrysa000tyxcb41ikat29"},{"post_id":"cj0xkryrc0000yxcbh93d3ul3","tag_id":"cj0xkryrz000dyxcbqxdry6ij","_id":"cj0xkrysd000wyxcbknq88d58"},{"post_id":"cj0xkryrc0000yxcbh93d3ul3","tag_id":"cj0xkrys3000iyxcbjpfkkau7","_id":"cj0xkryse000zyxcbulhutfww"},{"post_id":"cj0xkryrh0001yxcb0u3q6e74","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkrysl001ayxcbbd2yvv2g"},{"post_id":"cj0xkryrh0001yxcb0u3q6e74","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkrysn001eyxcbucwx0icu"},{"post_id":"cj0xkryrh0001yxcb0u3q6e74","tag_id":"cj0xkrysf0011yxcbu6eb710y","_id":"cj0xkryso001hyxcb5nop5fgl"},{"post_id":"cj0xkryrm0004yxcb8pvqsbnq","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkrysq001qyxcbp8syt7bl"},{"post_id":"cj0xkryrm0004yxcb8pvqsbnq","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkryss001tyxcbrytztkq9"},{"post_id":"cj0xkryrm0004yxcb8pvqsbnq","tag_id":"cj0xkrysp001kyxcbxdy15sr8","_id":"cj0xkryst001wyxcblref3i7w"},{"post_id":"cj0xkryro0005yxcb5qz1qayk","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkrysu0023yxcbj2z9arse"},{"post_id":"cj0xkryro0005yxcb5qz1qayk","tag_id":"cj0xkryss001uyxcblq76y5as","_id":"cj0xkrysu0024yxcbont7l1f7"},{"post_id":"cj0xkryro0005yxcb5qz1qayk","tag_id":"cj0xkrysu001zyxcbewbn3xz8","_id":"cj0xkrysv0026yxcbm9cjzy6u"},{"post_id":"cj0xkryrw0009yxcbsmv181a1","tag_id":"cj0xkrysu0021yxcbv30i7rj1","_id":"cj0xkrysw0029yxcb3zs8j7xu"},{"post_id":"cj0xkryrw0009yxcbsmv181a1","tag_id":"cj0xkrysu0025yxcb0s70lkcs","_id":"cj0xkrysw002ayxcbqkgjbxq5"},{"post_id":"cj0xkryrw0009yxcbsmv181a1","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkrysw002cyxcbjo61jelh"},{"post_id":"cj0xkryrx000byxcbkvn20zex","tag_id":"cj0xkrysv0028yxcbxr7e4n3d","_id":"cj0xkrysx002fyxcbuptprlah"},{"post_id":"cj0xkryrx000byxcbkvn20zex","tag_id":"cj0xkrysw002byxcb9qtu0f4c","_id":"cj0xkrysx002gyxcb4bpckztb"},{"post_id":"cj0xkryrx000byxcbkvn20zex","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkrysx002iyxcbbvmq7tq2"},{"post_id":"cj0xkrys1000eyxcbepmcgslv","tag_id":"cj0xkrysx002eyxcbdpkfuive","_id":"cj0xkrysx002kyxcb8qzquio5"},{"post_id":"cj0xkrys1000eyxcbepmcgslv","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkrysx002lyxcbvr25zvye"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkrysz002ryxcbzrcumvt7"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkrysz002syxcbvobwxpdh"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkrysz002uyxcbs5gmp3cl"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","tag_id":"cj0xkrysy002oyxcbxw71qm6x","_id":"cj0xkrysz002vyxcb56bh0361"},{"post_id":"cj0xkrys2000gyxcbvt350ic9","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkrysz002xyxcb3i8bndj6"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysv0028yxcbxr7e4n3d","_id":"cj0xkryt10032yxcba9wuxpz5"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkryt10033yxcbyaj00qvq"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryt10035yxcbzonhhxhi"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkryt20036yxcbpl5h5185"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysy002oyxcbxw71qm6x","_id":"cj0xkryt20038yxcbcrgsuuod"},{"post_id":"cj0xkrys4000jyxcb68ar7lf2","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryt20039yxcb0f27rr8p"},{"post_id":"cj0xkrys5000lyxcbi7r8mhe6","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryt2003byxcbe6cqhbbe"},{"post_id":"cj0xkrys5000lyxcbi7r8mhe6","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryt2003cyxcbq3lc7x8b"},{"post_id":"cj0xkrys5000lyxcbi7r8mhe6","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkryt3003eyxcbphm65tvk"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkryt5003jyxcbjmr0w168"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","tag_id":"cj0xkryt2003dyxcbehwuxgtr","_id":"cj0xkryt5003kyxcbm9du34un"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","tag_id":"cj0xkryt3003fyxcb3jgf13ey","_id":"cj0xkryt5003myxcb36kswrgn"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","tag_id":"cj0xkryt3003gyxcbkaob1kmx","_id":"cj0xkryt6003nyxcbb7y2l16y"},{"post_id":"cj0xkrys7000oyxcbqiznc5ko","tag_id":"cj0xkryt3003hyxcbo102bkbg","_id":"cj0xkryt7003pyxcbh0f8xt45"},{"post_id":"cj0xkrys9000qyxcbz050v59u","tag_id":"cj0xkryt4003iyxcbcm35bpld","_id":"cj0xkryt8003tyxcbemoukw4q"},{"post_id":"cj0xkrys9000qyxcbz050v59u","tag_id":"cj0xkryt5003lyxcbkdv8it0d","_id":"cj0xkryt8003uyxcb1w2jm243"},{"post_id":"cj0xkrys9000qyxcbz050v59u","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryt8003wyxcb9682nctl"},{"post_id":"cj0xkrys9000qyxcbz050v59u","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkryt8003xyxcbndht9vf8"},{"post_id":"cj0xkrys9000qyxcbz050v59u","tag_id":"cj0xkryt8003ryxcba1cf10sw","_id":"cj0xkryt9003zyxcbpq4f704q"},{"post_id":"cj0xkrysa000vyxcbpp36kqmd","tag_id":"cj0xkryt8003syxcbr49ckldr","_id":"cj0xkryt90040yxcb2ac2phfy"},{"post_id":"cj0xkrysa000vyxcbpp36kqmd","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryt90042yxcbbeh09mzi"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryta0047yxcbrxvef40j"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","tag_id":"cj0xkryt90041yxcbs3ylo3d9","_id":"cj0xkrytb0048yxcbn49nrom0"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkrytb004ayxcb8c88x445"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkrytb004byxcbkpbc20dn"},{"post_id":"cj0xkrysd000xyxcb1k5zw0me","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkrytb004dyxcb68932esb"},{"post_id":"cj0xkrysf0012yxcb20mdl9rs","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkrytb004eyxcbjvdhl740"},{"post_id":"cj0xkrysg0014yxcb7w1l19ia","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkrytc004gyxcbrp0ab17t"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkrytd004lyxcbuuqw3rd9"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","tag_id":"cj0xkryt90041yxcbs3ylo3d9","_id":"cj0xkrytd004myxcbwvn0tpa1"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkrytd004oyxcbp3gr3jne"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkrytd004pyxcbmtr7l6vz"},{"post_id":"cj0xkrysi0017yxcbp2dv3k29","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkryte004ryxcb4zu230e2"},{"post_id":"cj0xkrysl001byxcb95w2k6fj","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkryte004syxcbmhgnulgl"},{"post_id":"cj0xkrysl001byxcb95w2k6fj","tag_id":"cj0xkrytd004kyxcbqqx49nsl","_id":"cj0xkryte004tyxcb5zhnxh6x"},{"post_id":"cj0xkrysl001byxcb95w2k6fj","tag_id":"cj0xkrytd004nyxcbm3lsnyfd","_id":"cj0xkryte004uyxcb40s202n1"},{"post_id":"cj0xkrysl001byxcb95w2k6fj","tag_id":"cj0xkrytd004qyxcbhnfwl8x0","_id":"cj0xkryte004vyxcbcs9lupuv"},{"post_id":"cj0xkrytz004wyxcbk6u1m0cs","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkryu2004yyxcb3zuomn9z"},{"post_id":"cj0xkrytz004wyxcbk6u1m0cs","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkryu40051yxcb7h9xkvuv"},{"post_id":"cj0xkrytz004wyxcbk6u1m0cs","tag_id":"cj0xkryrz000dyxcbqxdry6ij","_id":"cj0xkryu50054yxcb1srkkh3o"},{"post_id":"cj0xkrytz004wyxcbk6u1m0cs","tag_id":"cj0xkrys3000iyxcbjpfkkau7","_id":"cj0xkryu60057yxcb5oir3znx"},{"post_id":"cj0xkryu1004xyxcb9ny5rpv1","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkryu8005ayxcbgkxysh2h"},{"post_id":"cj0xkryu1004xyxcb9ny5rpv1","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkryu9005dyxcbozi0u8t4"},{"post_id":"cj0xkryu1004xyxcb9ny5rpv1","tag_id":"cj0xkrysf0011yxcbu6eb710y","_id":"cj0xkryub005hyxcbmlje7n6c"},{"post_id":"cj0xkryu3004zyxcbkj5n5llo","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkryud005kyxcbvo18gh86"},{"post_id":"cj0xkryu3004zyxcbkj5n5llo","tag_id":"cj0xkryru0008yxcbvav69qm2","_id":"cj0xkryue005nyxcb2vqzwn8g"},{"post_id":"cj0xkryu3004zyxcbkj5n5llo","tag_id":"cj0xkrysp001kyxcbxdy15sr8","_id":"cj0xkryug005qyxcbb5iy4h5f"},{"post_id":"cj0xkryu40052yxcblgxcm96f","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryuh005tyxcby4qxydjy"},{"post_id":"cj0xkryu40052yxcblgxcm96f","tag_id":"cj0xkryss001uyxcblq76y5as","_id":"cj0xkryuk005wyxcbke09p5gq"},{"post_id":"cj0xkryu40052yxcblgxcm96f","tag_id":"cj0xkrysu001zyxcbewbn3xz8","_id":"cj0xkryuq005zyxcbt75us0e5"},{"post_id":"cj0xkryu50055yxcbkdph3zky","tag_id":"cj0xkrysu0021yxcbv30i7rj1","_id":"cj0xkryus0062yxcbdsscs044"},{"post_id":"cj0xkryu50055yxcbkdph3zky","tag_id":"cj0xkrysu0025yxcb0s70lkcs","_id":"cj0xkryut0065yxcb3irx60rr"},{"post_id":"cj0xkryu50055yxcbkdph3zky","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryut0068yxcbwp1wpgnf"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysv0028yxcbxr7e4n3d","_id":"cj0xkryuu006byxcb9gzd7hx4"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkryuv006dyxcbvr7hvmq6"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryuv006fyxcb9gmpc7ss"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkryuv006gyxcb0rdh6i7s"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysy002oyxcbxw71qm6x","_id":"cj0xkryuv006hyxcb9wibt36v"},{"post_id":"cj0xkryu60058yxcb9t66hfq8","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryuv006iyxcb2hf2ax4k"},{"post_id":"cj0xkryu9005eyxcbj34eyb1r","tag_id":"cj0xkrysv0028yxcbxr7e4n3d","_id":"cj0xkryuv006jyxcbjvg2irgl"},{"post_id":"cj0xkryu9005eyxcbj34eyb1r","tag_id":"cj0xkrysw002byxcb9qtu0f4c","_id":"cj0xkryuv006kyxcbjevjbud8"},{"post_id":"cj0xkryu9005eyxcbj34eyb1r","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryuv006lyxcbgyp6iptf"},{"post_id":"cj0xkryub005iyxcboitg3p5q","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkryuv006myxcb4spmdtda"},{"post_id":"cj0xkryub005iyxcboitg3p5q","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryuv006nyxcbhyhnudpl"},{"post_id":"cj0xkryub005iyxcboitg3p5q","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkryuv006oyxcbddnf08b6"},{"post_id":"cj0xkryub005iyxcboitg3p5q","tag_id":"cj0xkrysy002oyxcbxw71qm6x","_id":"cj0xkryuw006pyxcbe3suggri"},{"post_id":"cj0xkryub005iyxcboitg3p5q","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryuw006qyxcbrp32ydli"},{"post_id":"cj0xkryud005lyxcbckruqlw5","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryuw006ryxcbxzpe6l2i"},{"post_id":"cj0xkryud005lyxcbckruqlw5","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryuw006syxcbe8iw7x57"},{"post_id":"cj0xkryud005lyxcbckruqlw5","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkryuw006tyxcbt6ca8car"},{"post_id":"cj0xkryu8005byxcbvezt9mrh","tag_id":"cj0xkryub005fyxcb632p2c9m","_id":"cj0xkryuw006uyxcbh52wnsmv"},{"post_id":"cj0xkryu8005byxcbvezt9mrh","tag_id":"cj0xkrysx002hyxcb9cutg015","_id":"cj0xkryuw006vyxcbzoet30w7"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","tag_id":"cj0xkrysy002nyxcbmuqm50yc","_id":"cj0xkryuw006wyxcbvupozd2d"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","tag_id":"cj0xkryt2003dyxcbehwuxgtr","_id":"cj0xkryuw006xyxcb5j0pljvt"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","tag_id":"cj0xkryt3003fyxcb3jgf13ey","_id":"cj0xkryuw006yyxcbhefm22y0"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","tag_id":"cj0xkryt3003gyxcbkaob1kmx","_id":"cj0xkryuw006zyxcb5kwvoy9g"},{"post_id":"cj0xkryue005oyxcbqv2njvn9","tag_id":"cj0xkryt3003hyxcbo102bkbg","_id":"cj0xkryuw0070yxcbvxxh69pr"},{"post_id":"cj0xkryug005ryxcb99rig9tm","tag_id":"cj0xkryt4003iyxcbcm35bpld","_id":"cj0xkryuw0071yxcbdrg1uqac"},{"post_id":"cj0xkryug005ryxcb99rig9tm","tag_id":"cj0xkryt5003lyxcbkdv8it0d","_id":"cj0xkryuw0072yxcbi5x3vrhe"},{"post_id":"cj0xkryug005ryxcb99rig9tm","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryuw0073yxcbnxpk8gim"},{"post_id":"cj0xkryug005ryxcb99rig9tm","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkryuw0074yxcb0m1nyn3g"},{"post_id":"cj0xkryug005ryxcb99rig9tm","tag_id":"cj0xkryt8003ryxcba1cf10sw","_id":"cj0xkryuw0075yxcb5qjsmwn2"},{"post_id":"cj0xkryuh005uyxcb30z03iir","tag_id":"cj0xkryt8003syxcbr49ckldr","_id":"cj0xkryux0076yxcblie0p2lt"},{"post_id":"cj0xkryuh005uyxcb30z03iir","tag_id":"cj0xkrysq001oyxcb39ubc8vf","_id":"cj0xkryux0077yxcbf253dfla"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryux0078yxcbdgonbecz"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","tag_id":"cj0xkryt90041yxcbs3ylo3d9","_id":"cj0xkryux0079yxcbjfwygwm8"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryux007ayxcbgkdblfxa"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkryux007byxcbkxvh3z4j"},{"post_id":"cj0xkryuk005xyxcbmikj0yhh","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkryux007cyxcbhswgklyv"},{"post_id":"cj0xkryuq0060yxcbej2s0vx5","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryux007dyxcbmq7mgspi"},{"post_id":"cj0xkryus0063yxcbsalczwa8","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryux007eyxcbgnw0wnd2"},{"post_id":"cj0xkryut0066yxcbc083ufs3","tag_id":"cj0xkrysv0027yxcb6mqqgiq8","_id":"cj0xkryux007fyxcb7u76jhmf"},{"post_id":"cj0xkryut0066yxcbc083ufs3","tag_id":"cj0xkryt90041yxcbs3ylo3d9","_id":"cj0xkryux007gyxcbieqydri0"},{"post_id":"cj0xkryut0066yxcbc083ufs3","tag_id":"cj0xkrysw002dyxcbkv6nc6pv","_id":"cj0xkryuy007hyxcb93q1swuo"},{"post_id":"cj0xkryut0066yxcbc083ufs3","tag_id":"cj0xkryt20037yxcbwihnk3cx","_id":"cj0xkryuy007iyxcbcucv76sg"},{"post_id":"cj0xkryut0066yxcbc083ufs3","tag_id":"cj0xkryt7003qyxcbwh61085j","_id":"cj0xkryuy007jyxcbwdxlnebt"},{"post_id":"cj0xkryut0069yxcbtep6ker4","tag_id":"cj0xkryrl0003yxcbxb7m0hi0","_id":"cj0xkryuy007kyxcbronfaro0"},{"post_id":"cj0xkryut0069yxcbtep6ker4","tag_id":"cj0xkrytd004kyxcbqqx49nsl","_id":"cj0xkryuy007lyxcbwww8z6nk"},{"post_id":"cj0xkryut0069yxcbtep6ker4","tag_id":"cj0xkrytd004nyxcbm3lsnyfd","_id":"cj0xkryuy007myxcbgcsbmstt"},{"post_id":"cj0xkryut0069yxcbtep6ker4","tag_id":"cj0xkrytd004qyxcbhnfwl8x0","_id":"cj0xkryuy007nyxcb33g0k0s1"}],"Tag":[{"name":"algorithm","_id":"cj0xkryrl0003yxcbxb7m0hi0"},{"name":"graph","_id":"cj0xkryru0008yxcbvav69qm2"},{"name":"dijkstra","_id":"cj0xkryrz000dyxcbqxdry6ij"},{"name":"heap","_id":"cj0xkrys3000iyxcbjpfkkau7"},{"name":"dfs","_id":"cj0xkrysf0011yxcbu6eb710y"},{"name":"scc","_id":"cj0xkrysp001kyxcbxdy15sr8"},{"name":"ci","_id":"cj0xkrysq001oyxcb39ubc8vf"},{"name":"unit","_id":"cj0xkryss001uyxcblq76y5as"},{"name":"grunt","_id":"cj0xkrysu001zyxcbewbn3xz8"},{"name":"linq","_id":"cj0xkrysu0021yxcbv30i7rj1"},{"name":"monad","_id":"cj0xkrysu0025yxcb0s70lkcs"},{"name":"scala","_id":"cj0xkrysv0027yxcb6mqqgiq8"},{"name":"latex","_id":"cj0xkrysv0028yxcbxr7e4n3d"},{"name":"tex","_id":"cj0xkrysw002byxcb9qtu0f4c"},{"name":"project","_id":"cj0xkrysw002dyxcbkv6nc6pv"},{"name":"jekyll","_id":"cj0xkrysx002eyxcbdpkfuive"},{"name":"markdown","_id":"cj0xkrysx002hyxcb9cutg015"},{"name":"git","_id":"cj0xkrysy002nyxcbmuqm50yc"},{"name":"jira","_id":"cj0xkrysy002oyxcbxw71qm6x"},{"name":"architecture","_id":"cj0xkryt20037yxcbwihnk3cx"},{"name":"branch","_id":"cj0xkryt2003dyxcbehwuxgtr"},{"name":"rebase","_id":"cj0xkryt3003fyxcb3jgf13ey"},{"name":"merge","_id":"cj0xkryt3003gyxcbkaob1kmx"},{"name":"version","_id":"cj0xkryt3003hyxcbo102bkbg"},{"name":"ping++","_id":"cj0xkryt4003iyxcbcm35bpld"},{"name":"microservice","_id":"cj0xkryt5003lyxcbkdv8it0d"},{"name":"restful","_id":"cj0xkryt7003qyxcbwh61085j"},{"name":"payment","_id":"cj0xkryt8003ryxcba1cf10sw"},{"name":"bash","_id":"cj0xkryt8003syxcbr49ckldr"},{"name":"scaffold","_id":"cj0xkryt90041yxcbs3ylo3d9"},{"name":"regex","_id":"cj0xkrytd004kyxcbqqx49nsl"},{"name":"string","_id":"cj0xkrytd004nyxcbm3lsnyfd"},{"name":"pattern","_id":"cj0xkrytd004qyxcbhnfwl8x0"},{"name":"Jekyll","_id":"cj0xkryub005fyxcb632p2c9m"}]}}